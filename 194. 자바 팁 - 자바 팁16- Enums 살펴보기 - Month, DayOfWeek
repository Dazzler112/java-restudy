

이전 강의에선 Enum(열거형)의 기초를 다뤘다 season이라는 Enum(열거형)을 만드는 방법과 사용하는 방법을 탐구했었다 
그런데 사실 Enum(열거형)은 독립적으로 존재할 수 있다 굳이 별도의 클래스 안에 있을 필요가 없다는 것이다
이 Enum(열거형)을 클래스 안에 집어넣어 보겠다

-------------------------------------------------------------------------------------------------------------


🟢 Season Enum파일 (파일 분리후)


package tipAndTricks.enums;

import java.time.*;
import java.time.temporal.*;

//1: Season 부분만 복사해 패키지에 붙여넣으면 season이 외부에 생성된 걸 볼 수 있다
//public으로 바꿔 독자적인 클래스라고 할 수도 있다 //이게 보통 열거형을 저장하는 방식이다 Java API의 일부로 생성된 열거형이 많다 그중 하나를 보기 위해 ctrl+shift+t를 누른다 DayofWeek가 보이니?
//public enum DayOfWeek implements TemporalAccessor, TemporalAdjuster { 일주일은 7일이고 이것은 변하지 않는 사실이다 java.time API에 DayOfWeek라는 열거형이 있는 게 바로 이 때문이다 그리고 열거형에 가능한 값을 저장한다
//열거형의 또 다른 예시로는 Month가 있다 public enum Month implements TemporalAccessor, TemporalAdjuster { JANUARY, FEBRUARY,...   여기에는 몇 월이 있을까? 바로 확인 가능하다 1, 2월등이 있다 
//월의 값을 전달해 'Month of'에 생성할 수 있다
/*
    public static Month of(int month) {
        if (month < 1 || month > 12) {
            throw new DateTimeException("Invalid value for MonthOfYear: " + month);
        }
        return ENUMS[month - 1];
    }
    
    여기에 static 메서드가 있는데 이제 1부터 싲가해서 12가지 설정한 다음 값을 전달하고
    열거형 배열에서 특정 월을 얻으면 된다 
    
     private static final Month[] ENUMS = Month.values();
     보면, Month.values가 private static final로 불러온 게 보인다
     모든 값이 배열돼 있고 여기서 접근할 수 있다
*/

public enum Season {
	WINTER(2), SUMMER(1), SPRING(4), FALL(3);

	private int value;

	private Season(int value) {
		this.value = value;
	}

	public int getValue() {
		return value;
	}
	// 0, 1, 2, 3
}

-------------------------------------------------------------------------------------------------------------







/*
정리)
요일과 월 클래스를 통한 열거형을 더 공부하면 프로그래머가 되는 지름길을 알려줄 것이다
많은 프로그래머에게는 원초적 집착이라는 게 있다 이게 무슨 뜻이냐면
일반적으로 모든 것이 문자열이나 숫자라고 생각하는 것이다 열거형에 대해선 생각조차 하지 않는다
좋지 못한 습관이다 특정 값 목록이 있다는 생각이 들고, 그 값에 제한을 걸어 보고 싶을 때 
열거형으로 도전해봐라 
*/
