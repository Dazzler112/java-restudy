
이번 학습에선 스트림의 중간 연산에 관련된 여러 가지 과제를 다뤄보겠다

1.
    //Exercise - Print squares of first 10 numbers!
		//Clue = IntStream.range(1,10)
		/*
		 첫 번째는 첫 10개의 정수 제곱을 출력하는 것이다
		 여기서 단서는 IntStream.range(1,10)이다 이것이 첫 아홉 개의 숫자로 스트림을 생성할 수 있다.
		 첫 10개의 숫자의 제곱을 출력하고 싶다 여기에는 조그만 버그가 있다 그게 무엇인지 알아내고 첫 10개의 숫자를 출력해봐라
		*/
2.
    //List.of("Apple", "Ant", "Bat").stream()
		//Map all of these to lowercase and print them
		/*
		두 번째는 그 스트림에서 문자열 스트림을 이용해 소문자로 매핑해봐라
		이걸 소문자로 매핑한 다음 출력하면 되겠다
		*/
3.
		//List.of("Apple", "Ant", "Bat").steam()
		//Print the length of each element
		/*
		세 번째는 같은 문자열로 이 요소의 길이를 각각 출력하는것이다
		길이 계산은 맵 연산으로 할 수 있다
		*/
		//이렇게 3가지 과제이다

• 첫번째 예제
먼저 첫번째 예제를 풀기전 IntStream을 이해하기 위해 예제를 먼저 보고 가겠다
jshell> IntStream.range(1,10).forEach(p -> System.out.println(p));
1
2
3
4
5
6
7
8
9
9까지 출력한다
이것이 범위에 대해 배워야 할 첫 번째이다 중요한 건 여기 바깥 제한(10)은 배타적이다 포함되지 않는다는 것이다
즉, 1부터 10까지 출력하려면, 1부터 11까지라고 해야 한다는 것이다 
이게 첫 번째이다
이제 제곱은 어떻게 출력해야 할까?
방법은 이 요소들을 e*e로 매핑하는 거였다
IntStream.range(1,11).map(e -> e * e).forEach(p -> System.out.println(p));
1
4
9
16
25
36
49
64
81
100
이제, 첫 10개의 제곱을 출력하는 것이다 이 숫자들의 두 배, 세제곱 들을 출력해볼 수도 있겠다
함수형 프로그래밍을 통한 작업이 얼마나 쉬운지 아실 것이다
루프도 필요없고, 아무것도 필요 없다 그저 매핑할 요소만 정하고, 스트림으로 마법처럼 처리된다

• 두번째 예제
두 번째는 이런 리스트가 있었지?
    //List.of("Apple", "Ant", "Bat").stream()
		//Map all of these to lowercase and print them
		/*
		두 번째는 그 스트림에서 문자열 스트림을 이용해 소문자로 매핑해봐라
		이걸 소문자로 매핑한 다음 출력하면 되겠다
		*/
스트림으로 뭘 할까? 소문자로 매핑은 어떻게 할까 
map(s->s.lowercase())를 입력한다
jshell> List.of("Apple","Aat","Bat").stream().map(s -> s.toLowerCase()).forEach(p -> System.out.println(p));
apple
aat
bat
"Apple","Ant","Bat"가 있는데 리스트에서 "apple","ant","bat"을 출력했다

• 세번째 예제
마지막은 각 요소의 길이를 출력하는 것이다
그래서 map이쪽에 소문자 대신 .length()를 입력한다
jshell> List.of("Apple","Ant","Bat").stream().map(s -> s.length()).forEach(p -> System.out.println(p));
5
3
3



/*
정리)
여기까지 중간 연산의 예시를 배워봤다
모든 중간 작업의 결과는 또 다른 스트림이고
즉, 10개 요소 스트림이 있다면, 중간 연산 후에는 더 많은 요소가 있을 수 있다
요소들이 늘어날 수 도 있다
요소들이 늘어나거나 줄어들거나, 아니면 다른 요소로 매핑한다
중간 작업의 끝에는 또 다른 스트림이 있을 것이다

다음 학습에선 종단 연산을 들어가겠다
*/
