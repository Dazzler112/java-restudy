
이번 학습에서는 추상 클래스와 인터페이스 사이의 차이점이라는 중요한 개념에 대해 알아보자
굳이 말하자면, 추상 클래스와 인터페이스 사이에 별다른 관계가 없다
단지 이들의 문법이 비슷해보일 뿐이다 

그럼 인터페이스는 언제 사용하는 것일까?

우리가 두 시스템 사이에 소통하길 원할때 아니면 두 클래스 아니면 두 부속이 서로 소통하길 바랄때
그들 사이에 우리가 소통 방식을 정하고 싶을때이다, 메소드를 정의하고
예시)
public interface ComplexAlgorithm {
	int complexAlgorithm (int number1, int number2);  => 이 두개는 앞으로 이렇게 소통할 것이라 하고 
            //이제 한쪽에서는 구현을 제공하고 다른쪽에서는 인터페이스를 소비하겠지?
}
이런 상황이 인터페이스가 사용되는 시점이다 

추상클래스는 조금 다른 문맥에 들어온다
추상클래스를 가지고는 
예시)
package AbstractReceipe;

public abstract class AbstractRecipe {

	public void execute() {
		getReady(); 
		doTheDish();            ==> 우리는 높은 단계의 구조를 제공하고 싶어 할 때이다
		cleanup();  
	}
	abstract void getReady();
	abstract void doTheDish();       ==> 우리가 구현의 세세한 부분들은 하위 클래스에게 맡기고 싶을 때이다
	abstract void cleanup();
}
여기서 우리가 하는 것은, 모든 하위 클래스들이 이 구조와 합치하게 만들고 싶을때 하는 것이다. 
그리고 추상 클래스를 사용하려면 우리는 상속을 사용하겠지
그래서, 하위클래스들과 추상클래스인 상위 클래스 사이에서 관계가 성립한다.
/*public void execute() {
		getReady(); 
		doTheDish();            ==> 이 요리법들은 사실 각자 추상 요리법인 것이다
		cleanup();  
	}*/
하지만! 이런 종류의 관계는 인터페이스에는 존재하지 않는다.

사실을 말하자면, 우리가 인터페이스와 추상 클래스를 비교할 때 사과와 오렌지를 비교하는 격이다.
비교가 안 된다

하지만,보통 이 질문을 많이 하니 이것을 답할수 있는 방법은 
이 둘 사이에는 사실 아무런 관계도 없다고 하면 되지만 문법적으로 본다면 아주 약간 비교해 볼수는 있겠다.


이제 문법적 차이점에 대해 알아보자, 중요한 것 중 하나는 
🔵 1. 인터페이스 안에서는 어떤 것을 폐쇄형으로 선언할 수 없다는 것이다.
예시)
public interface ComplexAlgorithm {
	private int complexAlgorithm (int number1, int number2); //컴파일 오류가 남
}
어떤 메소드든 폐쇄형이라 부를수 없는데 왜냐하면 인터페이스 안에는 모든건 개방형이기 때문이다.


추상메소드 안에는 아까와 달리 폐쇄형 메소드들을 넣을 수 있다
예시)
package AbstractReceipe;

private abstract class AbstractRecipe {  ==>폐쇄형이라 할 수 있다.

	public void execute() {
		getReady(); 
		doTheDish();         
		cleanup();  
	}
	abstract void getReady();
	abstract void doTheDish();   
	abstract void cleanup();
}

🔵 2. 또 다른것은 인터페이스 안에는 변수들을 넣을 수 없다는 것이다.
값이 변하는 것들을 가질 수 없다는 것이다 이런 값을 이렇게 가진다 하면, 인터페이스 안에서는 이것을 사실 상수값인 것이다.
예시)
public interface ComplexAlgorithm {
   int value = 5; //상수만 들어감
	 int complexAlgorithm (int number1, int number2);
}
이 값은 바뀔 수 없지만 


추상 클래스에는 일반 클래스와 비슷하게 온갖 종류의 변수들을 가질 수 있다.
왜냐하면 추상 클래스는 그저 클래스이기 때문이다 
단지 추상 클래스의 메소드 중 일부는 구상적 구현이 없을 수 있을 뿐이다.
예시)
package AbstractReceipe;

public abstract class AbstractRecipe {

	public void execute() {
		getReady(); 
		doTheDish();         ==> 일부는 구상적 구현이 없을 수 있다
		cleanup();  
	}
	abstract void getReady();
	abstract void doTheDish();
	abstract void cleanup();
}

🔵 3. 또 다른 차이점은 클래스는 여러 인터페이스를 구현할 수 있다는 것이다
전에 이야기했던 ArrayList를 예시로 들어보자
ArrayList를 보자면 여러 인터페이스를 구현한다 List인터페이스도 구현하고 RadomAccess, Cloneable, Serializble등을 구현한다
예시)
public class ArrayList<E> extends AbstractList<E>
        implements List<E>, RandomAccess, Cloneable, java.io.Serializable
{
이것들이 자세히 무엇인지는 신경 쓸 필요가 없다
중요한건 한 클래스는 여런 인터페이스들을 구현할 수 있지만 


여러 추상적 클래스들을 연장할 수는 없다
예시)
package interfaceTraining;

public class GameRunner{

	public static void main(String[] args) {
		
		//GamingConsole game = new MarioGame();
		GamingConsole game = new ChessGame();
		game.up();
		game.down();
		game.left();
		game.right();

	}
}
결국에는 두 다른 클래스에서 상속받을수 없다는 것으로 요약된다


/*
이번 학습은 인터페이스와 추상적 클래스의 문법적 차이점에 대해 알아봤다
*/
