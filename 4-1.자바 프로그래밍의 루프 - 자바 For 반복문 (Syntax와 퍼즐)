
jshell> for(int i = 0; i <= 10; i++){
   ...>     System.out.print(i + " ");
   ...> }
0 1 2 3 4 5 6 7 8 9 10
//for문의 기초 예제를 보고 설명을 보자

for loop 구문은 세 가지 중요 파트로 구분될 수 있겠다.
- 첫 번째, 'innitialization'이다. 
이를 조건이라고도 하고 연산 또는 업데이트라고도 한다
for loop은 조건이 'true'가 될 때 까지 계속 반복된다.

⁈ 이게 무슨말일까? 
i <= 10 이조건이 'true'여야 반복문 안에 코드가 실행된다.

int i = 0; 이 구문을 'innitialization'이라 부르는데
이것은 for loop가 최초 실행될 때 딱 한 번만 실행된다.
이 구문이 실행됨과 동시에 제어권이 i <= 10 로 간다

그리고 이후로 반복되는 것부터는 i++가 실행됩니다.
이것을 업데이트라고 부른다
두 번째를 비롯해 모든 반복 실행에서 i++가 실행되며 이때 조건이 확인된것이다.

‣ 처음 반복이 어떻게 이루어지는지 살펴보면
처음 'innitialization'(int i = 0;)이 실행되고 
조건( i <= 10;)이 확인되면 
두번째 반복부터는 업데이트(i++)가 실행되고
조건이 확인된다.
조건이 'true'값이라는 전제하에, 반복문은 실행된다.


jshell> for(int i = 0; i <= 10; i = i + 2){
   ...>     System.out.print(i + " ");
   ...> }
   //그렇다면 이것의 출력값은?
0 2 4 6 8 10


10까지 홀수만 출력하게 하고 싶다면 어떤 방법을 써야 할까?

jshell> for(int i = 1; i <= 10; i = i + 2){
   ...>     System.out.print(i + " ");
   ...> }
1 3 5 7 9
//'innitialization' 이부분을 1로 바꿔주면 된다.


예문 하나더

for(int i = 11; i <= 10; i = i + 2){
   ...>     System.out.print(i + " ");
   ...> }

 //그렇다면 이것은 실행 될까?
 //No 절대 실행되지 않을것이다.
 //왜냐하면 'innitialization' 이후 조건이 검토되기 때문이다
 //조건값이 false가 되고 포함되는 코드는 전혀 실행되지 않게된다.
 //‣ 안에 있는 코드가 실행되기 위한 전제조건은 조건문 값이 'true'여야 한다.
 //그런 경우에만 코드, 그리고 업데이트가 실행되니 다시 확인해 봐라




 for(int i = 11; i <= 20; ){
   ...>     System.out.print(i + " ");
   ...>     i++;
   ...> }
//그렇다면 이 for문은 실행이 될까?
   
11 12 13 14 15 16 17 18 19 20

//출력이 됐는대 
//문제는 업데이트 부분이 공란일 수 있다는 것이다.
//사실 코드에있는 'innitialization' , 조건 부분이 각각 없을수도 있다.
//즉 for loop에서 (int i = 11; i <= 20; ) 이부분들이 다 공란일수 있다는 얘기다
//가령 (int i = 11; i <= 20; )이부분에 ; 넣는것이 매우 중요해도 말이다

//좋은 예문이라 생각이 드는데 현업에서 절대 이런코드는 사용하지 말아라
//실용적이지 않다




for(; i <= 30; i++){
   ...>     System.out.print(i + " ");
   ...> }
//그렇다면 'innitialization' 없는 for문은 실행 될까?
20 21 22 23 24 25 26 27 28 29 30
된다

//이처럼 'innitialization'도 필수는 아니다. 업데이트부분 뿐 아니라 조건도 필수는 아니다.
