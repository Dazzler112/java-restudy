
지난 학습에선 Comparable 인터페이스를 구현하는 방법과 Collections.sort를 이용해 정렬하는 법을 배웠다
두 학생을 비교하는 알고리즘을 구현했고 그걸 이용해 학생들을 분류했다.

그리고 comapreTo메소드의 compare을 'that'을 먼저 그다음 'this'가 오게 하면 내림차순으로 id를 분류할 수 있었다
public int compareTo(Student that) { 
		return Integer.compare(that.id ,this.id);
	}

하지만 너는 질문 하나가 떠오를 수 있다
만약 상황에 따라 다르게 분류해야 하면?


-------------------------------------------------------



//학생들을 비교할 것이니 implements, 인터페이스, 비교자, 학생들을 구현할 것임
class AcendingStudentComparator implements Comparator<Student> {//컴파일에러 미구현 메소드를 구현해주자

	//비교자를 구현할 수 있다
	@Override
	public int compare(Student student1, Student student2) {
		return Integer.compare(student1.getId(), student2.getId());//id를 가져와서 비교해야 하니
	}
	//내림차순 비교자 준비 완료
	
}



StudentCollectionRunner클래스파일


package collectionsTraining;

import java.util.*;

public class StudentCollectionRunner {

	public static void main(String[] args) {
	
		List<Student> students= List.of(new Student(1, "Ranga"),
										new Student(100, "Adam"),
										new Student(2, "Eve"));

		ArrayList<Student> studentAl = new ArrayList<>(students);
    //여기서 할 일은 Student 클래스에 직접 구현하는 것이다, 난 Student클래스 안에 직접적으로 어떻게 학생들을 비교하고 Student클래스의 CompareTo메소드르 통해 직접 분류할 건지에 대한 논리를 구현한 것이다
		//예를 들어, 어떤 상황에선 오름차순으로 또 다른 상황에선 내림차순으로 정렬하려고 한다 이걸 어떻게 구현해야 할까? //좋은 질문이다 이번 학습에서 해답을 찾아보자
    //우리가 볼 수 있는 것들 중 하나는 Collections.sort 메소드였다
    /*
       @SuppressWarnings("unchecked")
    public static <T extends Comparable<? super T>> void sort(List<T> list) {
        list.sort(null);
    }
    여기엔 비교자라는 것을 구현을 받아들이는 오버로드된 메소드가 있다
    그래서 니가 정렬할 때는 비교자의 구현할때 비교자를 두번째로 보낼수 있다
    */
    //그래서 여기서 할 일은 비교자를 구현하는 것이다
    //또다른 클래스를 만드는 대신 위에 class를 만들어서 하자
    System.out.println(students);

    Collections.sort(studentAl);
		System.out.println("DESC" + studentAl); //이건 내림차순
		//내림차순으로 출력됨 //출력 ==> DESC[100 Adam, 2 Eve, 1 Ranga]

    Collections.sort(studentAl, new AcendingStudentComparator()); //새로운 인스턴스를 통과시킬 수 있다
		//그럼 어떻게 될까? 출력해보자
		System.out.println("AcendingStudentComparator" + studentAl);//이건 내림차순
		//오름차순으로 출력됨 //출력 ==> AcendingStudentComparator[1 Ranga, 2 Eve, 100 Adam]
		
		//기본형을 이용할때 아무 인수를 넣지 않았으면 이건 Student클래스 안에 있는 논리를 쓸 것이고..
		//이렇게 오름차순과 내림차순으로 출력된다
		
		//사실 Comparator 인터페이스를 여러번 구현할 수 있다,즉 , 이걸(AcendingStudentComparator 자체를) 복사해서
		//10가지의 다른 구현을 생성하고 10가지 다른 알고리즘을 통해 학생들을 분류할 수 있다
		//이름을 기준으로 정렬, id기준으로, 이름과 id의 결합으로 정렬이 가능하다 어떠한 결합도 구현해 낼 수 있고 그걸 기준으로 분류할 수 있다


    //이제 Comparator를 구현한 만큼 지난 시간에 본 것으로 되돌아가 보자
		//리스트 그 자체의 구현에 존재하는 분류 메서드가 있는 것을 보았다 그래서 ArrayList 안에는 비교자를 받아들이는 정렬구현이 있다
		//이제 이 비교자를 이용할 수 있다 새로운 DescendingStudentComparator 를 여기에다 사용할 수도 있다
		studentAl.sort(new AcendingStudentComparator());
		System.out.println("AcendingStudentComparator" + studentAl);

•  sort에 대한 선택지

    //한가지 선택지는 Collections.sort()이고 또다른 선택지는 직접sort()메서드를 호출해 이것 시행할 때 AcendingStudentComparator 넣는 방법이있다
		//출력은 예상대로임 //출력 ==> DescendingStudentComparator[1 Ranga, 2 Eve, 100 Adam]
	}

}

-------------------------------------------------------





/*
정리)
이 학습에서 우리가 한 것은 Comparator 클래스를 만들었다, 
Comparator클래스를 구현하는 것은 같은 학생에 여러 다른 알고리즘을 구현하는 것을 도와준다
즉,이 학생(Student클래스)을 대상으로, id든 이름이든 비교하고 싶은 건 뭐든, 
여러 알고리즘을 상황에 맞춰 사용하며 비교하고 분류할 수 있다
*/
