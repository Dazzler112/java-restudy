
이번 학습은 맵의 모든 구현을 이론적으로 보겠다 

• HashMap
우리가 처음 볼 구현은 HashMap이다
hashMap을 이루는 데이터 구조가 무엇일지 생각해보자
맞다, 바로 HashTable이다
그래서,HashMap 안에서는 분류되지 않고 순서도 없다
class HashMap implements Map {
  // unsorted, unordered
  // Key's hashcode() is used
}

• Hashtable
다음은 Hashtable이다 
HashMap과 Hashtable의 차임점을 무엇일까?
Hashtable 또한 해싱 기법을 데이터 구조에 사용한다 
즉, 연산과 관련해선 Hashtable과 HashMap 사이에서는 차이가 없다
하지만, Hashtable은 Vector와 비슷하다 동기화되어 있다, Hashtable의 모든 메소드는 동기화되어 있다
그래서 스레드가 해시맵에 비해 더 안전하고 해시맵처럼, 분류되어 있지도 순서가 있지도 않다
 ‣ Hashtable 과 HashMap 차이점
Hashtable과 HashMap 사이의 또 다른 주요 차이점은, (면접에서 많이 묻는 다는데 한국에선 글쎄..)
HashMap은 열쇠를 null값과 저장할 수 있게 해준다는 것이다 그래서, HashMap 안에는 열쇠와 null값을 저장할 수 있다
하지만, Hashtable에서는 그럴 수 없다.

class Hashtable implements Map {
  // Synchronized - Thread Safe - version of HashMap
  // unsorted , unordered
  // key's hashcode() is used
  // HashMap allows a key with null value. Hashtable doesn't
}


• LinkedHashMap
다음 맵의 구현은 LinkedHashMap이다
여기에 있는 LinkedHashSet과 비슷하게 삽입순서가 유지된다 
하지만 정렬되지 않아고 삽입 순서이기 때문에 이건 HashMap에 비해서 삽입과 제거가 조금 느리다
하지만 요소간 연결이 되어있어 요소를 도는 이터레이션은 훨씬 바르다
class LinkedHashMap implements Map {
  // insertion order is maintained (optionally can maintain ac well)
  // slower insertion and deletion
  // faster iteration
}


• TreeMap
맵 인터페이스 구현의 마지막 주요 부분은 TreeMap이다
평소대로, 트리를 보게 되면 기반 데이터 구조는 트리이고 그러므로 데이터는 정렬된 순서로 저장된다
그리고 평소대로, 트리가 존재할때는, 데이터가 정렬되어있기 때문에, 이 특정 인터페이스만이 아닌 다른 인터페이스도 구현한다
TreeSet의 경우 NavigableSet이었다 TreeMap은 NavigableMap이다
// A,C,B
// A,B,C
class TreeMap implements Map, NavigableMap {
  // sorted order is maintained
  // implements NavigableMap
}



/*
정리)
이번학습엔 Map에 존재하는 구현의 여러 형태를 살펴보았다
정렬되지 않고 순서없는 HashMap을 보았고 
또 HashMap과 같지만, 모든 메서드가 동기화되어 있어 스레드가 안전한 Hashtable도 보았다
삽입 순서를 기억하는 LinkedHashMap을 보았고, 데이터를 정렬된 순서로 저장하는 TreeMap도 보았다
그리고 Map인터페이스와 함께, HashMap은 NavigableMap인터페이스를 구현한다, 

다음 시간에는 모든 맵을 직접 다뤄볼 것이다.
*/
