한가지 중요한 사실은 부동소수 데이터 유형은 정확하지 않아서 재무계산에 황용하기는 힘들다.
이것에 대한 대안을 모색해보자

3.56789876 + 34.2234
$63 ==> 68.79129875999999
뜬금없이 '999999'가 뒤에 생겼다 왜이럴까?

부동소숫값이 표현하는 방식 때문이다
부동소수는 소숫점값을 명료하게 나타내지 않아서
결과의 정확성이 요구되는 것에는 부동소수 데이터유형을 계산에서는
float과 double을 사용하지 않는게 좋고

정확한 결과를 원하면 BigDecimal을 사용해보자

BigDecimal number1 =  new BigDecimal("34.56789876"); //왜 double은 안되고 string값은 되는지 나중에 알려줌

BigDecimal number2 =  new BigDecimal("34.2234");

number1.add(number2);
$66 ==> 68.79129876
결과가 훨씬 정교하다
여기서 중요한점은 자바에서 BigDecimal 클래스는 변경이 불가능하다는것이다.

BigDecimal number3 = number1.add(number2); 를 입력해도
number3 ==> 68.79129876  //nuber3의 값은 68.7인데 아까봤던 값과 같다

number1
number1 ==> 34.56789876
이처럼 BigDecimal객체는 한번 만든 이상 값을 바꿀 수 없으며
새 변수만 만들 수 있어서 이코드로 number3란 변수를 만들었다.
변수가 만들어진 이상 number1, number2, number3값은 고정인대
이런값을 '변경 불가능한 값'이라고 한다.
‣ 변경 불가능한 속성은 이후에 문자열과 래퍼클래스때 더 자세히 다뤄보자

BigDecimal number11 =  new BigDecimal(34.56789876);
number11 ==> 34.56789875999999850364474696107208728790283203125
이렇게 string을 사용 안하고 double로 사용하면 정확도가 떨어진다.
정확한 것을 원한다면 문자열을 사용해야 한다.
생성자에 double값을 전달하면 정확한 결과는 얻지 못한다.


⁂ 기억할 것은 변경 불가능한 클래스는 값을 딱 한번만 지정할 수 있다는것인대
클래스에 값을 한번 넣으면 변경 불가능 하다는것.

재무회계에서는 float이나 double형식 말고 BigDecimal을 활용하면 훨씬 정확하고
BigDecimal의 값을 하드 코딩할 때는 string을 사용하자.
