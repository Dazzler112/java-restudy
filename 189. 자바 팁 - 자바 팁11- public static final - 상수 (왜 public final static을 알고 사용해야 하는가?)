

이 학습에선 non-access modifiers의 올바른 사용에 대해 알아보도록 하겠다 
그리고 Java API의 내부를 살펴보도록 할 것이다

먼저 Integer class를 살펴보겠다 

public final class Integer extends Number
        implements Comparable<Integer>, Constable, ConstantDesc {
    /**
     * A constant holding the minimum value an {@code int} can
     * have, -2<sup>31</sup>.
     */
    @Native public static final int   MIN_VALUE = 0x80000000;

    /**
     * A constant holding the maximum value an {@code int} can
     * have, 2<sup>31</sup>-1.
     */
    @Native public static final int   MAX_VALUE = 0x7fffffff;

전에도 얘기했듯, wrapper class에 해당하므로 fianl에 포함된다
즉, 자바의 implementers는 Integer class를 확장하지 않기를 바란다
그래서 final로 만들어 준것이다

Integer class를 살펴보면, 몇몇의 값들은 public static final로 선언된 것을 확인할 수 있다, 맞지?
즉, static과 final의 조화가 되겠다, 그렇다면 static과 final을 함께 사용하면 어떤것이 유용할까?

static이라는 것은 이게 class level의 변수임을 뜻한다
그리고 final이라는 것은 이 값이 변할 수 없음을 의미한다 왜 이러한 작업을 하고 있는걸까?
변함없는 값을 갖게 되었을 경우에 해당한다 이러한 상황에서는 public static final을 사용한다 그러므로 MIN_VALUE의 가치는 변하지 않을 것이다
Integer.MIN_VALUE도 같은 것을 갖게 되겠지 하지만 프로그램에 있어서는 이와 같은 종류의 일이 일어나서는 안된다 
그리하여 여기 작은 프로그램이 존재한다고 해보겠다

지난 학습에 사용한 클래스를 사용해 보도록 하겠다

------------------------------------------------------------------------------------------------------


🟢 TimeUnit 클래스파일


package tipAndTricks;

public class TimeUnit {
	
	//2-1 : 가장 먼저 SECONDS_IN_MUNUTE = 60; 이라 적어주고 두번째로 public static final int MINUTES_IN_HOUR = 60;이라고 적어주겠다
	//왜 이런식으로 적어주는 걸까? 다시 복사해 와서 HOURS_IN_DAY = 24 라고 적어주고 SECOND_IN_DAY = 은 이 모든 숫자들의 곱이된다
	//즉, 정의한 변수들을 모두 가져와서 SECONDS_IN_MUNUTE * MINUTES_IN_HOUR * HOURS_IN_DAY 까지 곱해주면 된다
	//사실 이것을 보면 복잡하고 할 일이 많아 보인다 여기서 헷갈릴 만한 지점들이 참 많다 
	//하지만 real world 응용프로그램들을 살펴보면, 이게 오히려 더 편리하게 사용될 때도 있다 
	public static final int SECONDS_IN_MUNUTE = 60;
	public static final int MINUTES_IN_HOUR = 60;
	public static final int HOURS_IN_DAY = 24;
	public static final int SECOND_IN_DAY 
			= SECONDS_IN_MUNUTE * MINUTES_IN_HOUR * HOURS_IN_DAY;
	
	
	public static void main(String[] args) {
		//1: 이 부분에 정수의 최대값을 출력해 주려고 한다//이 값을 hardcode하는 방법을 선택할 수 있다 맞지?
		//여기서 '이 값을 hard coding을 시도해보자'라고 생각했을 수도 있다 여기서 이 값은 무엇일까? 0x로 시작하는 이게 해당하고,( public static final int   MIN_VALUE = 0x80000000; )이 코드를 실행하는 것도 가능하다
		//값이 출력되었고, 여기서 나머지는 이것 때문에 생긴 것들이다
//		System.out.print(0x80000000);
		
		/*출력결과 ==>
		-2147483648
		이 코드를 실행하여 나온 이 값이 최소값이고, 이는 Integer안에 저장될 것이다
		*/
		
		//2: 누군가는 이 프로그램에 대해 잘 이해하지 못할것이다 '이게 왜 여기 쓰였을까?', '왜 여기 이렇게 사용된 것일까?' Integer.MIN_VALUE라고 적어주면, 이해하기 매우 쉬워진다
		//전에도 이 프로그램을 진행했었다,맞지?하루가 몇초로 이루어져 있는지 알아보는 프로그램을 실행했었지? 맞다
//		System.out.print(Integer.MIN_VALUE);
		
		//처음에 60초가 1분이라는 것에서 시작해 60*60을 해주었다 그다음 60분이 1시간, 하루는 24시간이니 *24를 전체식에 곱해주겠다 이게 우리가 전에 사용한 방법이다
		//그러므로 이걸 출력할 때, 이 윗줄을 주석처리하고 사람들은 답이 86400이라는 사실을 쉽게 눈치 챘을 것이다
//		System.out.println(60 * 60 * 24);
		/* 출력결과 ==>
		86400
		60이 의미하는 것이 뭔가? 또 24는 무엇을 의미할까? 이 프로그램을 그냥 읽어내려가는 사람은 이게 무슨 의미인지 전혀 파악하지 못할 것이다
		*/
		//그래서 이런 상황에서 우린 public static final int를 가져와서 //2-1: 메인메소드 위로 작성.. 
		
		System.out.println(SECOND_IN_DAY);
		/*2-1 작성후 출력결과 ==>
		86400
		보다시피 같은 결과가 출력되었다
		하지만 이 프로그램을 마주친 사람들은 아마 이 프로그램이 어떤 일을 하는지 정확히 파악이 가능할 것이다
		덧붙이자면, SECONDS_IN_MUNUTE은60이고, MINUTES_IN_HOUR도 60, 마지막 HOURS_IN_DAY은 24이므로 
		SECOND_IN_DAY은 SECONDS_IN_MUNUTE, MINUTES_IN_HOUR, HOURS_IN_DAY 까지 곱한 값이 된다
		이것은 하려는 작업을 좀 더 분명하고 쉽게 전달한다 public static final을 사용해서 말이다 
		*/
		
	}
}


------------------------------------------------------------------------------------------------------






/*
정리)
public static final에 대해 정말 엄청난 것 중 하나는, 
이 클래스에서만 그치는 것이 아니라 이 변수를 public으로 만들었다는데 있다
public static final int SECONDS_IN_MUNUTE = 60; 등등 이건 너의 application속 클래스에 언제든 사용될 수 있다
즉 SECONDS_IN_MUNUTE를 어디서든 사용할 수 있다는 것이다 

이는 다른곳에도 얼마든지 사용이 가능하다
보다시피 public static final은 너가 선택한 것들 중 가장 흔한 것들 중 하나이다
그리하여 public static final에 대해 MIN_VALUE, MAX_VALUE 그리고 Array까지 볼 수 있다
즉, 이것은 public으로 만들어진 것이 아닌데, 이유는 자바가 패키지 밖에서 접근 되지 않기를 바라기 때문이다 
즉, 0부터 9와 a부터 z의 숫자와 알파벳으로 행열을 이렇게 샹성했다
Collection class에 대해 살펴보면 마찬가지로 public static final로 선언된 것들이 매우 많다

이것들이 무엇인지를 이해하는 것은 그다지 중요한 일은 아니지만 
multiple API 까지 보았을 때, public static final은 매우 흔한 것이 될것이다 
그리고 이를 이해하기 쉽도록 하는 방법 중 하나는 public static final을 이용해 constants를 생성하는 것이다
*/
