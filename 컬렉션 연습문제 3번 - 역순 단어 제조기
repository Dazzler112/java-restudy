
코딩 예제 – 역순 단어 제조기

이번 예제에서 여러분은 제공된 StringMagic 클래스 안에 reverseWordsInSentence라는 이름의 Java 메서드를 작성해야 합니다.

이 메서드는 문자열 문장을 입력으로 받아서 문장 안의 모든 단어가 역순으로 변경되지만 
원래의 단어 순서는 유지되는 문자열을 리턴해야 합니다.


• 엣지 케이스:
1.입력된 문자열이 null이면 여러분의 메서드는 문자열 "INVALID"를 리턴해야 합니다.
2.입력된 문자열이 비어 있으면(즉, ""이면) 여러분의 메서드는 빈 문자열을 리턴해야 합니다.

• 입력 형식
문장으로 된 하나의 문자열.


• 출력 형식
문장의 모든 단어가 역순으로 되어 있으나 원래의 단어 순서는 유지하고 있는 문자열.

• 예시

그럼 몇 가지 예를 볼까요?

1. 예 1
입력:
StringMagic sm = new StringMagic();
sm.reverseWordsInSentence("Hello World");
리턴 값:
"olleH dlroW"

2. 예 2
입력:
StringMagic sm = new StringMagic();
sm.reverseWordsInSentence("");
리턴 값:
""

3. 예 3
입력:
StringMagic sm = new StringMagic();
sm.reverseWordsInSentence(null);
리턴 값:
"INVALID"

• 참고사항

해답에서 우리는 Java 표준 라이브러리에 있는 메서드와 클래스를 몇 개 사용했습니다. 그럼 간단히 알아볼까요?
-string.split(String regex): 이 메서드는 주어진 정규 표현식에 따라 문자열을 분할합니다.
-stringBuilder: 문자열 조작 작업을 할 때는 StringBuilder를 쓰는 것이 String을 쓰는 것보다 더 효율적입니다.
-stringBuilder.reverse(): 이 메서드는 StringBuilder안의 문자 순서를 역순으로 바꿉니다.
-stringBuilder.append(String str): 이 메서드는 지정된 문자열을 시퀀스에 추가합니다.
-string.trim(): 이 메서드는 앞과 뒤의 공백을 생략한 문자열 사본을 리턴합니다.

그럼 행운을 빕니다!


해당은 기본 코드 뼈대입니다


public class StringMagic {

    public String reverseWordsInSentence(String sentence) {
        // TODO: Check if the sentence is null.
        // If the sentence is null, return "INVALID"

        // TODO: Check if the sentence is empty.
        // If the sentence is empty, return an empty string

        // TODO: Split the sentence into words using the split method. 
        // Use " " as the delimiter to match space.

        // TODO: Create a StringBuilder to hold the reversed sentence.

        // TODO: Loop through each word in the words array.

            // TODO: For each word, create a StringBuilder and reverse the word.
            // Append the reversed word, followed by a space, to the reversed sentence.

        // TODO: After reversing all the words, trim the trailing space and return the reversed sentence.
    }
}


해당 코드를 이용하여 지시사항을 완성하시오.













---------------------------------------------------------------------------------------------














힌트)














힌트 1: 먼저 엣지 케이스, 즉 입력된 문장이 null이거나 빈 문자열인 경우를 검사합니다.
힌트 2: split메서드를 사용하여 문장을 개별 단어로 분할합니다.
힌트 3: 각 단어에 대해 새로운 StringBuilder를 만들고 reverse 메서드를 사용하여 단어의 문자들을 역순으로 바꿉니다.
힌트 4: 역순으로 된 각 단어와 공백을 최종 문장이 담긴 StringBuilder에 추가합니다.
힌트 5: 마지막 부분에 여분의 공백이 하나 있을 것입니다. trim메서드를 써서 제거합니다.
힌트 6: StringBuilder의 toString메서드를 사용하여, 역순 문장을 문자열로서 리턴합니다.
힌트 7: 문제의 요구사항과 예시에 특히 유의하여 여러분의 해답이 지정된 모든 조건과 엣지 케이스를 충족하도록 합니다.

---------------------------------------------------------------------------------------------

















---------------------------------------------------------------------------------------------















해답)

















public class StringMagic {

    public String reverseWordsInSentence(String sentence) {
          //먼저 기초적인 것부터 시작하자(에지케이스)
          if(sentence == null) {
              return "INVALID";
          }
          if(sentence.equals("")) {
              return "";
          }
          StringBuilder reversedSentence = new StringBuilder(); //StringBuilder 인스턴스를 할당하고//이제 단어를 뒤집어야한다

          for(String word : sentence.split(" ")) {//구분자로 공백을 허용 //다음으로 문장에 있는 단어들을 반복문을 돌게 만든다 //StringBuilder도 필요하다
              //단어를 뒤집으려면 문자열 타입의 reversedWord를 해주고 메소드를 호출
              StringBuilder reversedWord = new StringBuilder(word).reverse(); //word를 가지고 reverse를 호출 
              
              //다음 해야하는건 reversedSentence.append를 호출하는것이다
              reversedSentence.append(reversedWord).append(" "); //단어 끝에 공백을 추가해 준다
              /*
                어떻게 작동하냐면 주어진 값이 Hello World라면 먼저 Hello를 가지고 작업한다   
                이걸 뒤집으면 olleH가 되겠지? 그리고 끝에 공백을 추가한다
                그다음은 그다음 단어를 작업한다 World를 뒤집으면 dlroW가 되고 끝에 또 공백을 붙여준다
                그래서 끝에 공백이 하나 더 생기는데 나중에 처리하기로 하자
                
                이렇게 뒤집힌 단어들을 만들었다 StringBuilder를 만들었고 words배열 안에 있는 모든 문자를 확인한다. 
                대상 단어를 뒤집고 공백을 추가해 준다 이렇게 로직 구현은 완료됐다
                그리고 반환할 차례이다
              */
          }
            return reversedSentence.toString().trim(); //문제는 끝에 공백이 하나 더 붙어있다는 것이다 그것을 제거하기 위헤 trim을 호출한다
    }
}

---------------------------------------------------------------------------------------------





/*
정리)
보다시피 로직은 간단하다 
sentence값이 null이면 INVALID를 반환하고 
sentence값이 빈 문자열이면 그대로 빈 문자열을 반환한다
StringBuilder를 만들었고 문자열을 자르고 문장 전체를 여러 단어로 자르고 
각 단어의 문자 순서를 뒤집고 뒤집은 결과를 reversedSentence에 붙이고 단어를 구분하기 위해 공백을 추가했다
그래서 마지막엔 끝에 공백이 하나 더 추가가 된다
그걸 제거하기 위해 trim 메소드를 이용한다 
*/
