

이번 학습에선 enum(열거형)이라는 자바의 중요 개념을 살펴보겠다 
Enum은 Enumeration(열거)의 준말이다
이게 무엇인지 알아보자

그럼 왜 열거형이 필요할까? 상황을 보자


--------------------------------------------------------------------------------------------------------------------


🟢 EnumRunner 클래스파일



package tipAndTricks.enums;

import java.util.*;

//2: 열거형은 아주 쉽게 생성할 수 있다 enum 을 입력하고 보면 class와 아주 비슷하다 class 대신 enum을 적고, Season으로 하겠다 ㅇㅋ?
//Season 안에 입력할 계절을 정해줄 것이다 겨울부터 적겠다 겨울, 봄, 여름 ,가을 ㅇㅋ
//이제 모든 계절을 다 정의했다 //2-1: 다시 메인메소드로...
enum Season {
	WINTER, SPRING, SUMMER, FALL;
	//0, 1, 2, 3
}

public class EnumRunner {

	//3: 원한다면 얼마든 여기에 Season season을 인스턴스 변수로 만들 수 있다 클래스로 유형을 정의하려면 열거형을 사용하여 정의할 수 있다
//	Season season;
	//너무 쉽다고 느낄것 같은데 물론 이게 다가 아니다 열거형에는 많은 유틸리티 메서드가 있다
	//계절을 생성하는 방법을 하나 살펴봤다 계절을 만드는 또 다른 방법을 보겠다 //4:다시 메인메소드로..
	
	public static void main(String[] args) {
		//1: 일반적으로 계절을 보여주려면 String season = "Summer"나 대신 Winter, Fall등을 입력할 수 있다
		//하지만 문제는 문자열을 쓴다면 제한이 안 된다 누군가 'Garbage'라고 저장할 수도 있는 것이다
		//어떻게 하면 특정 값들에 제한을 둘 수 있을까? 여기서 열거형이 등장한다 //2: 클래스 위에 생성...
//		String season = "Garbage";
		
		//2-1: 그런데 사실 'season ='라고 하면, 받아들여지지 않을 것이다 예를들어 Garbage라고 되어있는데, 보다시피 유효한 값이 아니라고 한다
		//Type mismatch: cannot convert from String to Season 유요한 값이 아니라고 한다 
		//유요한 값으로는 Season.WINTER나 SUMMER 혹은 Fall 정도만 할 수 있다 이렇게 열거형으로 허용되는 것이다 
		//그 외에도 열거형은 메서드에 전달할 수 있고, 인스턴스 변수에 저장할 수도 있다//3: 메인메소드위로...
//		Season season = "Garbage";
//		Season season = Season.FALL;
		
		
		//4: Season season1로 넣고 열거형을 위해 Season.value를 입력하고 문자열 값을 전달하면 된다 "WINTER"(Winter로 할 경우 열거가 없다고 나온다)로 한번 해보자 그리고 syso로출력해보자
		Season season1 = Season.valueOf("WINTER");
		System.out.println(season1);
		/*출력결과 ==>
		WINTER
		그래서 문자열에서 값을 가져오려면 enum Season 여기에 있는 문자열 값과 정확히 일치해야 한다 Enum 안에 Winter라고 쓰면, 아래에도 Winter를 사용할 수 있는 것이다
		*/
		
		//다른 유틸리티 메서드도 있었다 season1은 겨울로 정했고 다른 메서드들도 많이 보이지만 name()을 입력해보자
		System.out.println(season1.name());
		/* 출력결과 ==>
		WINTER
		WINTER
		그럼 "WINTER"를 출력한다 syso과 똑같다
		*/
		
		//이 외에 ordinal 메서드를 출력할 수도 있다 열거형에서 모든 값의 순서가 ordinal이다 
		System.out.println(season1.ordinal());
		/*출력결과 ==>
		0
		0이라는 값을 출력했다
		WINTER, SPRING, SUMMER, FALL; 이 값은 순서로 정해진다 기본적으로는 0부터 1, 2, 3으로 이어지겠지
		*/
		
		//그럼 봄의 ordinal을 예를들어 'Season.Spring.ordinal을 입력하면'?
		System.out.println(Season.SPRING.ordinal());
		/* 출력결과 ==>
		1
		1이다
		봄의 자리를 4번째로 바꾸면? ordinal은 3이 된다 
		*/
		
		/*● enum(열거형)으로 DB구성을 해야할까? :
		데이터베이스에 열거형 저장법은 꾸준히 논의됐다 
		열거형을 데이터베이스에 저장할 때 ordinal을 사용할 수 있을까?
		사실 이건 별로 좋은 방법이 아니다 ordinal을 사용해 저장하면 위치가 바뀔 때 값이 바뀌어 버리기 때문이다
		즉, 데이터베이스의 이전 순서로 저장한 모든 값이 변경되어버리는 것이다
		그래서 별로 좋은 방법이 아니라고 한 것이다
		
		다음 학습에선 어떻게 값을 저장하고, 열거형에 값을 할당하는 법에 대해 다뤄보겠다
		*/
		
		//중요한 건 열거형 안에 값의 위치가 ordinal이라는 것이다 0으로 시작해서 n-1로 끝난다
		
		//열거형에 또 다른 메서드는 Season.values()가 있다 모든 값의 리스트를 얻을 수 있다 이는 배열로 표시될 것이다
		//출력하면 존재하는 모든 값을 배열로 볼 수 있다
		System.out.println(Arrays.toString(Season.values())); 
		/*출력결과 ==>
		[LtipAndTricks.enums.Season;@7c30a502
		배열을 출력하고 있다 이제 배열에 Arrays.toString을 적용해보자
		*/
		/*Arrays.toString 추가후 출력결과 ==>
		[WINTER, SPRING, SUMMER, FALL]
		그러면 WINTER, SPRING, SUMMER, FALL 출력이 된다
		이처럼 Season.values는 열거형에 존재하는 모든 값을 가져온다
		*/
	}
}

--------------------------------------------------------------------------------------------------------------------





/*정리)
이번 학습에서 열거형에 관한 여러 가지 팁을 알려드렸다
열거형은 제한된 세트에 구현된 값의 종류를 제한하는 데 사용된다
또한 ordinal이라는 속성이 있는데, 이는 자동으로 열거형에서의 위치를 기반으로 할당되며
값을 사용하여 열거형의 모든 값을 반복할 수도 있다
또한 문자열을 사용한 valueOf 메서드도 배웠다 
Season season1 = Season.valueOf("WINTER"); 여기 문자열은 열거형과 정확히 매치해야 한다는 것을 주의 깊게 다뤄보았다
*/
