
배열하나를 생성해주자
jshell> int [] marks = {100, 99, 95, 96, 100};
marks ==> int[5] { 100, 99, 95, 96, 100 }
//이 배열에 있는 모든 값을 반복문을 이용해 출력하고자 함

어떻게 배열에 반복문을 적용할 수 있을까?
for문 사용
jshell> for(int mark : marks){
   ...>     System.out.println(mark);
   ...> }
100
99
95
96
100
//배열 안에 있는 모든 마크가 출력 //향상된 for loop로 입력이 매우 간단함 //enhanced for loop는 자바 5에 처음소개되었음
enhanced for loop가 업던시절
jshell> for (int i = 0; i <marks.length; i++){
   ...>     System.out.println(marks[i]);
   ...> }
100
99
95
96
100
// 향상된 for loop에선 복잡한 내용이 필요 없게 됐다.

marks배열을 생성해보자
jshell> int[] marks = new int[5];
marks ==> int[5] { 0, 0, 0, 0, 0 }  //초기값은 역시 0이다
//그렇다면 이 모든 값의 디폴트가 100으로 설정하려면 어떻게 해야 할까?
그럴 경우 배열 클래스에 존재하는 또 다른 스태틱 메소드를 사용하는 것이다

jshell> Arrays.fill(marks,100) //입력
//이 방법은 0의 값으 다른 것으로 바꾸고 싶을 때 굉장히 유용하다

jshell> marks
marks ==> int[5] { 100, 100, 100, 100, 100 }
//초기값은 0이지만 시작값으로 0을 사용하고 싶지 않을 때 100을 시작 값으로 설정할 수 있다.

그럴경우 Arrays.fill(marks,100) 입력
//좋은 점은 여기서도 마크 안에 얼마나 많은 요소가 있는지 명시할 필요가 없다.
//그래서 이 메소드가 입력하는 구문의 의미는, 포함된 값을 100으로 바꾸라는 뜻이다.


다음 배열 비교에 대해 알아보자

일반적으로 배열을 생성할 때, 예를 들어 배열 1이 1,2,3값을 가질 때 
jshell> int[] array = {1,2,3}
array ==> int[3] { 1, 2, 3 }
여기서 또다른 배열이 있다고 해보자
jshell> int[] array2 = {1,2,3};
array2 ==> int[3] { 1, 2, 3 }
그럼 이제 이 두배열이 같은 요소를 가지는지 알아보려고 한다. 어떻게 하면 될까?

간단하게 사용할 수 있는 equal스태틱 메소드가 있다.
jshell> Arrays.equals(array,array2)
$11 ==> true
배열 3을 만들어 보겠다 기존 배열과 값을 하나만 다르게 설정할 것이다, 이상태로 비교를 해보면 어떨까?
jshell> int[] array3 = {3,2,3};
array3 ==> int[3] { 3, 2, 3 }
jshell> Arrays.equals(array,array3)
$13 ==> false

equals 메소드는 이 배열들의 길이가 다를때 false를 출력한다 만약 array가 3개 요소를 가지고 array2가 2개를 가진다면
false가 출력되고, 만약 여기 있는 요소 중 매칭되는 요소가 아예 없는 경우에도 false가 출력된다.

//Arrays.equals는 배열의 길이가 같거나 요소가 서로 매칭이 될때 true값을 출력한다

마지막으로 다룰 건 배열을 어떻게 정렬하는지 이다.
jshell> int[] array3 = {3,2,3}; //array3은 요소값이 3,2,3인데 정렬하려면
array3 ==> int[3] { 3, 2, 3 }
어떻게 해야하냐?
jshell> Arrays.sort(array3)

jshell> array3
array3 ==>
/*
정리
배열의 기본에 대해 좀더 알아봤다.
먼저 향상된 for loop를 살펴봤고 그다음
Array.fill메소드를 통해 다른값으로 바꿔 보았고
배열을 어떻게 비교하고 어떻게 정렬하는지 알아보았다.
*/
