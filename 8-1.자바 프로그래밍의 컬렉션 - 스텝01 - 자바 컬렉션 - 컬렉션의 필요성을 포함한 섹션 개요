
이질문으로 먼저 시작하겠다 우리는 왜 집합이 필요 할까?
이 단계에서 이에 대해 알아보자, 이전 부분에선 배열에 대해 이야기해 봤다
배열이 고정된 길이를 갖는다는 것에 대해 이야기했지?
특정한 길이의 배열을 만들고 나면 이 배열의 길이를 바꿀 수가 없다.

여기 우리는 15개의 요소를 갖고 있는 배열이 있다 인덱스가 0 부터 14이다
그리고, 새로운 요소를 추가하고 싶다고 해보자 100을 인덱스 2에 말이다,
인덱스2 이위치에 100이 입력되길 원한다 
그러면 새 코드를 엄청 많이 짜야 되겠지?
16개의 요소를 가지는 배열을 만들기 위해 코드를 짜겠지?
그 다음, 첫 두개의 요소들을 복사한후 새로운 요소인 100을 입력해야겠지
그리고 그다음 나머지 요소들을 복사해 옮겨야겠지, 이건 엄청난 양의 작업이다.
그리고 ArrayList는 너 대신 이것을 해준다
                                   Array
| 123 | 140 | 20 | 50 | 70 | 80 | 100 | 180 | 25 | 1 | 8 | 10 | 12 | 23 | 10 |
   0     1    2    3    4    5     6     7    8    9   10  11   12   13   14

ArrayList는 배열과 비슷한 집합이다
데이터 구조엔 여러가지 다른 종류들이 있다 어떻게 정보를 저장할건지를
:LinkedList, Hashtable, Tree.

자바가 너에게 묻는 질문은, 과연 너는 낮은 단계의 데이터 구조에 신경을 쓰고싶은지 
비즈니스 논리에 신경을 쓰고싶은지이다
그리고, 자바는 이것에 대한 해답을 제시한다 자바는 기본적으로 포함하고 있는 집합들을 제공한다.



        Collections
           •List
           •Set
           •Queue
           •Map
자바가 제공하는 중요한 집합 인터에이스 중에는 
List, Set, Queue, 그리고 Map이 있다.
이런 집합들을 이용해 여러가지 문제점들을 해결할 수 있다


다음 학습엔 이 집합들들 하나하나 배우게 될건데
어떤 종류들이 있고 그 안에는 어떤것들이 있는지
그리고 각 문제마다 어떤 집합이 맞는지를 배우게 될 것이다.

/*
정리)
이 학습에는, 우리가 왜 집합이 필요한지에 대해 알아보았다
배경에 있는 데이터 구조는 매우 복잡하다
단순히 간단한 것 하나를 배열에 삽입하는것이나 지우는 것은 매우 많은 코드작업을 요하고
다른 데이터 구조, 예를들어 Tree와 LinkedList는 더욱 더 복잡하다
자바는 이런 데이터 구조들의 구현을 집합이란 이름으로 제공하므로 
너는 중요한 논리들에 집중할 수 있고 그 밑에 어떤 일이 벌어지는지 신경쓸 필요가 없게끔 하는 것이다.

우리가 해야할 것은 이 집합들과 그 밑에 깔린 데이터 구조들을 잘 이해하는 것이다

그리고 언제가 집합을 쓸만한 적정 시기인지도 말이다 우리는 다음 학습에 이런 질문들에 집중해 볼 것이다.
*/
