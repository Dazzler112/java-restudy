
기본적으로 우리가 하고자 하는 건, 메소드를 정의하는 것이다.
가령 합에 대한 코드를 생성한다고 할때
i+j 
등을 입력하겠다.

jshell> int sum(int i, int j) {
   ...>     return i + j;
   ...> }
|  created method sum(int,int)

jshell> sum(1,2); //1과 2의 합은 3이 나오겠지?
$2 ==> 3

jshell> sum(1,2,3) //3까지 하면 어떻게 될까?

jshell> sum(1,2,3)
|  Error:
|  method sum in class  cannot be applied to given types;
|    required: int,int
|    found:    int,int,int
|    reason: actual and formal argument lists differ in length
|  sum(1,2,3)
|  ^-^
안된다 2가지 변수만 가질 수 있다고 나옴

이것이 되게 하려면 새로운 더하기 메소드를 int를 사용해서 입력해야한다.
jshell> int sum(int i, int j, int k) {
   ...>     return i + j + k;
   ...> }
|  created method sum(int,int,int)
//완전히 새로운 메소드를 만들어야 한다.

그렇지 않으려면 어떻게 해야할까?
완전하게 새로운 메소드를 사용하지 않으면서 여전히 이런 것들을 사용할까?

//이럴 때 가변 인술르 생각하면 된다.
다양한 변수 값을 출력하는 게 아니기 때문에 우선 유요하지 않은 상태로 만들것이다, 이메소드를 print라고 명명하겠다.
입력된 모든 print값이 출력됐으면 좋겠고 우선 print 1,2; 1,2; 1,2,3; 등 과 모든 인수에 대해 구하고 싶다 이렇게 할 수 있는 방법은
void print이다 그리고 arguments는 일반적으로 int i 를 사용한다 다양한 숫자의 argument를 입력하고 싶은경우?
jshell> void print(int... values) { //인자(argument 부분에 ... 세 개의 점을 입력하면 된다) 값이 하나 보다 많으므로 values라고 하겠다. (인자명 짓는건 중요한건 아님)// 여기 넣는 모든 입력값이 리스트가 된다 (이 값은 배열에 들어갈 것임, 몇 가지 수를 가지는 배열이 될것임)
   ...>     System.out.println(Arrays.toString(values)); //배열 출력하는 방식을 사용 (toString)
   ...> } //간단하다 여러 개의 argument값을 내는 거기 때문에 '...'을 입력해줬다
|  created method print(int...)

//이제 1개 2개 3개의 요소를 가지는 배열을 적어보자
jshell> print(1);
[1]

jshell> print(1,2);
[1, 2]

jshell> print(1,2,3);
[1, 2, 3]

print메소드와 비슷한 간단한 메소드를 생성할 수 있다.
더하기로 바꿀 수 있다.

jshell> int sum(int... values) {
   ...>     int sum = 0;
   ...>     for (int value : values) {
   ...>         sum += value;
   ...>     }
   ...>    return sum;
   ...> }
|  created method sum(int...)

jshell> sum(1,2);
$9 ==> 3

jshell> sum(1,2,3,4);
$10 ==> 10

jshell> sum(1,2,3,4,5,6);
$11 ==> 21

//이게 바로 가변 인수의 기능이다 가변인수를 활용해 간단한 메소드를 만들어 보았다.

/*
정리)
'...'을 입력하고 코드 안에서 배열과 같은 내용을
정의할 수 있었다.
자바 1에있는 유용한 기능중 하나이다.
*/
