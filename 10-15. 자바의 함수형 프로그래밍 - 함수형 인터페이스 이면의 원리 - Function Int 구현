
지난 학습들에는 filter와 forEach를 사용할 때 모니터 뒤에서 어떤일이 일어나고 있는지에 대해 살펴봤다
이번에는 map 메소드를 사용할 때 어떤 일이 일어나는지 알아보도록 할 것이다



--------------------------------------------------------------------------------------------------


LambdaBehindTheScreensRunner 클래스 파일




package funtionalProgramming;

import java.util.*;
import java.util.function.*;


class EvenNumberPredicate implements Predicate<Integer>{

	@Override
	public boolean test(Integer number) {	
		return number %2 == 0;
	}
	
}


class SystemOutConsumer implements Consumer<Integer> {
	@Override
	public void accept(Integer number) {
		System.out.println(number);
	}
	
}




class NumberSquareMapper implements Function<Integer, Integer>{//여기서 실행하고자 하는게 뭔가? 여긴 함수형 인터페이스를 실행해 주어야 한다 그러므로 Function<>라고 적어줄 것이다
	//ㄴ> 여기서 입력값의 자료 형태는 무엇인가? 정수형이다/ 출력값의 자료형태튼 무엇인가? 이또한 정수형인데 더블링을 진행하는 것이기 때문이다
	//이제 클래스명에 ctrl + 1 을 누르고 미입력 메소드를 추가하자
	
	@Override
	public Integer apply(Integer number) {//그리고 이 부분을 보면 함수형 인터페이스에서 본 apply메소드가 얻어진 것을 알 수 있다
		// 여기를 실행해 보겠다 return에 보내고자 하는 값은 number * number 이다
		return number * number;
		
		//이제 NumberSquareMapper를 적어줄 수 있다 다시 아래로....
	}
											
}


public class LambdaBehindTheScreensRunner {
	
	
	
	public static void main(String[] args) {	
		
		List.of(23, 43, 34, 45, 36, 48).stream()
		.filter(n -> n % 2 == 0)
		.map(n -> n * n)//여기서 모든 짝수를 매핑해서 그 제곱의 값들을 출력하고자 한다고 해보자 //매핑의 한 종류이다 map()함수 안에 n * n을 적어주도록 하겠다
		.forEach(e -> System.out.println(e));
		//이제 이 매핑 함수 뒤에서 어떤 일이 실제로 벌어질까?
		
		List.of(23, 43, 34, 45, 36, 48).stream()
		.filter(new EvenNumberPredicate())
		.map(new NumberSquareMapper())//위에 적은 것 처럼 .map(n -> n * n)이라 적은 후 실행하면 그 결과가 무엇일지 확인해 보자 //NumberSquareMapper()를 적은후 실행해보자
		.forEach(new SystemOutConsumer());
		/*출력==>
		  1156
     	  1296
		  2304
		  1156
		  1296
		  2304
		 */
		//훨씬 큰 숫자들이 출력 되었다 이 결과값들이 위에서 요구한 조건대로 적용한 결과이다
		//이제 map()함수 뒤에서 어떤일이 벌어진 것인지 알아보자, 무슨일이 일어난걸까?
		//항상 그랬던 것 철머 선언문을 열어보도록 하겠다 map()을 ctrl+클릭!
		/*
		<R> Stream<R> map(Function<? super T, ? extends R> mapper);
		map 실제로 화면 뒤에는 map인터페이스가 존재한다
		그래서 우리가 가지고 있는 것은 무엇일까? map 인터페이스를 가지고 있다
		그리고 map 인터페이스에서 함수인 Function을 허용하고 있다
		Function을 ctrl+클릭 해서 들어가주면
		
		@FunctionalInterface
		public interface Function<T, R> {

    		R apply(T t);
    		
    	여기에 현존하는 함수형 인터페이스가 무엇인지 알 수 있다
    	
    	이게 함수형 인터페이스이다 맞지? 그러므로 한 번 살펴보도록 하겠다 
    	여기 (Function<? super T, ? extends R> mapper) 이부분에 Function이라고 불리는 인터페이스를 사용하고 있다는 것을 확인할 수 있다
    	그렇다면 함수형 인터페이스는 정확히 무슨 일을 할까? 어떤 값을 넣어주면, 다른 값을 반환해 준다
    	또한, 여기 map을 보면 스트림을 반환해주었음을 확인할 수 있다 (<R> Stream<R>)
    	그리고 여기 함수에선 한 객체를 입력값으로 받고 ( super T ),
    	다른 객체를 출력값으로 내보낸다 ( R apply(T t); )
    	
    	❗ 즉, 여기서 하는 것들을 정리하면, apply메소드에 대한 정의를 생성하고 있는 것이다 ❗
    	다시 말해 여기서( .map(n -> n * n) ) 입력값은 n이고, 출력값은 n* n 이 되는 것이다
    	그럼 이 스트림에 대한 실행을 진행해 보도록 하겠다 //메인메소드 위로...
		*/
		
		//map에 NumberSquareMapper를 생성해주고 코드를 실행하니 같은 결과가 나왔다 맞지?
		//여기서 중요하게 가져가야 할 것은 람다식을 사용해 코드를 작성했을 때 어떤 일이 화면 뒤에서 벌어지고 있는지에 대해이다
		//화면 뒤에선 함수형 인터페이스를 실행하기 위한 생성이 일어나고 있고 ( .filter(n -> n % 2 == 0) ),
		//그 실행에 대한 사례도 생성되고 있다 이게 filter메소드에서 입력되는 값이고
		//map 함수와( .map(n -> n * n) ) forEach에서( .forEach(e -> System.out.println(e)); ) 입력되는 값이다
	}
}





/*
정리)
여기서 우리는 가장 중요한 세 가지 함수형 인터페이스에 대해 알아보았다
Function은 함수형 인터페이스 중 하나로, 
입력값을 얻고 어떤 값을 출력해내는 인터페이스를 뜻한다
함수와 같이 작동하는 것이다, 이해 했니?
통상적으로 함수는 어떤 값을 입력하면 출력값을 내놓는다
Predicate는 입력값을 보고 참인지 거짓인지를 판단한다 ( Stream<T> filter(Predicate<? super T> predicate); )
사용자가 어떤 값을 입력해 주고 그에 대한 소비를 진행한다 그러므로 어떤 값도 반환되지 않는다 ( Consumer<? super T> action )

지금까지 가장 중요한 세 가지 함수형 인터페이스에 대해 살펴보았다
그리고 함수형 인터페이스를 적을 때 이에 대해 화면 뒤에서 일어나는 일들의 고정에 대해서도 알아보았다
*/
