

char[] characters = str.toCharArray(); 
		for(char character : characters) {
			Integer integer = occurrences.get(character); 
			if(integer == null) {
				occurrences.put(character, 1);
			} else { 
				occurrences.put(character, integer + 1);
			}
지난 학습에선 이러한 코디가 thread-safe하지 않을 수 있다는 것에 대해 이야기하고,
이러한 코드를 더 thread-safe하게 만들기 위해 ConcurrentMap을 사용해야 한다는 점에 대해 알아보았다

이번 단계에선 이를 실행하는 방법에 대해 알아보겠다
Hashtable에 대한 예문을 실행하는 것으로 시작하여 이 예문을 ConcurrentHashMap을 사용하기 위해 바꿔주도록 하겠다


● 일반적 Hashtable 사용시
---------------------------------------------------------------------------------------------------


🟢 ConcurrentMapRunner 클래스파일


package concurrency;

import java.util.concurrent.*;
import java.util.concurrent.atomic.*;

public class ConcurrentMapRunner {

	public static void main(String[] args) {
		//1: 그리고 이제 String을 생성해 보겠다 String str = "ABCD ABCD ABCD"라 적겠다
		//그리고 이 안에 몇 개의 character가 존재하는지, 다시 말해 character가 몇 번 반복되는지 알아보도록 할 것이다 이해했냐?
		//보통 이런 문제를 풀어낼 때는 주로 다음의 방법을 사용한다 Map이라 적고 쉼표 옆에 Long 또는 Integer를 적는다 특정한 character가 몇 번 저장되었는지 찾기 위해 이렇게 적는다 ㅇㅋ?
		//일반적으로 AtomicInteger나 AtomicLong도 사용이 가능한데, 이유는 increment operation이 atomic이라는 것을 보장해 주기 때문이다 long을 여기에 사용한다면 다양한 연산을 포함하므로 increment operation은 atomic이 아니다
		//그러므로 너에게 새로운 클래스를 소개하기 위해 LongAdder라는 것을 여기 사용해 주도록 하겠다 그리고 이 옆에 occurrances = new라 적어 주게겠다 Threadsafe하고 싶다면, Hashtable<>라고 적어주면 된다
		Map<Character, LongAdder> occurrances = new Hashtable<>();
		
		String str = "ABCD ABCD ABCD";
		
		//2: 이 연산을 실행하는 일반적인 방법은 for(char character:str.toCharArray())를 적어주는 방법이다
		//각각의 character에 대해 존재 여부를 확인해 주어야 한다 그러므로 occrrances.get(character) 라 적어준다 LongAdder가 같다고 이야기하고 있다
		for(char character:str.toCharArray()) {
		
			LongAdder longAdder = occurrances.get(character);
		
			//만약 if(longAdder == null)일 경우 처리하고 싶은게 뭐지? longAdder = new LongAdder();라 적어준다
			if(longAdder == null) {
			longAdder = new LongAdder();
			}
			//longAdder.increment();를 적어주고 난 다음, occurances.put()을 적어준다 매우 일반적이고 보편적인 코드로, 작성하는데 큰 어려움이 없을 것이다 
			//그리고 이어서 괄호안에 (character, longAdder)라 적어주겠다
			longAdder.increment();
			occurrances.put(character, longAdder);
			//longAdder를 여기 사용하는 이유는 자동 증가 연산을 제공하기 때문이다 정수를 사용한다면 i++라고 적어줘야 했었다 
			//즉, 이는 자동연산을 사용하지 않았다는 것을 의미한다 맞지? 보다시피 이런식으로 코드를 작성해 주면 된다
		}
		//2-1 : 이제 syso(occrances);라고 적고 실행해보도록 하자
		System.out.println(occurrances);
		/* 출력결과 ==>
		{ =2, A=3, D=3, C=3, B=3}
		보다시피 띄어쓰기가 2번 A 3번, 나머지 것들도 모두 3번 나왔다는 것을 앓 수 있다 맞지?
		이게 일반적으로 이러한 목적의 코드를 작성하는 방법이다 
		LongAdder longAdder = occurrances.get(character);
			if(longAdder == null) {
				longAdder = new LongAdder();
			}
			longAdder.increment();
			occurrances.put(character, longAdder);
		하지만 여기 세 줄의 코드를 살펴보면, 이러한 것들을 가지므로 thread-safe라고 할 수 없다
		*/
		//그러므로 두 개의 thread가 동시에 이 코드를 실행한다고 해 보겠다 어떤 일이 벌어질까?
		//그리고 그 전에 character는 이미 5번 등장했다고 설정해 보자 그러므로 Thread1은 6으로 증가시킬 것이다
		//그리고 Thread2 또한 5라는 값을 갖고 있었으므로, 이 또한 6으로 증가하게 된다 
		//그리고 보다시피 update가 사라졌다 이러한 상황이 벌어지는 것을 예방하기 위해 ConcurrentHashMaps라는 것이 존재한다
		//ConcurrentMap을 사용하고 싶은 경우, 이렇게 할 수 있다 //다음 아래로..
	}

}


---------------------------------------------------------------------------------------------------



● ConcurrentMap 사용시
---------------------------------------------------------------------------------------------------


🟢 ConcurrentMapRunner 클래스파일



package concurrency;

import java.util.concurrent.*;
import java.util.concurrent.atomic.*;

public class ConcurrentMapRunner {

	public static void main(String[] args) {
		
		//1:ConcurrentMap을 적고 = ConcurrentHashMap이라 적어준다 이제 ConcurrentMap을 사용하고 있다
		//ConcurrentMap이 보통의 Map이 제공하는 연산을 모두 제공하고 있다는 사실을 알 수 있다 또한 추가로,ConcurrentMap은 다른 메소드도 제공한다 //3-1: for문 안에서 생성..
		ConcurrentMap<Character, LongAdder> occurrances = new ConcurrentHashMap<>();
		
		String str = "ABCD ABCD ABCD";

		for(char character:str.toCharArray()) {
			
			//2: occurrances.computeIfAbsent()라고 적을수 있다 특정한 key가 character로써 존재하지 않는다면, mappingFunction을 생성해 줄 수 있다
			//람다식에 대해 배운 내용을 떠올려 보자 이때 함수를 생성하는 방법에 대해 배웠다 보다시피 이게 함수인 것을 알 수 있다 입력값이 character가 되고, 출력값이 LongAdder이다
			//그러므로 여기서 character의 ch를 따와서 결과값으로 new LongAdder를 반환할 수 있다 그러면 어떤 일을 하게 될까? 존재 하지 않는다면 LongAdder에 대해 값을 설정해 줄 것이다 지금은 increment를 사용해 줄 수 있다
			
      occurrances.computeIfAbsent(character, ch -> new LongAdder()).increment();
			
      //그러므로 아래의 코드들은 모두 필요 없다 (삭제) increment와 put이 작업을 해준다
			//이제 이 코드를 실행하여 결과를 관찰하자 //3: 실행하자
			

//			LongAdder longAdder = occurrances.get(character);     ==> ConcurrentMap 사용하면 필요없는 코드들
//			if(longAdder == null) {
//				longAdder = new LongAdder();
//			}
//			longAdder.increment();
//			occurrances.put(character, longAdder);

		}
		System.out.println(occurrances);	
		/*3: ConcurrentMap 변경후 실행결과 ==>
		{ =2, A=3, B=3, C=3, D=3}
		결과에는 변함이 없다
		그러므로 전에 여기 있던 코드들은 이제 atomic연산으로 대체되었다
		그리고 이게 Concurrent Collection의 진정한 매력이다 Concurrent Collection은 장황한 단계들을 거쳐야 하는 연산을 
		atomic 연산으로 변환해 준다
		*/
	}

}

---------------------------------------------------------------------------------------------------
