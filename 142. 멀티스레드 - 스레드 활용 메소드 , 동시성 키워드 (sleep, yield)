
Executor Service, 즉 실행기에 관해 이야기하기 전에 소개하자면 
이번 학습에는 Thread에 대해 중요한, 이것저것에 관해 이야기 헤 볼 것이다


• sleep()
정적 메소드에 해당하고, Thread.sleep()이라 적어 사용한다
예를 들어 Thread.sleep(1000)이라 적으면, Thread가 sleep상태에 들어가고,

jshell> Thread.sleep(1000);

일 초 동안 대기하는 상태로 들어가게 된다 이를 더 명확하게 하도록
Thread.sleep(10000);이라고 늘려보도록 하겠다 10000 밀리초에 해당하고, 이는 10초를 의미한다 엔터를 눌러보자

jshell> Thread.sleep(10000);

jshell>
보다 시피 Thread가 대기 모드로 들어가 Thread가 다시 작동되는 데 약 10초 정도의 시간이 걸린 것을 알 수 있다

이게 가장 중요한 메소드 중 하나이다 제작한 프로그램을 잠시 sleep 상태로 만들고 싶다던가 대기 상태로 돌리고 싶을 때
Thread.sleep()은 사용하기 매우 적절한 메소드가 되는 것이다



이와 비슷한 상황에 Thread.yield라는 메소드를 사용할 수도 있다
-------------------------------------------------------------------------------


package multiThreading;

//extends Thread
//implements Runnable

class Task1 extends Thread {
	
	public void run() {//SIGNATURE

		System.out.print("\nTask1 Started");
		for(int i = 101; i <= 199; i++ ) 
			System.out.print(i + " ");
		
• yield()
		
    Thread.yield();//그러면 Thread.yield()는 어느 상황에서 사용하는 것일까?
		
		//다량의 CPU가 주어진 상황이 생겼다고 해보자 그러나 이런 CPU를 원하지 않는 경우라 해보자
		//이런 상황에선 대기 상태로 들어가 보도록 하겠다 ㅇㅋ?
		//Thread.yield()는 이런 역할을 합니다 request, 즉 추천 사항일 뿐이다 yield를 ctrl+클릭 해서 설명을 보도록 하자
		/*
		A hint to the scheduler that the current thread is willing to yield
      	its current use of a processor. The scheduler is free to ignore this
      	hint.
      	Thread.yield()는 스케줄러에 대한 힌트로, 현재의 thread가 현재의 이용 가능한 이 상태를 양보하거나
      	양도하겠다는 뜻이다 당연하게도 스케쥴러는 이러한 힌트나 팁을 무시할 수 있다
      	(*스케쥴러: 한정된 메모리를 여러 프로세스가 효율적으로 사용할 수 있도록 실행할 프로세스를 선택하는 것 )
		*/
		/*
		그러므로 여기 이 Thread에서 Task1은 스케쥴러에게 다음과 같이 말하고 있다 '충분하게 주목받았고, CPU가 충분하게 있으니, CPU를 포기하겠다'고 말이다
		하지만 이에 대해 스케쥴러가 다음과 같이 답할 수 있다 'NO,CPU를 가지고 있어야 하니 양도하지 말아줘'라 말이다
		그래서 이게 그저 충고나 조언 정도에 해당한다고 앞서 말한 것이다
		*/
		//정리하면 Thread.yield()는 중요하게 취급되는 또 다른 메소드 중 하나이다
		//Thread 클래스에 대한 또 다른 정적 메소드 중 하나이다
		

• synchronized keyword

    //이러한 정적 메소드 중에서 Thread를 다룰 때 매우 중요한 키워드가 하나 있다
		//바로 동기화 작업을 의미하는 synchronized이다 이러한 클래스의 모음의 코드를 열어보도록 하겠다
		
		/*
		
		* @since 1.0
		public class Hashtable<K,V>
    	extends Dictionary<K,V>
    	implements Map<K,V>, Cloneable, java.io.Serializable {
		
		여기 보다시피 HashTable은 자바1에서부터 가능하고
		 
		 * A constructor chained from {@link Properties} keeps Hashtable fields
		 * uninitialized since they are not used.
		 *
		 * @param dummy a dummy parameter
		  
		 * Returns the number of keys in this hashtable.
		 *
		 * @return  the number of keys in this hashtable.
     
    	 public synchronized int size() {
         	return count;
    	 }
		 이런 식으로동기화에 접근하는 방법 또한 자바1에서 가능해 왔다는 것을 알 수 있다
		 여기 이쪽을 보면, 대부분의 메소드가 동기화 키워드를 가지고 있다는 것을 확인할 수 있다
		 보다시피 sychronized가 지속해서 언급되고 있다
		 그러므로 HashTable에서의 거의 모든 메소드는 동기화된 키워드, 즉 synchronized keyword를 가진다
		 그렇다면 너는 지금 왜 HashTable이 동기화되어야 하는 건지에 대해 의문을 가지고 있으리라 생각한다
		*/
		
		System.out.print("\n Task1 Done");
	}
}

//여기 데이터자료의 조각이 있다고 해보자
//이 두 가지의 Thread 사이에서 공유되는 데이터 자료가 존재한다고 해보자
//즉, 이 두 Thread가 HashTable의 예시를 공유하는 것이다
//여기에 synchronized를 적어주면, Task1과 Task2 둘 중 하나의 Thread만 동기화된 메소드 안의 코드를 실행할 수 있다
//이게 무슨 뜻인지 설명해 보도록 하자 만약 특정 시점에서 동기화된 메소드가 50개 있다고 해보자
//그리고 이 중 하나의 Thread만 이 동기화된 50개의 메소드 중 아무 메소드를 실행시킬 수 있는 것이다
//50개의 동기화가 끝난 메소드가 있다 그리고 여기서 동기화된 코드가 1000줄이 있고, 이 중 단 한개의 Thread만이 이 1000줄의 코드를 실행할 수 있다
//만약 이미 하나의 Thread가 1000줄의 코드 중 어떤 코드이든 실행하고 있다면, 다른 Thread는 첫 번째 Thread의 동기화 코드에 대한 실행이 완료될 때까지 대기하다
//메소드를 실행하기 위한 접근 권한을 얻기 전에 나와주어야 한다 이게 synchronized keyword의 중요성이라 할 수 있다
//동기화에서 이해하고 넘어가야 하는 정말 중요한 것 중 하나는 동기화가 overhead가 많이 생긴다는 점이다 
//이유는 이 1000줄의 코드가 단 한 개의 Thread에 대해서만 실행이 가능하므로 다른 코드를 실행해야 하는 Thread들은 무조건 대기를 해야 하기 때문이다
//그러므로 시스템의 작동에 영향이 생길 확률이 높다 자바5나 8과 같은 최근 버전에선 Thread를 더 안전성 있게 사용이 가능하도록 하는 대안들이 많이 있다
//동기화를 사용해 접근하는 방법에만 의존하지 않는다는 이야기다

//concurrent Collection에 대해 배울때 Thread에 안전하게 접근하는 방법들에 대해 알아볼 것이다

class Task2 implements Runnable {

	@Override
	public void run() {
		System.out.print("\nTask2 Started");
		
		for(int i = 201; i <= 299; i++ ) 
			System.out.print(i + " ");
		
		System.out.print("\n Task2 Done");
	}
	
}

public class ThreadBasicsRunner5 {
	
	public static void main(String[] args) throws InterruptedException {
		
		//• NEW;
		//• RUNNABLE;
		//• RUNNING;
		//• BLOCKED/WAITING;
		//• TERMINATED/DEAD;•

		
		//Task1 - 101 to 199
		System.out.print("\nTask1 Kicked Off");
		Task1 task1 = new Task1();
		
		task1.setPriority(1);
		
		task1.start(); 
		
		System.out.print("\nTask2 Kicked Off");
		
		
		Task2 task2 = new Task2();
		Thread task2Thread = new Thread(task2);
		
		task2Thread.setPriority(10);
		task2Thread.start();
		
		task1.join();
		
		task2Thread.join();
		
		System.out.print("\nTask3 Kicked Off");
		//Task3
		for(int i = 301; i <= 399; i++ ) 
			System.out.print(i + " ");
		
		System.out.print("\nTask3 Done");
		
		System.out.print("\nMain Done");

	}
}

-------------------------------------------------------------------------------



/*
정리)
이번 학습에선 세 가지 중요한 내용에 대해 살펴봤다 
- 첫 번째는 Thread.yield()로 CPU를 포기하도록 요청하는 것에 대해 배웠고,
- 두 번째로는 Thread.sleep()으로 잠시 대기하도록 요청하는 것에 대해 배웠다
- 그리고 마지막으로 synchronized keyword에 대해 배웠다
  synchronized keyword를 설정하는 순간, 단 한 가지 Thread만이 특정한 예시에 존재하는 코드를 작동시킬 수 있었다
  이에 반해 다른 Thread가 동기화된 코드를 실행시키려면 접근이 허용될 때, 즉 작동하고 있는 Thread가 코드의 실행을 완료할 때까지 기다려야 한다
 
다음 학습에선 Thread와 관련해서 가장 재미있는 주제인 Executor Service에 대해 배워보도록 하겠다
*/
