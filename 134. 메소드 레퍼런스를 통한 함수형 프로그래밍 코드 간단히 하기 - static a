
이번 학습에선 또 다른 중요한 함수형 프로그래밍 개념인 메소드 참조에 대해 배우겠다


-----------------------------------------------------------------------------------------


MethodReferencesRunner 클래스 파일




package funtionalProgramming;

import java.util.*;

public class MethodReferencesRunner {

	
	//정적인 메소드가 여기 정의되어 있다고 해보자
	public static void print(Integer number) {//여기 출력메소드가 있다고 가정해보자//Integer입력값을 갖고, 이코드에 이어서 Syso를 적어 작동하도록 한다.
		System.out.println(number);
		//정리하자면 이게 string을 출력하는 정적인 메소드이다
		//만약 이 부분의 코드를 여기 사용하고 싶다면 다음처럼 해주면 된다 다시 아래로...
	} 
	
	
	public static void main(String[] args) {
		//간단한 문자형 데이터로 이루어진 리스트를 생성해 보겠다//stream 갖고와서 어떤 작업을 해볼까?
		//map을 사용해 보겠다 후에 forEach를 적어줌으로써 리스트 길이를 map을 이용해 재는 방법이다//결과는 무엇일까?
		List.of("Ant", "Bat", "Cat", "Dog", "Elephant").stream()
				.map(s -> s.length())
				.forEach(s -> MethodReferencesRunner.print(s));
		/*출력==>
		 3
		 3
		 3
		 3
		 8
		 */
		//이게 도대체 메소드 참조와 무슨 관련인지 의문을 품고 있을지도 모른다
		//왜 이런 내용에 대해 이야기 했는지 알려주겠다
		/*
		 .forEach(s -> System.out.println(s)); 이부분을 구체적으로 살펴보도록 하자
		 여기서 s를 syso로 매핑하고 있다 그러고 나서 println(s)를 실행하고 있다
		*/
		
		//코드를 복사해서 여기에 붙여넣어 보겠다 //이제 여기에 작은 마법을 부려보겠다
		//forEach함수의 s->, (s) 부분을 삭제해주고 out.의 .을 없애주고 ::을 적어주겠다 콜론 두 개를 적어주면 된다
		//그리고 이제 프로그램을 실행해 보겠다
		List.of("Ant", "Bat", "Cat", "Dog", "Elephant").stream()
//		.map(s -> s.length())
//					|
//					V
		.map(String::length)
//		.forEach(System.out::println);
//					|
//					V
		.forEach(MethodReferencesRunner::print);
		/*출력==>
		 3
		 3
		 3
		 3
		 8
		 */
		//어떤 일이 일어나는지 살펴보자, 같은 결과가 나왔다
		//결과로 처음에 3,3,3,3,8로 3이 4개 8이 1개 출력됐고, 이후 또 3 4개 8 1개 출력이되었다
		//그러므로 이 코드에도 같은 결과가 출력된 것이다
		//즉, 이 메소드 참조가 이 코드에( s -> System.out.println(s) ) 대한 축약이다
		//그러므로 여기서 우린 각 스트링을 가져와 출력하고 있다 이부분을( s -> System.out.println(s) ) 복잡하게 작성하는 대신,
		//단순하게 System.out을 적어주면 된다 이 방법에 관해 설명을 덧붙이자면, 우선 왼쪽 부분은 클래스가 위치한다 ( System.out )
		//그러므로 System.out이 클래스이고, 여기서 사용하고자 하는 메소드는 'println'이지?
		//한가지 특징을 설명하기 위해, 여기에서 consumer method가 바로 정의되어 있다고 해보자 메인메소드 위로...
		
		//먼저 클래스 이름을 복사해서 Sytem.out부븐을 클래스의 이름으로(MethodReferencesRunner) 대체해 준다
		//보는 대로 이 코드는 위에서 본 코드와 정확히 같은 일을 한 것임을 알 수 있다
		/*
		 .forEach(MethodReferencesRunner::print); 여기서 우리는 메소드 참조를 사용하고 있다
		 여기서 어떤 일이 일어나는지 설명해 보도록 하겠다
		 지금 우리는 여기서 이 메소드를 불러온 후에 결과가 나오면 그 값과 관계없이 여기( public static void print(Integer number) ) 대입해 준다
		 모든 요소는 이 메소드를( public static void print ) 통과하며 코드가 실행된다
		 그리고 이 메소드 참조는 원래 코드에 대한 축약이다
		 그러므로 forEach에서 s -> System.out.println(s) 's'라 불러주는 대신, MethodReferencesRunner를 출력하도록 하자
		 이부분을 MethodReferencesRunner.print라 바꾸어 준다 이렇게 코드를 작성하는 대신
		 아래 코드처럼 MethodReferencesRunner::print라 적어주는 것이다
		 */
		//지금 까지 메소드 참조에 대한 간단한 예시였다 여기서 사용되는 메소드는 정적 메소드이다
		//그러므로 우린 여기서 정적 메소드를 불러오고 있다
		
		//여기서 주목해야 할 점은, 메소드 참조는 인스턴스 메소드와도 함께 사용할 수 있다는 점이다
		//여기서 위의 코드를 s -> s.length()라 적어주도록 하겠다 s가 string 이라는것은 이미 알고 있는 사실이지?
		//그러므로 여기서 이 부분을 String::length라 바꿔서 적어주겠다 
		//정적인 메소드 뿐 아니라, 인스턴스 메소드 또한 메소드 참조로 바꿔서 적을 수 있다
		//이제 실행해 보면, 같은 결과가 나온 것을 확인할 수 있다 여기서 어떤 일이 일어난 것인지 설명해 보겠다
		/*
		String instance에서 length함수를 불러낸 것이다
		이제 이 두 조각의 코드를 살펴볼것이다
		두 번째 코드가 첫 번째 코드보다 가독성이 훨씬 뛰어나다는 사실을 알 수 있다
		메소드 참조를 사용하는 이유는 코드의 가독성을 더욱 높이기 위해서이다
		*/
		
		//이제 메소드 참조에 대한 연습문제를 풀어보도록 하자 옵셔널에 대한 이야기를 해보겠다
		Integer max = List.of(23, 45, 67, 34).stream()
				.filter(MethodReferencesRunner::isEven)
				.max(Integer::compare)
				.orElse(0);
		System.out.println(max);
		//출력 ==> 34
		//여기서 우린 짝수를 걸러낸 다음, 짝수 중의 최댓값을 찾으려 하고있다,
		//그 결과로 Integer, 즉 정수를 반환해 줄 것이다 Integer max와 등호를 이앞에 추가해 주자
		//max에 대한 syso를 사용하면 어떤일이 벌어질까? 34가 결과값으로 출력되었다
		//이제 filter,max등부분을 메소드 참조를 사용해 교체해 보려고 한다
		
		/*
		filter부분은 n % 2 ==0을 실행하도록 하고있다 맞지? 이는 사용자에 의해 정의된 논리 연산자이다
		그래서 이 식을 메소드 참조로 바꾸어 주는 것은 쉬운 일이 아니다
		그러므로 여기 아래에,정적 메소드를 생성해 주도록 하거다 ㅇㅋ? 아래로...
		이제 isEven을 사용할 수 있다 또한 메소드 참조에선 여기에(.filter(n -> n % 2 ==0)) 클래스를 적어주어야 한다
		정리하면 여기서 메소드 참조와 정적 메소드를 함께 사용하기 위해 filter를 바꿔 줬다
		
		하지만 max의 경우Integer.compare라는 메소드를 불러와 주었다 
		Integer.compare는 두 개의 파라미터를 허용한다 이런 종류의( (n1, n2) -> Integer.compare(n1, n2)) 것이라도 간단한 메소드 참조를 통해 재배치가 가능하다
		( (n1, n2) -> Integer.compare(n1, n2))여기에 ::compare를 적어주고 결과를 출력하여 코드를 실행해보자
		
		마지막 줄은 34가 되고, 아무것도 바뀌지 않았다
		*/
	}
	
	public static boolean isEven(Integer number) {//여기서 이야기하려는 것은 isEven이라 불리는 메소드를 생성하여 Integer number 를 입력받도록 할 것이다//그리고 반환값도 boolean으로 할 것이다
		return number % 2 ==0;  //다시 위로....
	}
}

-----------------------------------------------------------------------------------------





/*
정리)
이번 학습에서 메소드 참조과 메소드 참조 이용시 정확히 어떤 일이 벌어지는지를 소개했다
또한 메소드 참조가 정적 메소드와 객체 메소드, 두 가지 모두와 함께 사용할 수 있다는 점도 보여주었다
그리고 메소드 참조를 파라미터가 1보다 클 경우에도 사용할 수 있다는 점도 알 수 있었다
이것과 비교해 코드가 얼마나 간단해졌는지 배교해 볼 수 있다 
		Integer max = List.of(23, 45, 67, 34).stream()
				.filter(n -> n % 2 ==0)
				.max((n1, n2) -> Integer.compare(n1,n2))
				.orElse(0);
		System.out.println(max);
이 코드는 Integer max로 시작하여, 짝수 중 최대값을 찾고자 했던 코드이다	
그리고 보다시피, 이 코드는 바로 밑에 있는 코드에 비해 가독성이 좋지 않다, 그치?
메소드 레퍼런스는 너가 코드를 훨씬 쉽게 읽을 수 있도록 해준다 	
*/
