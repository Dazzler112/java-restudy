
코딩 예제: 두 번째로 큰 요소 찾기
이번 프로그래밍 챌린지에서는 ArrayMagic 클래스 안의 
findSecondLargestElement(int[] array)라는 미완성된 Java 메서드가 제공되어 있습니다.
이 메서드는 정수 배열을 받아서 그 배열에서 두 번째로 큰 요소를 리턴합니다.
배열에 있는 고유한 요소가 2개보다 적으면 메서드는 -1을 리턴해야 합니다.
예를 들어 만일 모든 요소가 같거나 배열에 요소가 1개만 있어서 
두 번째로 큰 요소가 없으면 메서드는 -1을 리턴해야 합니다.

지침
1. 먼저 findSecondLargestElement(int[] array) 메서드의 기존 구조를 이해합니다. 
이 메서드는 정수 배열을 인수로서 받고 리턴 타입이 정수인 것을 알 수 있습니다.
2. 배열에서 두 번째로 큰 숫자를 구하는 논리를 구현해야 합니다. 
만일 두 번째로 큰 숫자가 없다면 -1을 리턴합니다
(예를 들어 모든 요소가 같거나 배열에 있는 요소가 2개 미만인 경우).
3. 구분되는 요소가 2개 이상 있다면 여러분은 두 번째로 큰 요소를 찾아야 합니다. 
그렇게 하려면 배열을 반복하고 각각의 요소를 현재의 가장 큰 요소 및 두 번째로 큰 요소와 비교합니다. 
잊지 말고 그 2개의 추적 변수를 적절히 초기화하십시오.
4. 마지막으로 두 번째로 큰 요소를 리턴하거나 두 번째로 큰 요소가 없다면 -1을 리턴합니다.
5. 다음과 같은 엣지 케이스를 고려하십시오.
• 예를 들어, 배열의 모든 요소가 같다면 어떻게 될까요?
• 배열에 요소가 2개 미만이라면 어떻게 될까요?

예시

예 1:
• 입력: [5, 7, 9, 2, 4, 9]
• 출력: 7
예 2:
• 입력: [1, 1, 1, 1]
• 출력: -1
예 3:
• 입력: [7]
• 출력: -1

팁: 코딩은 문제를 관리 가능한 부분들로 나누는 과정입니다. 침착하게 계속 하세요!

고려할 사항
여러분은 해답을 구현할 때 다음의 상황들을 고려해야 합니다.

• 배열에는 중복된 요소들이 있을 수 있습니다.
• 배열은 양수 또는 음수 또는 0이 포함될 수 있습니다.
• 배열에 고유한 요소가 2개 미만이면 “두 번째로 큰” 요소가 없습니다. 
  그 경우에 여러분의 메서드는 -1을 리턴해야 합니다.


다음은 기본을 구성하는 뼈대입니다.
public class ArrayMagic {
    
    /**
     * This method finds and returns the second largest element in the given array.
     * 
     * @param array the array in which to find the second largest element
     * @return the second largest element in the array
     */
     
    public int findSecondLargestElement(int[] array) {
        //TODO: Write your code here
    }
}

해당 로직을 이용하여 코드를 완성하시오.






--------------------------------------------------------------------------













힌트)















힌트 1: 배열에서 보통 가장 큰 숫자를 찾는 방법을 생각해 보십시오. 
그 과정을 어떻게 확대해서 단지 가장 큰 숫자가 아닌 두 번째로 큰 숫자를 추적할 수 있을까요?
힌트 2: 2개의 변수를 사용하여 배열을 반복하면서 
가장 큰 숫자와 두 번째로 큰 숫자를 찾는 방법을 고려해 보십시오.
힌트 3: 중복된 요소가 있는 배열에 주의하십시오. 
여러분은 두 번째로 큰 고유한 숫자를 찾고 있다는 점을 기억하세요.
힌트 4: 요소가 2개 미만인 배열 또는 모든 요소가 같은 배열 등 특수한 사례를 어떻게 처리할지 고려해 보세요.
힌트 5: 반드시 여러분의 변수를 적절한 값으로 초기화하십시오. 
예를 들어 Integer.MIN_VALUE를 사용하면 음수가 포함된 배열을 고려할 수 있게 됩니다.

가능한 구현 결과의 예를 하나 보여드립니다. [4, 2, 9, 9, 4, 3]과 같은 배열이 있습니다.

1. largest와 secondLargest를 Integer.MIN_VALUE로 초기화합니다.
2. 배열 반복을 시작합니다.
3. 첫 번째 요소는 4이고, largest보다 크므로 
  이제 largest는 4가 되고 secondLargest는 Integer.MIN_VALUE가 됩니다.
4. 다음 요소는 2이고 largest(4)보다 크지 않습니다만 secondLargest(Integer.MIN_VALUE)보다 큽니다, 
   그러므로 secondLargest는 2가 됩니다.
5. 이 과정을 배열 전체에 대해 계속합니다.
6. 배열 반복을 마치면 largest는 9가 되고 secondLargest는 4가 됩니다.
7. secondLargest가 Integer.MIN_VALUE가 아니므로 secondLargest를 리턴합니다. 이 경우에는 4가 됩니다.

--------------------------------------------------------------------------















--------------------------------------------------------------------------
















해답)


















public class ArrayMagic {   
     
    public int findSecondLargestElement(int[] array) {

        //1. 일단 처음 에지케이스 먼저 작성해야 한다
        if(array.length == 0) {
            return -1;
        }

        int largestElement = Integer.MIN_VALUE; //3. 가장 큰 요소를 정수가 가질 수 있는 최소값으로 만드는것임
        int secondLargestElement = Integer.MIN_VALUE; //6. 두번째로 큰 숫자도 정수점의 최소값과 일치한다.
        
        //예를들어 largest = 20 , second = 15
        //25라는 새요소의 값이 들어감
        //larget는 25로 들어감 업데이트가 되야함 두번째 큰숫자는 실제로 20이 되어야 한다. 15에 머물러선 안됨
        //8. 따라서 우리가 해야할 일은 두번째 큰 요소를 실제로 가장 큰요소로 설정하는것 
        for(int value : array) { //2. 최대값과 비교하고 싶다.. int로 변수를 먼저 생성해야겠다
            if(value > largestElement) {
                secondLargestElement = largestElement //8-1
                largestElement = value;//4. 라지스트는 벨류가되고
            }else if(value > secondLargestElement && 
                     value != largestElement )//7. 두번째큰값 변수를 생성후{//8-2두번쨰로 큰숫자가 가장큰 요소와 동일한것을 원치 않다 종료조건을 추가할 것 &&으로 일단 시작
                      ㄴ>두번째로 큰 요소보다 큰값이라고 하겠음 //또하나 매우 중요한것은 값이 가장 큰 요소와 같지 않아야 한다는것 //else if 에있는 2가지 조건이 다 중요함.
                  secondLargestElement = value;  //따라서 값이 두번째로 큰 요소보다 크고 가장 큰 요소와 같지 않으면 두번째 큰요소로 재설정 해야함.
            }
        }
        if(secondLargestElement == Integer.MIN_VALUE;) {//두번째 큰요소가 정수인경우 배열에서 두번째로 큰요소를 찾을수 없다는 의미의 최소값은 여기 문제에서는 -1임
            return -1;
        }
        
        //5. 우리가 할 수 있는 것은 가장 큰요소를 다시 반환하는것
        return secondLargestElement;
    }
}

--------------------------------------------------------------------------
