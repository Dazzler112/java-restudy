
Peson클래스를 연장해 Employee라는 클래스를 만들어 볼 것이다
지문의 Employee 클래스가 갖길 바라는 Person에 있는 속성들과 함꼐 추가되는 네가지 속성들이다.
다음 toString메소드를 Employee에 넣어 모든값을 출력하게 할 것이다. Person 값들까지
왜냐하면 Employee 출력하려고 할때, 직책, 고용주, 직책단계 월급뿐 아니라 이름, 전화번호, 이메일까지 출력하도록 하는것이다.


연습 지문

public class Person name,phone,email;

• Student
  ‣ college
  ‣ class
• Employee
  ‣ title
  ‣ employer
  ‣ employeeGrade
  ‣ salary
  ‣ toString(print all values including those of Person)



우선 Employee 클래스를 생성해야 한다
--------------------------------------------------------------------------
Employee 클래스 파일


package level2Inheritance;

import java.math.*;

public class Employee extends Person{//먼저 우리가 바르는 속송과 Person을 연장하는 것이다.

	private String title;
	private String employer;
	private char employeeGrade;
	private BigDecimal slary;
	
	
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getEmployer() {
		return employer;
	}

	public void setEmployer(String employer) {
		this.employer = employer;
	}

	public char getEmployeeGrade() {
		return employeeGrade;
	}

	public void setEmployeeGrade(char employeeGrade) {
		this.employeeGrade = employeeGrade;
	}

	public BigDecimal getSlary() {
		return slary;
	}

	public void setSlary(BigDecimal slary) {
		this.slary = slary;
	}


	public String toString() { //하지만 person의 값들은 어떻게 출력할 수 있을까? employee에서 person클래스 값들에 접근할 수 있을까?
							   //super란 것을 이용하면 된다
		//return title + "#" + employer + "#" + employeeGrade + "#" + slary + "#" + super.getName() + "#" + super.getEmail() + "#" + super.getPhoneNumber() + "#";
					//super.는 너가 상위클래스에서 값을 가져올 수 있게 해준다 상위클래스 메소드를 호출하는 것이다
		//하지만 더 좋은 방법은 앞에 toString을 쓰는것이다.
		return super.toString() + "#" + title + "#" + employer + "#" + employeeGrade + "#" + slary + "#";
		//지금 상위 클래스에서 toString을 호출한 다음 세부정보를 추가하고 있다 실행하면 모든 세부정보를 추가한다
	}
}

--------------------------------------------------------------------------



--------------------------------------------------------------------------

StudentRunner 클래스 파일


package level2Inheritance;

public class StudentRunner {

	public static void main(String[] args) {
		
		Student student = new Student();
		student.setName("Ranga");   //student.을 타이핑하면 Person클래스의 메소드 까지 나오는게 보일것이다. 
		//  ㄴ> 1-1 Ranga라는 이름을 가져왔다.
		student.setEmail("in28minutes@gmail.com");
		//이 모든 것을 student클래스 내부에서 할 수 있다 Student클래스 안에서 별도로 설정한 메소드 이메일 또는 이름이 없는데도 말이다
		
		//Person클래스를 확장하면서 Person클래스 있는 모든 것을 상속하는 것이다.
		
		/*
		Person person = new Person();
		person.setName("Ranga");
		person.setEmail("ranga@in28minutes.com");
		person.setPhoneNumber("123-456-7890");
		String value = person.toString();  //person.을 타이핑하면 get,setter메소드 뿐 아니라 notify,hashcode등 다양한 메소드가 나온다 어디서 오는 것일까?
		System.out.println(value);
		System.out.println(person);
		*/
		
		//그리고 Employee클래스를 만들자
		Employee employee = new Employee();
		employee.setName("Ranga");
		employee.setEmail("ranga@in28minutes.com");
		employee.setPhoneNumber("123-456-7890");
		employee.setEmployeeGrade('A');
		employee.setTitle("Programmer Analyst");
//		employee.setEmployer(null);
//		employee.setSlary(null);

		System.out.println(employee);//toString을 별도로 만들지 않았으면 전혀 상관없는 것이 출력되는것을 볼 수 있을 것이다
		//하지만 person의 값이 출력되지 않는다... Person 클래스파일로
		//toString에 super클래스를 사용한 이후 person값도 출력 할 수 있게 되었다
		// ==> Programmer Analyst#null#A#null#Ranga#ranga@in28minutes.com#123-456-7890#
		
	}
}

--------------------------------------------------------------------------



/*
정리)
우리는 Employee 클래스와 네 가지 속성을 만들었다
Person클래스를 연장했고 toString()메소드를 구현했고, Super.toString()을 호출했다
super.toString() 없이는 상위 클래스의 toString이 호출되지 않는것을 확인했을 것이다.
그렇기에 Employee 클래스에 있는 세부정보들만 출력됐다
Person클래스에 있는 세부정보들은 출력되지 않았다, 그걸 가능케 하기 위해
super.toString을 이용해 Person클래스의 세부정보를 얻은 것이다
이제 Employee클래스의 내용물을 출력하면 Person클래스의 내용물도 함께 출력됐다
*/
