2
----------------------------------------------------------------------------------------------------

클래스파일 1번)

package forLoopTraining;

public class MyNumberRunner {
	
	public static void main(String[] args) {
		//연습문제1번
		MyNumber number = new MyNumber(6);
		boolean isPrime =  number.isPrime();
		System.out.println("isPrime " + isPrime); //전에 풀었던거니 이번에는 아님
		
		//연습문제 2번
		int sum = number.sumUptoN();
		System.out.println("sum" + sum);
		
		int sumOfDivisors = number.sumOfDivisiors();
		System.out.println("sumOfDivisors" + sumOfDivisors);
	}
}

----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------

클래스파일 2번)

package forLoopTraining;

public class MyNumber {

	private int number;

	public MyNumber(int number) {
		this.number = number;
	}

	public boolean isPrime() {
		//소수 2로 나눌수 없는것, -1까지
		//2 to number -1
		//How can check if a number is divisible by 2?
		
		if(number < 2) {
			return false;
		}//일단 if(number < 2) 쓰고 이게 맞다면 false를 출력
		//소수가 아니라고 표시되도록 모든 프로그램에서 항상 쓰는 함수이다.
		//이것을 Guard Condition이라고 하는데 메소드 전에 넣는 소스값이 유효한지 확인하는 절차
		//또 여기 있는 모든 조건을 한 번 확인해서 원하는 특정 값을 얻을 수 있도록,
		//정확한 함수를 사용하도록 하기 위함임
		//그래서 여기는 보면 만약 2보다 적은 숫자를 넣을 경우 false값이 나옴
		
		for(int i = 2; i <= number-1; i++) {
			if(number % 2 == 0) {
				return false;
			}
		}
		
		return true;
	}




//연습문제 2번
	public int sumUptoN() {

		//1+2+3+....+number  //1.Mynumber의 생성자 숫자까지의 포함된 숫자의 덧샘
		int sum = 0;  //1.로컬변수를 생성
		for(int i = 1; i <= number; i++) { //2.전역변수의 수보다 작거나 같을때 까지 조건을 건다
			sum = sum + i;             //3.로컬변수 + 증가분의 i 를 더해주면 조건까지의 덧샘을 더한 값이 모두 나온다 sum += i 도 같음
		}
		
		return sum;
	}

	public int sumOfDivisiors() {
		
		// 6 except 1, 6 => 2,3     //1. 해당값의 약수 구하기
		// 2+ 3+ 4+ 5
		
		int sum = 0;
		for(int i = 2; i <= number-1; i++) { //2. 1과 해당 생성자의 값(ex) 6)을 제외해야하니 int i = 2로 하고 조건에는 생성자수의 -1 해주면 1과 해당 생성자 값은 출력 안되겠지?  
			if(number % i == 0) { //3. 6의 약수를 찾고 맞다면 나눴을때 나머지 값이 0이면 더하기에 포함
			sum = sum + i;
			}
		}
			
		return sum;
	}
	
}

----------------------------------------------------------------------------------------------------
