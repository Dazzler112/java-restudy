
이번 학습은 자바 프로그래밍에 있어 아주 아주 중요한 개념을 알아보도록 하자
'인터페이스'란 것이다.

초보 프로그래머들은 인터페이스와 추상 클래스 사이의 차이점을 이해하길 힘들어한다.
자바 8 문법상으론 둘 다 거의 같지만 활용도 면에선 어떻게 사용되고 사고 방식의 면에선
너가 어떻게 생각하느냐는  인터페이스는 매우 매우 다르다

이번 학습에선 우리가 하는 것은 인터페이스에 관해 어떻게 사고할지 생각해 보는 것이다.

/*
예를 들어 게임기를 생각해 보자 게임기 버튼들이던 게임에 존재하는 인터페이스란 것이다
어떤 게임을 하든지 그 게임은 저 버튼에 무언가는 적용해 놨겠지?
마리오 게임이나 체스 게임을 한다고 쳐보자
이 게임들은 이 인터페이스에 존재하는 것들에 각자 다른 적용법을 제공 하겠지?
그것이 정확히 자바의 '인터페이스'에 대해 너가 생각해야 할 것들이다.
어떤 객체 지향 프로그래밍 언어든지 말이다
*/

간단한 클래스를 만들어 보자

--------------------------------------------------------------------------

GamingColsole 인터페이스 파일


package interfaceTraining;

public interface GamingConsole {
	//버튼이 네 개가 있다고 해보자
	
	public void up();
	public void down();
	public void left();
	public void right();
	//누가 이것의 적용법을 제공할까?
	//이 적용법은 이 게이밍 콘솔을 적용하는 게임들에 의해 제공 되겠지?
	//이 문법은 매우 단순하다 클래스 대신 interface란 키워드를 사용한다
	//메소드 문법을 정의할 뿐이다
	//메소드 up,down..등등 걱정할 필요 없고 신경써야 할 것은 이들을 어떻게 호출하냐가 문제이다
	//우린 선언을 제공하는 것이지, 정의를 내리는게 아니다
	//이 게이밍 콘솔에 어떻게 적용법을 제공할까? 
	//어떻게 하냐면 새클래스를 만들고 이름을 MarioGame이라 해 보자 //MarioGame 클래스로...
	
	
	
	
	//이 GamingConsole에 메소드를 적용한다 up(), down(), left(), right() //다시 MarioGame클래스로...

}

--------------------------------------------------------------------------






--------------------------------------------------------------------------

MarioGame 클래스 파일


package interfaceTraining;

//여기서 우리가 하고 싶은건 GamingConsole을 적용하고 싶다..
public class MarioGame implements GamingConsole{
			//ㄴ> 오류가 나온다 그러면 ctrl+cmd1 비적용메소드 추가, 이제 너는 인터페이스에서 오는 모든 메소드들이 보일 것이다.
	//이제 이버튼들에 각자 뭘 하고 싶을지 정의할 수 있는것이다
	
	//여기서 할 수 있는 것은 마리오 게임은 위를 누르면, 무엇을 하냐? 뛰어 오르지?
	@Override
	public void up() {
		System.out.println("Jump");
	}
	
	//이것은 구멍 안으로 들어간다고 하자
	@Override
	public void down() {
		System.out.println("Goes into a hole");
	}

	//아무것도 안한다 하고
	@Override
	public void left() {
		
	}
	
	//전방 이동이라고 하자
	@Override
	public void right() {
		System.out.println("Go Forwards");
	}
	         
	//우리가 하고 있는 것은 인터페이스를 위한 적용법을 제공하는 것이다. //GamingConsole 인터페이스로 ..
	//syso 버튼들에게 우리는 적용법을 부여하는 것이다 
	//이제 GameRunner를 가질수 있다 그래서 GameRunner가 이 인터페이스를 사용한다 하자
}


--------------------------------------------------------------------------







--------------------------------------------------------------------------

ChessGame 클래스파일


package interfaceTraining;

public class ChessGame implements GamingConsole{
	
	//조각을 위로 이동
	@Override
	public void up() {
		System.out.println("Move piece up");
	}
	
	//조각을 아래로 이동
	@Override
	public void down() {
		System.out.println("Move piece down");
	}

	//조각을 왼쪽으로 이동
	@Override
	public void left() {
		System.out.println("Move piece left");
	}
	
	//조각을 오른쪽으로 이동
	@Override
	public void right() {
		System.out.println("Move piece right");
	}
	
	//ChessGame의 구현
	//이제 GameRunner 안에는 이 성명을 간단한 성명으로 바꿀 수 있다. //GameRunner클래스 파일로...
}

--------------------------------------------------------------------------








--------------------------------------------------------------------------

GameRunner 클래스 파일


package interfaceTraining;

//GameRunner를 이용해 게임의 인스턴스를 만들 수 있다.
public class GameRunner{
	
	//이제 MarioGame game = new MarioGame() 라 쓰자
	public static void main(String[] args) {
		//MarioGame game = new MarioGame();
		//이제 메소드들을 부를 수 있다 위,아래,왼쪽,오른쪽
//		game.up();
//		game.down();
//		game.left();
//		game.right();
		/*==> 출력
		 Jump
		 Goes into a hole
		 Go Forwards
		 */
		
		//인터페이스의 장점은 하나에 여러 적용법이 있을 수 있다는 것이다.
		//MarioGame을 복사해서 ChessGame이라는 클래스를만들자 //ChessGame 클래스파일로..
		
//		ChessGame game = new ChessGame();
//		game.up();
//		game.down();
//		game.left();
//		game.right();
		/*==>출력
		 Move piece up
		 Move piece down
		 Move piece left
		 Move piece right
		 */
		//그래서, 카트리지를 바꿀 때 이런 종류의 일이 벌어지고, 이제 우리는 체스 게임을 하고있는 것이 된다.
		
		//놀랍게도 GamingConsole 게임을 사용할 수 있다
		//GamingConsole game = new MarioGame();
		GamingConsole game = new ChessGame();
		game.up();
		game.down();
		game.left();
		game.right();
		//같은 코드를 실행할 수 있는 걸 볼수 있다.
		/* 마리오 사용시
		 출력 ==>
		 Jump
		 Goes into a hole
		 Go Forwards
		 */
		//마리오를 체스로 바꿔준다면 같은 코드로 전혀 다른 구현이 되는것이다.
		/* 체스 사용시
		 출력 ==>
		 Move piece up
  		 Move piece down
		 Move piece left
		 Move piece right
		 */
		//이것이 바로 다형성이란 것이다
		//이것이 인터페이스로 가능한 것이다
		//같은 것에 여러가지 구현을 부여할 수 있다는 사실이다
		//인터페이스는 기본적으로 공통적인 시행 가능 행동들을 대표하는 것이다.
		//GamingConsole 안에는 공통 수행가능 행동들이 up(),down(),left(),right()인 거지
		//다중구현을 만들었고 인터페이스는 여러 구현들 사이를 오가게 할 수 있는 방법을 제공한다.
		//ChessGame()구현을 사용하거나 아니면 MarioGame 구현을 
		//내 코드에 큰 변화 없이 사용할 수 있는 것이다. MarioGame()에서 ChessGame()으로 간단하게 전환하는 것이다.
		//이 개념들을 기억하고 다음 단계에선 인터페이스에 대해 더 많은 것을 알아보자
	}
}

--------------------------------------------------------------------------




/*
 정리)
 우리가 이야기한 내용은 인터페이스가 공통 행동(GamingClass)을 클래스(Mario,ChessGame)에게 제공한다는 것이다.
 인터페이스에는 여러 구현들이 존재할 수 있다는 것이다
 implements키워드를 사용하고 구현들을 제공하면 되는 것이다
 */
