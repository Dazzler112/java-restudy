
&&는 단축 회로 연산자


jshell> int i = 10
i ==> 10

jshell> int j = 15
j ==> 15

jshell> j > 15 && i++ > 5
$33 ==> false
비교연산중 j조건 불만족 i조건은 후증감자니까 10 뒤조건은 만족 false

jshell> j
j ==> 15

jshell> i
i ==> 10

같은 연산을 &로 해보자

jshell> j > 15 & i++ > 5
$36 ==> false

jshell> j
j ==> 15

jshell> i
i ==> 11

i값이 바뀌었다 &와 && 연산자의 차이이고
&&을 단축 회로 연산자라 부른다

단축 회로 연산자란?
&&는 두 피연산자다 참이어야 참을 출력한다
단축회로 &&은 수식자체가 거짓이면 평가(뒤의 조건) 자체를 하지 않는다
어차피 결과가 거짓임을 알기 때문이다 한마디로 실행할 필요가 없다는 뜻
(첫번째 값(j > 15)을 바로 반환 i++(i++ > 5)는 실행 하지도 않았다
그래서 i++는 증가전 10의 값에 남지만

&연산자는 하나가 거짓임을 알아도 다 실행한다
그래서 i++가 10에서 11로 값이 변한것이다

이것이 단축회로 && 연산자와 &연산자 간 큰 차이이다

단축회로 ||연산자와 |연산자의 관계도 비슷하다


»»로직을 실행할때 단축회로에 너무 의존하지 않아도 좋다 프로그램은 읽기 쉬어야 한다
j > 15 && i++ > 5 이런건 읽기도 복잡하고 남이 이해하려면 머리를 싸매야 한다
그래서 로직을 구분할 때 단축회로와 일반& 연산자를 혼용하는 건 추천하지 않는다
최선의 방법은 i++를 먼저 실행하고 증가한 i값과 비교하기 위해 그다음에 j> 15 && i >5 조건을 붙여주는게 더 좋다
jshell> i++;
$39 ==> 11

jshell> j > 15 && i > 5
$40 ==> false


»»코드는 늘 심플하게 쓰고 부수효과는 없는지 확인하는것이 좋다 
j > 15 && i++ > 5
이조건 결과를 검증하면 i 값이 증가하는 WEBVTT 부수효과가 생긴다
좋은 프로그래밍이 아님!
좋은 프로그래밍은 참/거짓으로 명료하게 출력해야지 특정 값을 증감하는 것이 아니다!
