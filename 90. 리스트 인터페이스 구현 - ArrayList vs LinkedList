
저번 학습에선 우리는 ArrayList, LinkedList, Vector의 인스턴스를 만들었다
이번에는 ArrayList와 LinkedList사이에 어떤 차이점이 있는지 알아보자

이들 밑에 이용되는 기본적 데이터 구조를 가지고 시작하자3
ArrayList아래에는 사용되는 기본적 데이터 구조는 배열이고 Vector의 경우도 마찬가지다
하지만 LinkedList의 경우에 이용되는 데이터 구조가 LinkedList이다 무슨 말일까?

예시를 보자
                                   Array
| 123 | 140 | 20 | 50 | 70 | 80 | 100 | 180 | 25 | 1 | 8 | 10 | 12 | 23 | 10 |
   0     1    2    3    4    5     6     7    8    9   10  11   12   13   14
이것은 배열이다, ArrayList나 Vector밑에는 배열이 있다
배열 안에는 값들이 서로 옆에 존재하여 위치 8에 있는 값을 불러들일 수 있다
원한다면, 매우 빠르게 불러들일 수 있다
하지만 배열의 경우 값을 삽입하거나 제거하는 것은 매우 시간소모적인 작업이다
인덱스2번에 요소를 하나 출가하고 싶다고 하면 모든 다른 요소들은 한단계 오른쪽으로 이동시키고
그다음 새 요소를 여기 넣어야겠지? 어떤 상황에선 새로운 배열을 만들어야 할 수도 있다
숫자 50을 지우고 싶다면 이걸 지운 후 오른쪽에 있는 모든 요소들을 한 단계 왼쪽으로 옮겨야 한다

이것들은 아주 소모적인 작업들이다 왜냐하면 니가 위아래로 옮겨야 할 요소들이 여러 개이기 때문이다

또다른 종류의 데이터구조는 LinkedList이다

    TOP  ㅁ
       ↙
  | 45 || → | 25 || → | 4 || → | 13 || → | 6 || → | 5|\|   
LinkedList밑에는 LinkedList라는 데이터 구조가 있다 
LinkedList안에는 한 요소에서 다른 요소로의 참조가 들어 있으므로 요소들이 저장된 방법은
여섯개의 요소를 저장한다 하면, 45에서 25로, 25에서 4로, 4에서 13으로, 13에서 6으로 연결 되겠다
그래서 5번 요소를 LinkedList에서 찾고 싶으면,Top에서 시작해서 첫, 두, 세 , 네 번째 그다음 다섯뻔재 요소를 찾아야 한다

그래서, LinkedList의 무언가 접근하는 것은 매우 느리다, 하지만 예를들어 만약 요소 6번을 LinkedList에서 지우고 싶다고 하자,
그러면 니가 해야할 것은 단순히 이요소(숫자6)를 지우고 13 다음의 값을 5로 바꾸면 된다
그래서,13의 연결점을 변경해서 이것의 연결은 5를 향하게 가리키게 바뀌겠다 

아니면, 사이에 요소 하나를 추가하고 싶다면, 예로 45번 25번 사이에 100을 삽입하고 싶다고 하자 
그러면 너느 45가 100으로, 그리고 100이 25로 연결되게 바꿀수 있다.

여기서 이해해야할 중요한점은 ArrayList와 Vector 밑의 배경 데이터 구조는 배열이고 LinkedList밑에는 LinkedList인 것이다
배열의 경우에는, 삽입과 제거가 소모적이지만 배열의 값에 접근하는건 매우 빠르다.
LinkedList의 경우 요소의 삽입과 제거가 배열보다 훨씬더 쉽지만 특정 위치의 요소에 접근하는건 아니면 
LinkedList안을 검색하는 것은 조금더 소모적이다 특정 인덱스에 존재하는 요소를 찾으려는 건 LinkedList경우에 훨씬 더 소모적이다
왜냐하면 요소 하나하나를 통과해야 하기 때문이다

/*

요약)
요약하면 ArrayList, 삽입과 제거가 LinkedList에 비해 느리고, 지속적으로 시간-접근을 허용한다
class ArrayList implements List<E>{
  // Insertion and Deletion are slower compared to LinkedList
  // almost constatnt time - access 
}


하지만, LinkedList의 경우 요소들은 양면으로 연결되어 있다, 이 그림에서 우리는 전방 연결만 봤지만
자바의 LinkedList 구현에는 양면 LinkedList라는 것을 사용한다
이것은 전방으로 향하는 연결과 후방으로 향하는 연결이 존재한다는 뜻이므로 전방의 요소에 연결이 있고 후방 요소도 마찬가지다

class LinkedList implements List<E>{
  // Elements are doubly linked - forward and backward - to on
  // Iteration is slower than ArrayList
  // Faster Insertion and Deletion
}
• 리스트를 통해 반복하는 것은 매우 매우 느리다 왜냐하면 요소 하나하나를 건너야 하기 때문이고 특정요소에 접근하는 것도 느리다
(내가 다섯번째 요소에 접근하고 싶다 하면 LinkedList보단 ArrayList가 더 빠르겠지?)
• 하지만, LinkedList는 더 빠른 삽입과 제거가 가능하다

*/


그러므로 언제 ArrayList를 쓸지 LinkedList를 쓸지 생각해 보자
삽입/삭제가 흔치 않은 경우에, 리스트의 변경점이 아주 적다면, 그리고 요소들의 위치 기반으로 접근을 하고 싶다면
ArrayList를 이용하겠지
삽입과 제거가 여럿 있다면, 너는 LinkedList를 쓰겠지




/*
정리)
이 학습에선 ArrayList와 LinkedList 사이의 차이점을 이해해 보았다
ArrayList의 밑바탕이 되는 데이터 구조는 배열이고 
LinkedList의 밑바탕 데이터 구조는 전방과 후방의 요소들에게 연결이 있는 Doubly(양면) LinkedList이다
그리고 ArrayList와 LinkedList를 언제 써야할지에 대한 문제도 알아보았다
*/
