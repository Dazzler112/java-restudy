
LocalDate가 가지는 유틸리티 메소드를 사용해 날짜를 비교하고 특정 날짜에 값을 설정하는 방법을 알아보자

jshell> LocalDate today = LocalDate.now();
today ==> 2023-12-02

jshell> LocalDate yesterday = LocalDate.of(2023, 12, 01) //어제 날짜를 생성하고 싶다.. of()메소드로 하드코딩으로 일단 생성
yesterday ==> 2023-12-01

jshell> today      //오늘에 대한 출력값
today ==> 2023-12-02

jshell> yesterday    //어제에 대한 값
yesterday ==> 2023-12-01

동일한 날짜지만 다른 연도로 출력하고 싶을경우 .withYear()을 사용하면 된다.
jshell> today.withYear(2020)  //예를들어 2020년으로 설정해 본다
$6 ==> 2020-12-02  //연도만 바뀌고 날짜는 바뀌지 않았다.

2일이 아닌 22일로 변경해 보겠다
jshell> today.withDayOfMonth(22)
$7 ==> 2023-12-22

월도 동일한 방법으로 수정할 수 있다.
jshell> today.withMonth(3) //세번째 달로 변경해 보겠다.
$8 ==> 2023-03-02

흥미로운건 사실 해당 연도의 몇 번째 날인지 설정하는 방법인데 같은 연도에서 특정 날로 지정해 보자 
예를 들어 올해의 120번째 날로 설정하면
jshell> today.withDayOfYear(120)  //23년 4월 30일이 나온다.
$9 ==> 2023-04-30  //=>2023년의 120번째 날이다.

날짜 관련해서 자주 실행하는 코드중 하나는 비교하는 것인데
날짜가 두개 있을 때, 종종 특정 날짜가 다른 날의 이전인지 이후인지 궁금할 때가 있다
그리고 이 값을 알 수 있는 메소드 역시 있다. .isBefore()을 사용하면 된다.

jshell> today.isBefore(yesterday) //맞을까?
$10 ==> false   //거짓
그럼 이후인지 보면?
jshell> today.isAfter(yesterday)
$11 ==> true  //참
이렇게 날짜를 비교해 볼 수 있다.
isBefore() 그리고 isAfter()을 이용해 날짜를 비교할 수 있었고
우리가 LocalDate로 실행하는 모든 것은 LocalDateTime이나 LocalTime에서 실행할 수 있는 것들이다.

/*
❗ 총정리 ❗
LocalDate, LocalDateTime, LocalTime 클래스의 다양한 기능에 대해 알아봤다
또 여러 메소드를 통해 날짜 값을 구해보고 API를 더 자세히 알아봤다.
하지만 메소드가 너무 방대하기 때문에 진짜 기억해야 되는 부분은 특정 정보를 얻기위해
어떤 구문을 실행해야 하는지 알고 있으면 필요한 내용은 언제든 자바 API문서를 통해 볼 수 있다.
LocalDateTime에 대해 찾고자 한다면 검색창에 'LocalDateTime Java9'를 입력하여 검색해라
그러면 API에 대한 아주 자세한 정보를 볼 수 있다.
*/
