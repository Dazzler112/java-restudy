
코딩 예제 – 홀수 필터링하기

정수 리스트가 제공되어 있고 여러분의 과제는 Java Stream API를 사용하여 그 리스트에서 홀수를 필터링하는 것입니다.

출력되는 리스트에 있는 숫자들의 순서는 입력된 리스트의 순서와 같아야 하니 주의하시기 바랍니다.

• 엣지 케이스
- 리스트에 양의 정수와 음의 정수가 모두 포함되어 있을 수 있습니다.
- 리스트는 비어 있을 수 있습니다.

• 입력 형식
- 입력값은 n개의 정수(양수 및 음수)가 포함된 List<Integer>일 것입니다.

• 출력 형식
- 출력값은 입력된 리스트의 모든 홀수가 포함된 List<Integer> 여야 합니다.

• 예시
- 입력: [1, 2, 3, 4, 5] 출력: [1, 3, 5]
- 입력: [6, 7, 8, 9, 10] 출력: [7, 9]
- 입력: [-3, -2, -1, 0, 1, 2, 3] 출력: [-3, -1, 1, 3]

• 참고사항
- list.stream() 함수를 사용하여 리스트를 스트림으로 변환합니다.

- stream.filter() 함수는 술어(predicate)(불리언을 리턴하는 식)를 받습니다. 
  술어를 충족하지 않는 요소를 필터링하여 제거하는 데 사용합니다.

- stream.collect() 함수를 사용하여 스트림을 다시 리스트로 변환합니다. 
  이 함수 안에서 입력된 요소들을 새로운 리스트에 누적하도록 
  .collect() 함수에 명령하는 유틸리티 메서드인 Collectors.toList()를 사용합니다.


다음은 코드의 기본 뼈대입니다

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
public class FunctionalProgrammingMagic {

    /**
     * This method filters out the odd numbers from a given list of integers.
     * @param numbers This is the list of integers from which odd numbers are to be filtered out.
     * @return List<Integer> This returns a list of odd integers.
     */
    public static List<Integer> filterOddNumbers(List<Integer> numbers) {
        
    }
}

다음 코드를 사용하여 지시사항을 완료하시오














-------------------------------------------------------------------------------









힌트)











1. Java Stream API: Java의 Stream API를 사용하여 숫자 리스트를 처리합니다.
2. 필터링: filter() 메서드를 사용하여 홀수만 스트림에 남깁니다.
3. 결과 수집: collect() 메서드와 Collectors.toList()를 사용하여 필터링된 스트림을 다시 리스트로 변환합니다.
4. 람다식: 람다식을 사용하여 filter() 메서드의 Predicate를 정의합니다. number -> number % 2 != 0을 사용하여 
   홀수인지 검사합니다.
5. 엣지 케이스: 리스트가 비어 있는 등의 엣지 케이스를 잊지 말고 처리합니다.

-------------------------------------------------------------------------------
















-------------------------------------------------------------------------------











해답)

















import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
public class FunctionalProgrammingMagic {

    public static List<Integer> filterOddNumbers(List<Integer> numbers) {

        //우리가 먼저 해야 하는건 List를 만드는 것이다 numbers를 가지고 List 호출한다 stream을 만들고 
        다음 filter를 호출한다(홀수만 걸러내게 해야함) 그리고 Collect를 호출 다시List에 담아줘야함 
        Collectors의 toList를 사용 그리고 return으로 반환해 주어야 한다 
        그리고 나머지가 1이냐 -1이냐 확인하는 대신 filter에 이렇게 써주면 됨
        return numbers.stream().filter(n -> n % 2 != 0).collect(Collectors.toList());
        
    }
}

-------------------------------------------------------------------------------
