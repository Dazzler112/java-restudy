
지난 학습에선 Thread class를 확장해서 Task1이라는 클래스를 생성하고 실행하는 작업을 해보았다 
이번 학습에선 Task2 또한 thread로써 실행해 보도록 할 것이다 이건 어떻게 해야 할까?
이번 학습에선, Runnable 인터페이스를 실행하는 접근법을 사용해 보도록 하겠다


------------------------------------------------------------------------------------


package multiThreading;

//extends Thread
//implements Runnable

class Task1 extends Thread {
	
	public void run() {//SIGNATURE

		System.out.print("\nTask1 Started");
		for(int i = 101; i <= 199; i++ ) 
			System.out.print(i + " ");
		
		System.out.print("\n Task1 Done");
	}
}

//Task2엔 Runnable 인터페이스 사용
class Task2 implements Runnable {
	@Override
	public void run() {
		System.out.print("\nTask2 Started");
		for(int i = 201; i <= 299; i++ ) 
			System.out.print(i + " ");
		
		System.out.print("\n Task2 Done");
		//여기서 주의해야 할 점이 있다 
		//시작할 때 Task2 Started가 출력되고 끝날 때 Task2 Done이 출력되며 출력되는 숫자들 범위는 201 과 299사이다
		//이 출력값이나 결과가 명확하도록 계속 확인하고 집중하여 코드 작성을 해나가는 이유는
		//여기서 코드에 의해 출력되는 결과를 보고 어떤 task들이 병렬로 실행되는지에 대해 이해할 수 있기 때문이다
		//그러므로 여기까지의 내용을 잘 이해했는지 확인해 주자!
	}
	
}

public class ThreadBasicsRunner2 {
	
	public static void main(String[] args) {

		//Task1 - 101 to 199
		System.out.print("\nTask1 Kicked Off");
		Task1 task1 = new Task1();
		task1.start();  //run() -> start()
		
		System.out.print("\nTask2 Kicked Off");
		//Task2
		//그럼 여기 Task2는 어떻게 실행해야 할까? 여기서 Task2는 사실 Runnable 인터페이스를 실행하고 있다
		//예시를 생성해보자
		Task2 task2 = new Task2(); //Task2에 대한 새로운 예시를 생성한 후에는 thread클래스를 생성해 주어야 한다
		Thread task2Thread = new Thread(task2);//만약 Runnable 인터페이스를 구현하려면 예시를 생성한 후에 Thread클래스 생성을 위한 추가적인 과정을 거쳐야 한다
		//Thread클래스를 생성하고 나면 task2Thread.start()라 적을 수 있다
		task2Thread.start();
		/*
    • 실행 과정=>
		실행 후 보면  Task1이 실행되고 숫자가 출력되기 전에 이미 Task2의 실행이 시작되었고,
		Task2의 출력이 시작되기 전에 이미 Task1의 작업이 완료되었다는 것을 확인할 수 있다
		그리고 Task3 실행의 시작되어 300등의 숫자들이 출력 되었다는 것을 알 수 있다 그리고 여기엔 다양한 종류의 숫자들이 모두 출력되었다
		344 152 153 등의 숫자 말이다 즉, 이 세가지의 task들이 이 시점에서 병렬 구조로 코드 실행이 진행되고 있다는 것이 확인 되었다
		Task3의 실행이 완료되고 조금 시간이 지난 후엔 메인 프로그램의 실행이 완료되고 나서 Task2가 완료되었다는 것을 확인할 수 있다
		
		그러니까 다시 말해 Task2는 메인 이후에 그 실행이 완료되었다는 말이 된다, ㅇㅋ?
		메인 프로그램을 실행한 후에도, 그러니까 이 부분이(//Task1 - 101 to 199) 실행한 코드의 마지막 부분이다
		Task2에 관한 코드는 전체 메인 코드의 실행이 끝난 후에 완료가 되었다
		이게 thread 기법을 사용할 떄의 장점이다, 이해하겠냐?
		
		• 장점
		우리가 할 수 있는 작업이 무엇일까?
		여기서 우리는 세 가지 모두의 작업을 한 번에 처리, 즉 병렬적으로 함께 실행을 하는 것이 가능하다
		예를 들어 서로 다른 세 가지의 thread가 있고, 이 세가지 thread는 각자 다른 작업을 수행한다고 해보자
		이 세 가지 작업을 병렬로 처리함으로써, 많은 이득을 볼 수 있다
		여기서 우리는 CPU의 최고 효율을 내며 작업을 처리할 수 있기 때문이다
		
		Task1이나 2,3의 처리 중간중간에 대기하는 중에도 계속 다른 일을 처리하며 놀거나 비는 시간 없이 지속해서 코드를 진행하는 것이 가능하기 때문이다
		이게 Thread를 이용할 때의 가장 큰 장점이다 
		*/
		
		System.out.print("\nTask3 Kicked Off");
		//Task3
		for(int i = 301; i <= 399; i++ ) 
			System.out.print(i + " ");
		
		System.out.print("\nTask3 Done");
		
		System.out.print("\nMain Done");

	}
}

------------------------------------------------------------------------------------





/*
정리)
이번 학습에선 Runnable 인터페이스의 실행 과정과,
이를 이용해 thread를 시작하는 방법에 대해 알아보았다
여기 이렇게 Task2를 생성한 다음, 추가적인 작업을 해주었다
Thread에 대한 추가적인 예시를 생성한 후에 
start()라는 메소드를 불러내서 이 세가지의 작업이 병렬적으로 함께 실행되고 있다는 사실 또한 눈으로 확인했다
*/
