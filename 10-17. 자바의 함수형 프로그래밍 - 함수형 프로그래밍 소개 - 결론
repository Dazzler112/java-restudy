
지난 몇 단계들에서 함수형 프로그래밍에 대해 소개했다
1순위, 즉 최우선 순서에 해당하는 함수에 대해 이야기해봤다
변수 안에 함수를 저장하거나, 메소드에게 전달하거나, 값으로 환원해보기도 했다

이제 이 함수형 프로그래밍이라는 개념은 정말 방대한 새로운 길들을 프로그래머들에게 재공해준다
변형(Mutation)을 이용하지 않고도 코드를 작성할 수 있게 되었다 
함수형 프로그래밍을 배우기 전에는, 숫자들의 합을 구하는 유일한 방법은 다음과 같은 방법이었다
ex)
private static int normalSum(List<Integer> numbers) {
    int sum = 0;
    for (int number : numbers) {
        sum += number;
    }
    return sum;
}

하지만 함수형 프로그래밍을 이용하면, 한 단계 성장한 방법으로 가능하다
ex)
private static int fpSum(List<Integer> numbers) {
      return numbers.stream()
                    .reduce(0, number(n1,n2) -> n1 + n2);
}

명령형 방식의 프로그래밍으로 들어가 보겠다 명력식 프로그램이라 불리는 이유는 
정확히 어떤 코드를 어떤 방식으로 실행해야 하는지 알려주기 때문이다
private static int normalSum(List<Integer> numbers) {
    int sum = 0;
    for (int number : numbers) {
        sum += number;
    }
    return sum;
}
명령식 방법에선 단순하게 실행만 하지 않는다 
여기서 숫자들의 합을 구하려고 한다 그러므로 sum이라는 변수를 선언하고, 숫자를 추가할 때마다 더해주는 작업을 해준 다음,
반환해 주는 일련의 과정을 따라주면 된다 이게 명령형 방법이다


함수형 프로그래밍은 선언형 프로그램의 방법을 허용한다 무엇을 할지만 알려주면 된다
private static int fpSum(List<Integer> numbers) {
      return numbers.stream()
                    .reduce(0, (n1,n2) -> n1 + n2);
}
두 개의 숫자를 한 쌍으로(n1,n2) 하여, 두 숫자의 합을 구한 다음 그 값을 반환해준다
함수형 프로그래밍은 한단계 위에서 프로그래밍 할 수 있도록 해준다, 
우리가 기본적으로 주로 사용하는 것의 한 단계 위 말이다
이 모든 설명에 따르면, 프로그래머들에게 함수형 프로그래밍은 매우 직관적인 것은 아니다
특히 객체 지향 프로그래밍이나 구조화된 프로그래밍과 같은 명령형 접근을 사용하는 숙련된 프로그래머들에게는 말이다 
이러한 함수형 코드를 처음 접하면 매우 복잡하다고 느껴질 것이다 맞지?
return numbers.stream().reduce(0, (n1,n2) -> n1 + n2); 여기서 어떤일이 일어나는지 이해조차 안될 것이다
왜냐하면 이런 형식의 코드 작성이 익숙하기 떄문이다 int sum =0; for(int number:numbers) {sum += number;} return sum;
❗ 그러므로 어떤 작업에 함수형 프로그래밍을 사용하려면, 
팀에 소속된 모든 사람이 함수형 프로그래밍을 사용하는 데 불편하지 않도록 하는 작업이 선행되어야 한다❗
함수형 프로그래밍에 대한 가장 중요한 점은 그 사용 범위나 지식이 바다만큼 방대하다는 것이다
이 부분만 다로 빼서 책 한권으로 작성이 가능할 정도이다 스트림에 사용이 가능한 정말 많은 메소드가 있다
현존하는 정말 다양한 스트림이 존재하고 정말 어려운 수준의 주제에 관해 토론하도록 하는 다양한 새로운 개념들도 있다
이 모든 일련의 과정은 너가 함수형 프로그래밍을 잘 이해할 수 있도록 구성한 단계들이었다
이 함수형 프로그래밍의 개념과 내용을 파악할수 있게 말이다
