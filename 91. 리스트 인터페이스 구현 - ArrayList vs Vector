
이번에는 Vector 와 ArrayList 의 차이점에 대해 알아보자
우리는 전에 ArrayList와 LinkedList의 차이점에 대해 알아봤다 그럼 언제 Vector를 사용할까? 언제 ArrayList를 쓸까?

Vector클래스를 보면 자바1 버전부터이다
하지만 ArrayList클래스는 자바 1.2 이후에나 존재하니 ArrayList가 나중에 나왔다.
그전에 리스트를 사용하고 싶을 땐 Vector를 썼어야 했다

그렇다면 Vector의 문제점이 무엇이고, 왜 ArrayList가 떠오른 것일까?
코드들 사이의 차이점을 알아보자

ArrayList와 Vector클래스에서 몇 가지 메소드들을 골라보자

Vector의 trimToSize()를 예로 들면 
---------------------
    public synchronized void trimToSize() {
        modCount++;
        int oldCapacity = elementData.length;
        if (elementCount < oldCapacity) {
            elementData = Arrays.copyOf(elementData, elementCount);
        }
    }
Vector 안에서는 동기화가 되어 있다
---------------------
---------------------
하지만 ArrayList안에는 동기화 되어있지 않다.
    public void trimToSize() {
        modCount++;
        if (size < elementData.length) {
            elementData = (size == 0)
              ? EMPTY_ELEMENTDATA
              : Arrays.copyOf(elementData, size);
        }
    }
---------------------
Vector의 모든 다른 메소드들을 봐도 , 너는 이것들 대부분 동기화(synchronized)가 되어 있는것을 볼 수 있다.

하지만, ArrayList로 가면, 이 특정 메소드들에 대해 동기화가 되어 있지 않다.

동기화된 키워드가 어떤 차이를 만들까?

예를 들어, 한 클래스 안에 25개의 동기화된 메소드들이 있다고 하자
어떤 일이 일어나냐면, 만약 이 클래스의 인스턴스가 이 Vector클래스의 인스턴스가 여러 스레드 사이에 공유된다면
스레드 중 단 하나만이 이25개의 메소드들을 실행할 수 있다.
즉,이 동기화된 메소드들 안에서는 한 순간에 오직 하나의 스레드만 코드를 실행시킬 수 있다는 것이다.
왜 그렇게 하고 싶을까?
왜냐하면 프로그램이 안전하길 바라기 때문이다
너의 프로그램은 스레드 하나가 사용하든 15개의 스레드가 사용하든 행동방식이 바뀌면 안 되고
synchronized가 그 역할을 하려 하는 것이다.

우리는 Vector와 ArrayList의 근본적 차이점이 무엇인지 보았다 
중요한 차이점은 
• Vector는 모든 메소드들이 동기화되어 있다.
- 이건 Vector가 '스레드 - 안전'하단 말이다 여러 스레드 사이 데이터를 공유하는 상황에서 Vector를 사용할 수 있다는 것이다.

class Vector implements List<E> {
  // There Safe - Synchronized Methods
  // almost constant time - access
}

하지만 ArratList는 안전하지 않다
언제나 기억해야되는 것중 하나는 안전은 공짜로 오지 않는다는 점이다
성능에 타격을 준다, 왜냐하면 스레드 하나가 동기화된 메소드를 실행 중일때
그럼 다른 스레드들은 그 스레드가 동기화된 메소드의 실행을 완료할때까지 기다릴 수 있으니까

안전이 필요하지 않는 이상 ArrayList가 더 낫다, 안전이 필요할 때는 Vector가 여러 선택지중 하나다, 
동기화는 기초적인 안전 구현방식 중 하나이다.

최근 10년 이상 동안 안전에 대한 접근법이 여러가지 발전해 왔다 자바에도 이런 선택지들을 제공한다
이것들은 동시적 모듬이라 부르고 우리는 스레드와 안전에 대해 본 후 동시적 모듬에 대해 알아보겠다

/*
정리)
Vector는 가장 기본적인 동기화를 제공하는 선택지이다 너의 코드가 안전하게 하기 위해서
안전에 대해 신경쓰지 않는다면, ArrayList를 사용하겠다
이것이 Vector와 ArrayList의 핵심 차이이다
*/
