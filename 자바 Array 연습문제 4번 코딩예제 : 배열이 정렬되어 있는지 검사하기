
코딩 예제: 배열이 정렬되어 있는지 검사하기
여러분에게 ArrayMagic 클래스 안의 미완성된 Java 메서드인 isSorted()가 제공됩니다.

그 메서드는 정수 배열을 입력값으로 받고 만일 배열이 오름차순으로 정렬되어 있다면 true를 리턴하고 
그렇지 않다면 false를 리턴할 것입니다.

그 메서드는 다음과 같은 엣지 케이스를 처리해야 합니다.

• 배열이 비어 있거나 요소가 하나만 있다면 그런 배열들은 정렬된 것으로 간주되므로 
  메서드는 true를 리턴해야 합니다.
• 배열에 음수와 0이 포함될 수 있습니다.
• 배열에 중복된 요소들이 포함될 수 있습니다.

예시

배열 [1, 2, 3, 4, 5]를 예로 들어 살펴볼까요? 
이 배열을 우리의 isSorted() 메서드에 제공하면 배열이 오름차순으로 정렬되어 있으므로 true를 리턴해야 합니다.

이제 요소가 [5, 4, 3, 2, 1]인 배열을 생각해 보겠습니다. 
이 배열의 요소들은 내림차순입니다. 
그러므로 만일 우리가 이 배열을 우리의 isSorted() 메서드에 제공하면 false를 리턴해야 합니다.


다음은 기본 로직입니다.
public class ArrayMagic {

    /**
     * This method checks if the input array is sorted in ascending order.
     * 
     * @param array the array to check
     * @return true if the array is sorted, false otherwise
     */
    public boolean isSorted(int[] array) {

        // TODO: Write code here
    }
}

다음 기본로직을 바탕으로 코드를 완성하시오.












---------------------------------------------------------------------------











힌트)











• Java에서 배열의 길이를 얻기 위해 여러분은 배열의 
 .length 속성을 사용할 수 있습니다. 
 예를 들어 만일 array가 정수 배열일 때 array.length를 쓰면 배열에 있는 요소의 개수가 나올 것입니다.

• 배열을 반복하기 위해 여러분은 for 반복문을 사용할 수 있습니다.
 여러분은 각각의 요소를 이전 요소와 비교하게 되므로 인덱스 0이 아니라 인덱스 1부터 반복을 시작해야 합니다.

---------------------------------------------------------------------------

















---------------------------------------------------------------------------














해답)















public class ArrayMagic {

    public boolean isSorted(int[] array) {
        //에지케이스 먼저 작성

      if(array.length <= 1) {//배열에 요소가 없가나 요소가 하나만 있는경우 조건
          return true;       //배열에 요소가 하나이거나 요소가 0이면 배열이 정렬되었음을 의미
      }//배열이 비어 있거나 요소가 하나만 포함된 경우 메소드가 반환해야 한다.

      //그렇지 않으면 배열의 값을 찾아야한다.
        
        for(int i = 0; i < array.length-1; i++){// 향상된 for루프는 이전값에 대한 액세스를 제공하지 않기때문에 전통적인 for루프를 사용해야함
          //하고싶은 것은 배열의 요소를 비교하는 것이다. 
          //배열의 요소가 쉼표 하나, 쉼표 둘이라 가정해보자 1, 2, 3, 4
          //따라서 정렬되었는지 확인하기 위해 해야 할 일은 이요소가 다음 요소보다 작은지 다음번에 확인해야함
          //다음은 2, 3,번을 확인해보겠다 2가 3보다 작으면 다음에는 3과 3이 4보다 작은지 비교해보겠다.
          //따라서 첫 번째 비교는 2보다 작거나 실제로 2보다 작거나 같은 하나이다, 두번째 비교는 3보다 작거나 같은2다, 세번째비교는 3보다 작거나 같은4이다, 그래서 우리는 갈 필요가없다.

          if(array[ i + 1 ] < array[i]) {//I의 배열은 I의 배열에 1을 더한 값보다 작다
            return false;            //조건을 이렇게한 이유는 10,8 ,3,4라 할때 10과 8비교해서 앞의 조건(i+1)이 크면 false를 리턴하게 하려고한것.
          }                          //다른 예로 1,10,4,5라고 하면 1과 10 비교하면 ok 다음넘어가서 10,4 비교 10더큼 그러면 false나오게 만들게 한것(오름차순으로 나오게 하려는 조건)
        }
            return true;
    }
}


배열이 정렬되었는지 확인하는 로직을 작성했다 여기 있는 모든요소가 오름차순이면 정렬된 것이다.
---------------------------------------------------------------------------
