
이번 학습에선 리스트에 대한 몇가지 수수께끼를 보자

리스트를 하나 만들어 보자
List value = List.of("A",'A',1,1.0);
이런식으로 만드려고 하면 어떤 일이 벌어질까? 문자열,char, 숫자1, 1.0을 넣었을때 어떤일이 벌어질까?

jshell> List value = List.of("A",'A',1,1.0);
value ==> [A, A, 1, 1.0]
리스트가 생성이 되었다

그리고 value.get(2)를 시도하면 어떤 일이 벌어질까?

jshell> value.get(2);
$2 ==> 1

1을 출력한다
만약 instanceof 를 해서 인스턴스 종류를 알아내려 한다면 instanceof Integer라 하면?

jshell> value.get(2) instanceof Integer;
$3 ==> true
참이라고 되돌려준다

value.get(2)에서 생성된 것은 정수가 아닌데, 정수라고 한다 도대체 무슨일이 벌어지는 것일까?
깊숙히 알아보도록 하자

• List의 AutoBoxing

중요한 것 중 하나는, 리스트 안에는 기초 요소들을 보관할 수 없다는 점이다

List value = List.of("A",'A',1,1.0) 에서 1자리에 1을 저장하려 하고 있지 문자 'A'는 기초요소이다 1.0은 부동 소수점 상수이다
어떤 일이 일어나고 있는건가? 어떻게 이것들을 저장할 수 있는 것일까? 생각해보자

래퍼 클래스에 대해 이야기할때 무언가 배웠다 오토박싱(Auto Boxing)이라는 개념이다
리스트를 만드려 할 때 일어나는 일은 이것들이 다 오토박싱되어 래퍼 클래스가 생성되는 것이다.
List.of("A", 'A', 1, 1.0)의 1 이것의 경우, 래퍼 클래스가 정수이다, 문자 'A'의 경우, 래퍼클래스가 Character이다 마지막 get(3)의 경우 부동 소수점 상수는 Double이다

jshell> value.get(1) instanceof Character;
$4 ==> true

jshell> value.get(3) instanceof Double;
$5 ==> true
 
이제 'A'이건 Character로 오토박싱 된것이다, 1 이것은 정수로 오토박싱되었고, 1.0 이것은 더블로 오토박싱된 것이다.
여기서 우리는 다양한 값들의 리스트를 만들고 있다. 문자열, 문자, 정수, 그리고 더블

• Generic(일반화) 기초
만약 니가 이걸 허용하고 싶지 않다면 리스트에서 특정한 종류의 값만 갖게 하고 싶다면
여기서 Generic(일반화)<>가 사용된다
List<String> value

이제 내가 하는 것은, 문자열의 리스트만 저장하고 싶다..
List<String> textValues = List.of("A",'A',1,1.0)
실행하면 어떻게 될까?
jshell> List<String> textValues = List.of("A",'A',1,1.0);
|  Error:
|  incompatible types: inference variable E has incompatible bounds
|      equality constraints: java.lang.String
|      lower bounds: java.lang.Double,java.lang.Integer,java.lang.Character,java.lang.String
|  List<String> textValues = List.of("A",'A',1,1.0);
|                            ^--------------------^
당연히 실패한다
이것의 설명은 더블,정수,문자를 저장하려고 시도한 것이다 이것들은 문자열 안에 허용되지 않는다

그래서, 만약 너가 List<String> textValues = List.of()라 한다면 너느 이 리스트에 문자열 값들만 저장할 수 있다
다른 종류의 값들을 저장할 수 없다 

제너릭(일반화)에 대해 나중에 조금 더 학습하게 되면 일반화를 이용한 메소드와 클래스 생성에 대해 이해하게 될 것이다.

지금 당장은 만약 Lsit<String>이라 하면 이 안에 문자열 값들만 저장할 수 있는것이고
또다른 중요한 점은 리스트 안에는 기초 요소를 저장할 수 없다는 것이다 모든것은 오토박싱이 된다

• Index

정수의 리스트를 만들어보도록 하자

jshell> List<Integer> numbers = List.of(101, 102, 103, 104 , 105);
numbers ==> [101, 102, 103, 104, 105]
간단한 정수형 리스트를 만들었다
만약 indexOf(101)을 하면 어떤일이 벌어질까? indexOf(101), 무엇이 출력될까?

jshell> numbers.indexOf(101);
$7 ==> 0
0이라고 한다, 왜냐하면 이 101을 사용해 검색하기 때문이다
박싱을 한 다음 요소를 찾고 인덱스를 0으로 되돌려주는 것이다.

이제 이것을 가진채로 ArrayList를 만들고 싶다.. 왜냐면 여기 안에 들어있는 값들을 변경하고 싶기 때문이다
jshell> List<Integer> numbersAl = new ArrayList<>(numbers);
numbersAl ==> [101, 102, 103, 104, 105]
이 숫자들이 존재하는 새로운 ArrayList를 만들었다

이제 numbersAl.indexOf(101)이라 쓰면 
jshell> numbersAl.indexOf(101);
$11 ==> 0
달라진 점이 없다 101이 0번 위치에 있기 때문에 0을 되돌려준다.

이 리스트에서 숫자 101을 제거하고 싶다면, 과연 numbersAl.remove(101)이라 할 수 있을까?
jshell> numbersAl.remove(101);
|  Exception java.lang.IndexOutOfBoundsException: Index 101 out of bounds for length 5
|        at Preconditions.outOfBounds (Preconditions.java:64)
|        at Preconditions.outOfBoundsCheckIndex (Preconditions.java:70)
|        at Preconditions.checkIndex (Preconditions.java:266)
|        at Objects.checkIndex (Objects.java:359)
|        at ArrayList.remove (ArrayList.java:504)
|        at (#14:1)
IndexOutOfBoundsException 인덱스 범위 밖에 있다고 나온다 왜일까?

indexOf() 메소드에서 일어나는 것은 오버로드된 메소드가 indexOf()를 위해선 없다는 것이다
객체를 받아들이는 단 한 가지 메소드가 있을 뿐이다

무엇이 일어나고 있냐면, 이 101은 정수로 오토박싱 되었고 너는 정수를 검색했다
하지만, 너가 remove() 메소드를 보게 되면 jshell에서 remove(하고 탭을 누르면 메소드가 두가지 있는것을 볼 수 있다
------------------------------------------
Signatures:
boolean List<E extends Object>.remove(Object o)
E List<E extends Object>.remove(int index)
------------------------------------------
하나는 객체를 받아들이고, 다른것은 인덱스를 받아들이고, 그래서 니가 101이라 했을때 어떤 일이 벌어지냐면
이 메소드(boolean List<E extends Object>.remove(Object o))를 사용하고 101을 정수로 오토박싱 하는 대신에 무엇을 하냐면, 
이 메소드(E List<E extends Object>.remove(int index))와 연결해서 101을 인덱스로 사용해 버리는 것이다

그래서, 만약 요소 101을 지우고 싶다면 Integer.valueOf(101)이라 치고, 정수를 만들어낸 다음에야 제거를 할 수 있는 것이다
jshell> numbersAl.remove(Integer.valueOf(101));
$15 ==> true

new Integer(101)을 사용했을 수도 있지만 우리가 래퍼 클래스에 배운대로, Integer.valueOf()가 훨씬 더 효율적이다

이제 numberAl을 출력하면 101이 제거된 것을 볼수 있다.
jshell> numbersAl
numbersAl ==> [102, 103, 104, 105]


/*
정리)
이 학습에선, 우리는 리스트에 관한 몇가지 신기한 수수께끼들을 알아보았다
리스트를 가지고 놀아보았고 조금더 이해해보려 했다
*/
