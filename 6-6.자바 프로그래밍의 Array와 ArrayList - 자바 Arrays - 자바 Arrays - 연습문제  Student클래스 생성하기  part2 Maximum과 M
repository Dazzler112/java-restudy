
-------------------------------------------------------------------------------------------

클래스 파일 1번


package arraysTraining;

import java.math.*;

public class StudentRunner {
	
	public static void main(String[] args) {
		
		//int[] marks = new int[5];
		int[] marks = {97,99,100};
		
		Student student = new Student("Ranga", marks); 
		
		int number = student.getNumberOfMarks();
		System.out.println("number of marks : " + number);
		
		int sum = student.getTotalSumOfMarks(); 
		System.out.println("sum of marks : " + sum);
		
		int maximumMark = student.getMaximumMark();
		System.out.println("maximum of marks : " + maximumMark);
		
		int minimumMark = student.getMinimumMark();
		System.out.println("minumum of marks : " + minimumMark);
		
		BigDecimal average = student.getAverageMarks();
		System.out.println("average : " + average);
	}
}


-------------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------------

클래스 파일 2번


package arraysTraining;

import java.math.*;

public class Student {

	private String name; //네임을 받는 string
	private int[] marks; //정수배열을 갖는 marks를 만듬

	public Student(String name, int[] marks) {
		
		this.name = name;
		this.marks = marks;
	}

	public int getNumberOfMarks() {
		
		return marks.length;
	}

	public int getTotalSumOfMarks() {
		int sum = 0;            
		for(int mark : marks) { 
			sum += mark;        
		}  
		
		return sum;
	}

	public int getMaximumMark() { //1.최대값을 어떻게 구할까?
		//2.최대값을 구할 때 마크에 반복문을 사용해서 
		//int maximum = 0;//4.여기를 maximum으로 고치고 0부터 시작하면 된다. 그리고 다음과 같이 구문을 적어주자 //값예시로 95 98 10이라고 해보자
			//!여기서 조금더 나아가면 0을 사용하는 대신 정수 MIN_VALUE를 사용할 수도 있다.
		int maximum = Integer.MIN_VALUE; //최소값으로 시작하면 음수에 대해서도 이 메소드가 작동할 것이다. //일반적으로 이런 상황에서 마크가 음수가 나오진 않겠지만, 아무도 모를일이다.
		for(int mark : marks) {//3.최대 값을 구할 때 마크값 중 가장 큰 값이 어떤 건지 찾으면 된다.
			if(mark>maximum){//5.
			
				maximum = mark;
			}
		}
		return maximum;
	}	


	public int getMinimumMark() {
		//최소값은 어떻게 찾을수 있을까?
		//위에 코드를 복붙하고 maximum으로 사용된것을 minimum으로 바꿔야하는대 일일이 하나씩 바꿔야 할까?
		//스프링(이클립스는 메뉴가 살짝 다르지만 비슷함) 기능의 Refactor > rename 으로 maximum이라는 변수를 minimum으로 한번에 바꿀수 있다.(변수의 모든 사용명을 변경한다) 
		int minimum = Integer.MAX_VALUE; 
		for(int mark : marks) {
			if(mark < minimum) {
				minimum = mark;
			}
		}
		return minimum;
	}

	public BigDecimal getAverageMarks() {
		// 평균을 구하기 위해서는
		//sum(합계)을 구하고
		//total(전체수)를 구한다음 나누면 된다 이게 일반적인 평균 구하는 방식이다
		//완전한 함수를 여기에 적용해도 되고 더 좋은건 이미 여기 있는 걸 사용하는 것이다.
		int sum = getTotalSumOfMarks();
		int number = getNumberOfMarks();
		
		//메소드를 입력했다면 돌려받을 값에 대한 코드를 이렇게 입력한다.
	//	return new BigDecimal(sum / number); //하지만 소숫점이 출력되지 않는다 왜 그럴까?
							 //합을 개수로 나눈다는게 정수 연산을 한다는 말이다 합도 숫자이고 개수도 숫자이다.
							 //그래서 숫자 간의 연산으로 본다. 간단하게 아는 방법은 이렇다.
	//	return new BigDecimal(sum).divide(new BigDecimal(number));//이 특정 값을 가장 정확하게 구하는 방법은 이것이다. 
		//하지만 exception이 뜬다 왜그럴까? 값은 98.66666... 무한으로 나온다 즉 정확히 정의할 수 없다는 것이다 그냥 불가능이다. 소수점이 무한으로 붙는 상황이다 그래서 예외라 표시되는 것이다
		//이문제를 해결할 수 있는 방법은 'Precision(정확도)'모드 또는 'Rounding(반올림)'모드를 사용하는 것이다.
		//이런 상황일 때, 어느 소수점 자리까지 원하는지 정확하게 정해줘야 한다.
		//여기서 소수점 3자리까지 나타내 보자 98.666 까지만 나오게 할 것이다. 666은 반올림해서 98.667이 된다.
		//만약 정확도를 3으로 준다면 이경우 98.667이 된다. 하지만 'Precision(정확도)'값만 주는 건 충분하지 않다.
		//98.6665 를 예로 들어보면 정확도를 3으로 줬다면 소수점 세 자리까지 보여줘야 한다는 건데 이 경우 소수점수가 667이 될까 666이 될까?
		//자바API가 6665가 666이 될지 667로 반올림할지 어떻게 알까? 이럴 때 사용하는게 반올림모드이다. //즉 올림을 할지 내림을 할지 정해줘야 한다.
		return new BigDecimal(sum).divide(new BigDecimal(number), 3, RoundingMode.UP); //나누는 값의 합을 내는것 만큼이나 정확도를 명시하는것이 중요하다
	}

}

-------------------------------------------------------------------------------------------
