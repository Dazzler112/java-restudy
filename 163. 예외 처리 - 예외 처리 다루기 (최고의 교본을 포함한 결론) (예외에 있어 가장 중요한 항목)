
이번에는 예외 처리에 있어 가장 중요하다고 생각한 것들을 추려 복습을 해보도록 하겠다
이것들이 교육자 경험에 따르면 고려해 주어야 하는 중요한 것들이다


                                                                                                Exception Handling Best Practices
● Never Hide Exception (예외를 숨기지 말라)
● Do not use it for flow control
● Think about your user
● Think about your support team
● Think about the calling method
● Have global exception handling

가장 첫번째 항목은 무엇일까?
1. 예외를 숨기지 말라는 내용이다 맞지?
   만약 어떤 예외적인 상황이 발생하면, stack trace 전부를 log에 넣어줘라, 정말 큰 도움이 될 것이다
   또한 맥락을 넣어보력로 시도해 보기 바란다, 함께 보았던 예시 중 CurrenciesDoNotMatch에 대해 알아볼 때 실제로 알맞지 않는 통화들의 목록을 적어 보았다
   이런 식으로 맥락을 살펴보는 것은 예외를 다루는 데 있어 매우 큰 도움이 된다
   예외를 숨기려고 시도하는 순간, 이를 해결해야 하는 입장에서는 어디에서 시작을 해야 하는지 조차 감이 안잡힐 확률이 매우 크다
   뭔가 잘못되었다는 사실은 알고 있지만, 어떤 줄에서 예외가 발생한 건지 알 수가 없다 맞지?
   어떤 줄에서 예외가 발생한 것인지 알지 못한다면 매우 매우 어려운 과정이 된다
   그러므로 context와 stack trace 이 두 가지는 어떤 사람이 예외를 해결하든지 간에 나중에 가면 더욱 중요해지는 두 가지 요소이다

2. 두 번째는, flow Ctrl을 위해서는 사용하지 말라는 항목이다
   그러므로 예외적인 상황을 redirect traffic으로 처리할 수도 없고, if-else 문처럼 사용할 수 있는 것 또한 아니다 맞지?
   이런 식으로 사용하지 말아라 왜냐하면 예외를 처리하는 작업은 매우 비싼 작업이 되기 때문이다 자원을 소비하게 되므로 flow Ctrl을 위해서는 사용하지 말아 달라

3. 예외를 다루는 데 있어서 가장 중요한 것은 사용자를 염두에 두는 것이다
   예외가 생기게 되면 사용자는 어떤 것을 보고 싶어 할까? 최종 사용자는 어떤 것을 보고자 할까? 이 사용자는 이 상황에 대해 무엇을 할 수 있을까?
   그러므로 항상 코드를 작성할 때 어디서 잘못될 수가 있는지, 그리고 만약 코드가 잘못 굴러갈 때 최종 사용자에게 어떻게 설명해야 할 지를 생각해 보아야 한다
   이에 대해 고민하는 이상, 잘하고 있는 것이다

4. 그리고 이 외에서 지원팀에 대한 배려도 필요하다 
   너의 최종 사용자로부터 연락을 받을 사람들 말이다 팀에서는 오류 해결을 위해 어떤 정보를 미리 알고 있어야 할까?
   지원팀에도 개발자가 있을 확률이 높아 log나 logging chain이 끝 맺어지는 곳에 대한 정보를 얻고자 하는 사람이 분명히 있을 것이다

5. calling 메소드에 대해서도 꼭 생각해라
   API를 디자인하고 있다면 예외 상황에 대해 calling 메소드가 할 수 있는 일이 무엇이 있을까?
   만약 checked exception으로써 예외 상황을 떠넘기게 된다면, 
   그리고 이 상황에 대해 calling 메소드가 할 수 있는 일이 없다면 무언가 잘못되고 있을 것이다
   Spring framework에 해주는 일 중에서 최고인 것은 대부분의 예외를 RuntimeException으로써 다루게 해준다는 것이다
   그러므로, calling 메소드가 이에 대해 다룰 필요가 없다
   
   여기서 해야 할 가장 중요한 질문은 'calling 메소드가 예외에 대해 반응하도록 하는 방법이 없는가?'이다
   해결할 방법이 있을까? 만약 없다면, 그냥 다음 메소드에 떠넘기는 것이 하는 일의 전부라면, 
   RuntimeException으로 만들 필요가 없는지 고민해 봐라 unchecked의 형태로 만들어 주는 것이다

6. 마지막으로, global exception handling을 해줘라
   예를 들어, main으로부터 시작하는 10,000줄의 코드가 있다고 해보겠다
   main에는 바깥세상으로 예외를 넘기고 있지는 않은지 꼭 확인 하기 바란다 
   또한, main이 예외를 올바르게 해결하는지, 그리고 이 예외가 main으로 넘겨지고 있지는 않은지 확인이 필요하다
   비슷한 예로, web application을 개발하고 있다면, 모든 것들을 관장하는 무언가를 설정하도록 해줘라 
   global exception handling과 같은 것을 말이다 그래야 사용자에게 예외가 직접 전달되는 일이 없어진다
   사용자에게는 항상 예외에 대해서 올바른 메시지만 출력이 되어야 한다 예외에 대해 무엇을 할 수 있는지를 알려야 한다
   최종 사용자는 stack trace로 할 수 있는 것이 없을 것이다 맞지?
   그로므로 너가 사용자에게 보여주어야 하는 것은 좋은 메시지이므로 오류 stack trace에 넣어두어서 
   최종 사용자가 지원팀과 이야기를 나눌 때 원하는 답을 얻을수 있도록 해야 한다






/*
정리)
여기까지 예외에 대처하는 가장 좋은 방법들이다
이 중 몇가지는 실행하기 쉽지 않다는 점 잘 알지만, 가장 중요한 것은 이 항목들을 
꼭 염두에 둬야 한다는 것이다 너의 사용자나 지원팀, 그리고 calling 메소드를 계속 염두에 두는 태도를 가지면,
이것만으로 예외를 다루는데 필요한 모든 것을 갖추게 될 것이다
*/
