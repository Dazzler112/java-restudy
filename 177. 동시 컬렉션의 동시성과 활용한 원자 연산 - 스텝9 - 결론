
• synchronized와 lock
concurrency에 대한 이번 파트의 강의에선 synchronized를 사용하는 것으로 시작해서 
counter를 동기화하는 방법과 synchronized를 사용할 때의 장단점, 그리고 BiCounter에 대해 알아보았다
BiCounter는 synchronized keyword에 의해 문제가 발생하는데, 이를 lock을 사용하여 해결할 수 있었다
BiCounter를 lock을 이용하여 실행해 보았고, 

• AtomicInteger
그다음 AtomicInteger에 대한 내용으로 넘어갔었다
		private AtomicInteger i = new AtomicInteger();
		private AtomicInteger j = new AtomicInteger();
기본적인 atomic operations를 위해 lock을 사용하는 이런 종류의 implementation은 atomic 클래스와 같은 방법으로 제공된다고 배웠다
atomic 클래스의 한 종류가 바로 AtomicInteger이다 AtomicLong과 이와 다양한 것들에 대해서도 이야기해보았다

• Concurrent Collections
그리고 나서 Concurrent Collections에 대한 내용으로 들어갔었다
    ConcurrentMap<Character, LongAdder> occurrances = new ConcurrentHashMap<>();
		String str = "ABCD ABCD ABCD";
Concurrency map에 대해 알아보고, concurrency HashMap에서 전체 HashMap을 다수의 지역을 쪼개는 예시 또한 살펴보았다
이는 다른 지역에 따라 다양한 lock을 보장함으로써 concurrency를 받쳐주었다
이를 통해 더욱 효과적인 성과를 얻었다

• IfAbsent
그러고 나서 IfAbsent와 같은 것을 산출하는 atomic operation에 대해서도 함께 알아봤었다
for(char character:str.toCharArray()) {
	occurrances.computeIfAbsent(character, ch -> new LongAdder()).increment();

		}
		System.out.println(occurrances);
Atomic operation과 같은 것들은 thread-safe 코드를 훨씬 더 쉽게 작성할 수 있도록 보장한다

• CopyOnWrite
그다음으로 CopyOnWriteArrayList에 대해 살펴보았다 

public class CopyOnWriteArrayListRunner {
	
	//add - copy
	//get
	
	public static void main(String[] args) {

		List<String> list = new CopyOnWriteArrayList<>();
		
		//Threads - 3
		list.add("Ant");
		list.add("Bat");
		list.add("Cat");
		
		//Threads - 10000
		for(String element:list) {
			System.out.println(element);
		}
	}
}
CopyOnWriteArrayList가 특정한 시나리오에 알맞다고 이야기했었는데
write가 매우 적고 read가 매우 많은 경우에 효율적이다 
CopyOnWrite는 write operation만 동기화하는데, 이유는 수정 사항을 포함하여 전체에대한 복사본을 저장하기 때문이다
이는 수정된 사항이 무엇이든 간에 이에 대한 새로운 array를 생성하면 get()메소드나 read()메소드를 굳이 동기화 해야 할 필요성이 사라졌다
