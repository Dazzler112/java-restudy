
이번 학습에선 스트림에 실행될 수있는 중간 연산을 배워보겠다
중간 연산에는 정렬, 중복, 제거하기 같이 다양하다 
또는 한 요소를 다른 요소로 매핑하는 것도 있다

간단한 정수 리스트를 만들어 시작해 보자
jshell> List<Integer> numbers = List.of(3,5,8,213,45,4,7);
numbers ==> [3, 5, 8, 213, 45, 4, 7]

우선, 이 값을 정렬해서 출력해보자
어떻게 하지? 정렬을 사용한다 어떤 결과가 나올까?
값이 있는 또 다른 리스트가 나오겠지?
즉, 스트림을 정렬하면 또 다른 스트림이 나온다 중간 연산이다.

• sorted 메서드
어떻게 할까?
numbers.stream().을 입력하고 목적이 뭐지? sorted()를 입력한다 
그리고 forEach를 입력하고 각 요소가 출력되게 e->syso()에 e 를 입력한다 e->syso(e)
jshell> numbers.stream().sorted().forEach(e -> System.out.println(e)); //어떻게 될까?
3
4
5
7
8
45
213
정렬해서 값을 출력해보니 맞다
스트림 안에서 정렬하는 방법이다 
즉, 스트림 안에 sorted라는 메서드가 있는데 이것은 모든 숫자를 받아, 정렬하고,
그리고 출력되게 forEach로 보내는 것이다


• distinct
이제 다른 숫자 목록을 만들어 보자
코드가 작동하는지 확실하게 보기 위해 중복 요소를 만들것이다.
3과 5를 중복 요소로 하고 중복 제외 요소를 알아내고 싶은 것이다
jshell> List<Integer> numbers = List.of(3,5,3,213,45,5,7);
numbers ==> [3, 5, 3, 213, 45, 5, 7]
어떻게 해야할까? 사용할 함수는 distinct이다
jshell> numbers.stream().distinct().forEach(e -> System.out.println(e));
3
5
213
45
7
그럼 3,5,213,45,7 이 보인다 중복된 수가 제거된게 보이지?
❗ 중요한 건 리스트에 존재하는 순서대로 출력된다는 것이다 ❗

• 중간 연산 혼합
이제, 몇 가지 중간 연산을 추가할 수도 있다 
즉, distinct 뒤에 sorted를 넣을수도 있다
jshell> numbers.stream().distinct().sorted().forEach(e -> System.out.println(e));
3
5
7
45
213
이제 중복 제외인 값이 정렬됐다

❗ 중요한 점은 스트림에 실행할 수 있는 중간 연산의 갯수는 제한이 없다는 것이다.❗
❗ 당연히 종단 연산은 한 개 밖에 없겠지? ❗
마지막에 기입해, 스트림이 소모되던가 하나의 결과로 줄여지던가 해야 한다.
리스트로 줄이는 순간, 그것이 최종 결과인 것이다
/*
지금까지 정리)
정리하면, 스트림은 여러 개의 중간 연산을 가질 수 있다
*/


• Map
이 학습에서 배워볼 마지막 중간 연산은 맵이다
예를 들어, 리스트에서 요소를 받ㅊ아 중복 제외된 값을 찾고 그 숫자의 제곱을 출력해보겠다
즉, 숫자를 그대로 출력하는게 아니라, 그 제곱값을 출력하는 것이다
중복 제외인 숫자를 찾고 제곱을 하는 것이다 어떻게 해야할까?
그리고 각 요소의 맵이 있어야겠다 목적이 뭐였지? 
여기에 e*e를 입력할 것이다 제곱으로 매핑하는 것이다
jshell> numbers.stream().distinct().map(e-> e * e).forEach(e -> System.out.println(e));
9
25
45369
2025
49
실행해 보면 요소의 제곱이 나온다
원하면, distinct, sorted 그리고 제곱도 할 수 있겠다




/*
정리)
이번 학습에선 스트림에서 실행할 수 있는 다양한 중간 연산을 배워보았다
distinct, sorted, map 연산을 배웠다
*/
