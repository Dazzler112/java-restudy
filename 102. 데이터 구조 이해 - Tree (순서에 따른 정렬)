
지난 시간에는 몇 가지 데이터 구조에 대해 공부했다
우리는 배열에서 시작했고 LinkedList도 봤고 그리고 HashTable도 봤고, 
이제 우리는 Tree라는 또 다른 데이터 구조에 대해 알아볼 것이다 

Tree의 대단한 점은, 요소의 순서를 정해 저장하는데 도움을 준다는 것이다
다양한 종류의 Tree가 존재한다 이 예시에서는 우리는 Red-Black Tree라는 것을 사용할 건데
세세한 것은 그다지 중요하지 않다 제일 중요한 것은 데이터가 어떻게 Tree에 저장되는지
이 Tree에 어떻게 저장되는지가 중요하다

이 Tree를 보면 모든 요소들의 왼쪽에 있는 요소는 그 요소보다 작고, 한 요소의 오른쪽에 있는 모든 요소들은 그 요소보다 더 큰것을 볼수 있다


                                Tree

                               | 0045 | 
                        ↙                      ↘
                ❗ 0035 ❗                         ❗ 0060 ❗
             ↙           ↘                      ↙           ↘
     | 0030 |           | 0040 |         | 0050 |          | 0065 |
    ↙                                                              ↘
❗ 0025 ❗                                                         ❗ 0080 ❗   

45를 기준으로 왼쪽에는, 35,30,25,40 오른쪽에는,50,60,65,80으로 모든 숫자가 더 크다
여기 ❗ 0035 ❗를 본다면, 왼쪽에는 30과 25, 오른쪽에는 40이 있다,
❗ 0060 ❗의 경우에도 같다 왼쪽은 작고 오른쪽은 크다, 그리고 65를봐도, 오른쪽은 80, 더 큰 숫자이다

만약 여기서 63을 삽입한다고 한다면, 어디에 삽입해야 할까? 65의 왼쪽에 삽입 되겠지 그래서, 여기가 63이란 요소가 들어갈 곳이다
Tree는 너가 데이터를 순서있는 방식으로 저장하는 것을 도와준다

만약 너가 이 Tree중 제일 작은 요소를 찾고 싶다면, 단지 왼쪽으로, 왼쪽으로 왼쪽으로 가면 제일 작은 요소를 찾을수 있다
제일 큰 요소를 찾고 싶다면, 오른쪽으로 ,오른쪽으로 제일 큰 요소가 나올떄 까지 가면 된다.

즉, 더 큰요소, 더 작은요소, 정리된 요소를 Tree안에서 찾는건 매우 쉽다
그리고 삽입과 제거와 검색 작업도 그다지 소모적이지 않다
65가 존재하는지 안하는지는 바로는 대답할 수 없다 일렬의 작업을 통해야 한다

• Tree 검색 예시
65를 찾고 있다고 하자 
45에서 시작해서 65는 45보다 더 크니까 오른쪽 하위 트리를 검색해야겠지
이제 여기에 오면, 65는 더 크니까 그러면 더 오른쪽으로 65에 닿을 때 까지 가면 되겠다
그렇게 이 세가지 작업들로 검색을 할 수 있다.
삽입과 제거를 수행할 때도 똑같다




/*
정리)
즉, 이 Tree에서는 세 가지나 네 가지 작업이 존재한다 Tree는 검색,제거,그리고 삽입의 소모성을 줄여주는 데 도움이 된다, 
데이터를 정렬된 방식으로 유지하면 된다.
그래서 너는 정렬된 상태의 데이터를 그대로 둔 채 효율적인 검색을 할 수 있는 것이다, 

전의 여러 단계에서는 여러 데이터 구조의 큰 그림을 보여줬다, 
우리는 배열, LinkedList, HashTable 그리고 이 학습에선 Tree에 대해 학습했다
다음 학습에선 우리는 컬렉션에 대해 다시 학습할 것이다
*/
