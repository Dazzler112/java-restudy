

모듈화를 계속해보자, 사실 제대로 시작하지도 않았다
아직 문제조차 제대로 준비되지 않았다,
이제 이 둘이 각각 다른 팀에서 구축됐다고 해 보자
그러니까 알고리즘, 유틸리티를 각각 다른 팀에서 구축하고, 컨슈머도 다른 팀에 있는 것이다
그리고 유틸을 만들 당시 당신은 consumer가 MySortingUtil을 직접 사용할 거라고 예상한다

그런데 컨슈머 쪽 프로그래머 한 명이 이 유틸을 사용하는 대신 알고리즘을 바로 사용하기 시작한다고 해보자
이게 어떻게 가능한 걸까?
동일 프로젝트 내 jar 파일 하나에 모든 게 다 들어있으니까 어렵지 않을 일이다
MySortingUtilConsumer클래스를 복사 붙여넣기 하고 이름을 DirectConsumer로 하겠다 
누군가 정렬 유틸을 거치는 대신 직접 버블소트를 불러오려고 하는 것이다
이런 사용법은 의도한 바와 맞지 않는다, 모두 정렬 유틸을 사용하는 게 맞다
게다가 너가 제공한 그 유저 인터페이스를 누군가가 직접 버블소트로 쓴다고 해보자

--------------------------------------------------------------------------------------------------------------------------


⏺ DirectConsumer 클래스파일


package com.in28minutes.consumer;

import java.util.*;
import java.util.logging.*;

import com.in28minutes.sorting.util.*;

public class DirectConsumer {

	private static Logger logger = 
			Logger.getLogger(DirectConsumer.class.getName());
	
	public static void main(String[] args) {
//1: 이런 거다, "정렬 유틸은 쓰고싶지 않아, 난 버블소트를 쓰고 싶어", 그래서 =new BubbleSort를 입력하고 자동import한다, 이렇게 프로그램을 돌려봐도 아무런 문제가 없다
		BubbleSort util = new BubbleSort();
		
		List<String> sorted = 
				util.sort(List.of("Ranga", "Ravi", "Sathish", "Adam", "Eve"));
		
		logger.info(sorted.toString());
	}
}

--------------------------------------------------------------------------------------------------------------------------  
                                                                                              |
                                                                                              V
--------------------------------------------------------------------------------------------------------------------------

출력 결과 ==>

5월 22, 2024 8:20:11 오후 com.in28minutes.consumer.DirectConsumer main
정보: [Ranga, Ravi, Sathish, Adam, Eve]

--------------------------------------------------------------------------------------------------------------------------

버블소트와 정렬 유틸은 유사한 인터페이스를 제공하기 때문이다
그래서 버블소트를 여기서 바로 사용할 수 있는 것이다

자, 이제 문제점을 찾아보자

package com.in28minutes.sorting.util;

import java.util.*;
import com.in28minutes.sorting.algorithm.*;

public class MySortingUtil {

	public List<String> sort(List<String> names) {
		BubbleSort bubbleSort = new BubbleSort();	
		return bubbleSort.sort(names);
	}
}

너는 MySortingUtil을 만든 사람이지, 그러니 어쩌면 알고리즘을 다른 걸로 교체하고 싶을 수도 있다
그런데 이러면 어떻게 되겠냐

그 컨슈머는 여전히 버블소트를 사용하고 있을 거고,

package com.in28minutes.sorting.util;

import java.util.*;
import com.in28minutes.sorting.algorithm.*;

public class MySortingUtil {

	public List<String> sort(List<String> names) {
		BubbleSort bubbleSort = new BubbleSort();	
		return bubbleSort.sort(names);
	}
}
너가 여기 퀵소트를 구현해도 사용하지 않을 것이다

여기가 바로 모듈화가 엄청나게 중요해지는 지점인데 
만약 여기에 공개 파일과 클래스들을 두면 컨슈머들이 이 공개 클래스들을 사용할 수도 있다 
여기 있는 MySortingUtil이나 다른 공개 클래스들을 모두 쓸 수 있다
여러 개의 jar 파일로 쪼개도 마찬가지이다
한번 쪼개볼까? 어떻게 하는지 보자

신규 프로젝트를 눌러서 신규 자바 프로젝트를 생성해준다
제목은 modularization_2_service_jar 로 하겠다 이건 모듈화에 관계된 서비스 jar이 되겠지? 다음을 누르고
module-info 파일을 생성하지 않도록 체크를 풀어준 다음 완료한다 
이렇게 해서 modularization_2_service_jar가 생성되었고 

파일을 누르고 이어서 새로운 프로젝트를 만들어준다
이것의 이름은 modularization_3_consumer_jar로 한다 이것도 다음으로 넘어가서 체크를 해제하고 마치겠다

이제 서비스와 컨슈머 각각의 jar 파일이 두 개 생겼다
이제 알고리즘 패키지 와 유틸리티 패키지를 서비스 jar에 복사해서 modularization_2_service_jar에 붙여넣기 해주자
이제 여기에 알고리즘과 유틸 패키지가 생겼다
modularization_2_service_jar에는 서비스 패키지가 생겼고 

컨슈머 패키지는 컨슈머 jar로 옮기기 위해 modularization_1_combined 에 있는 consumer 패키지를 복사 붙여넣기 해준다
이러면 이제 com.in28minutes.consumer에 컴파일 에러가 생긴다 왜 에러가 생긴 것일까?
이 jar가 이 프로젝트에( modularization_2_service_jar ) 접근할 수 없기 때문이다
DirectConsumer.java, MySortingUtilConsumer.java 이것들이 정의된 위치가 어디지? modularization_2_service_jar에 정의되어 있다

그렇다면 modularization_2_service_jar 프로젝트 접근 권한은 어떻게 부여할까?
modularization_3_consumer_jar의 클래스 부분에 modularization_2_service_jar를 추가하면 된다
modularization_3_consumer_jar 오른쪽 클릭 > properties(설정)을 클릭하고 > 좌측에 Java Build Path 메뉴로 들어간다 여길 보면
Project탭이 있고 Classpath를 선택한 다음 Add.. 버튼을 눌러서 > modularization_2_service_jar를 체크하고 추가해준다
이걸로 서비스 jar를 컨슈머 jar에 추가했다
적용 및 닫기를 눌러서 나오면 컴파일 에러가 사라져 있다

그리고 이 프로그램을 돌려보기 위해, 지금 니가 클릭한 위치를 열고 우클릭후 자바 어플리케이션으로 구동하기를 눌러보면
--------------------------------------------------------------------------------------------------------------------------

modularization_3_consumer_jar 출력화면 ==> 

5월 22, 2024 9:12:37 오후 com.in28minutes.consumer.DirectConsumer main
정보: [Ranga, Ravi, Sathish, Adam, Eve]


--------------------------------------------------------------------------------------------------------------------------
성공적으로 돌아가는 것을 볼 수 있다

다시 다른 프로그램을 자바 어플리케이션으로 구동해봐도 성공적으로 돌아간다
본것과 가이 방금 정렬 유틸리티를 사용할 수 있었고, 타 프로젝트인 modularization_3_consumer_jar의 정렬 알고리즘도 사용했다
또, 별도의 자바 프로젝트를 생성해서 클래스를 사용해도 컨슈머가 알고리즘을 정적으로 사용하지 않는 것을 막을 방법은 없다


다음 강의에선 모듈화를 본격적으로 다뤄보고, 모듈화가 제시하는 해결책이 어떤 것인지 알아보자
