
코딩 예제 – 애너그램 검사기

여러분에게는 2개의 문자열 str1과 str2가 주어져 있습니다. 
여러분의 과제는 str1과 str2가 서로 애너그램인지 판정하는 것입니다.

애너그램이란 단어나 문구의 글자를 재배열하여 만들어진 단어나 문구를 가리킵니다. 
일반적으로는 원래의 글자를 정확히 한 번 사용합니다. 
예를 들어 단어 “listen”은 “silent”의 애너그램이고 “hello”는 “olelh”의 애너그램입니다.

여러분은 StringMagic클래스의 areAnagrams(String str1, String str2) 메서드를 구현해야 합니다. 
이 메서드는 만일 str1과 str2가 서로 애너그램이면 true를 리턴하고, 그렇지 않으면 false를 리턴합니다.


엣지 케이스:
• 비교할 때 대소문자는 가리지 않습니다. 즉 “Listen”과 “Silent”는 애너그램으로 간주해야 합니다.
• str1또는 str2가 null이라면 메서드는 false를 리턴해야 합니다.
• str1과 str2의 길이가 같지 않아도 메서드는 false를 리턴해야 합니다.

입력 형식 :
이 메서드는 2개의 매개변수를 받습니다.

• str1- String
• str2- String

출력 형식 :
이 메서드는 다음을 리턴해야 합니다.

• true- str1과 str2가 애너그램인 경우.
• false- str1과 str2가 애너그램이 아닌 경우.


지침 :
두 문자열이 애너그램인지 검사하기 위해
• 문자열들을 소문자로 변환합니다.
• 문자열들의 길이가 다른지 검사하여 만일 그렇다면 false를 리턴합니다.
• 문자열들을 문자 배열로 변환합니다.
• 문자 배열을 정렬합니다.
• 정렬된 배열이 같으면 true를 리턴합니다. 그렇지 않으면 false를 리턴합니다.


Java 라이브러리 메서드 :
도움이 되는 메서드 몇 개를 소개해 드립니다.

• string.toLowerCase() – 문자열에 있는 모든 문자를 소문자로 변환합니다.
• string.toCharArray() – 문자열을 새로운 문자 배열로 변환합니다.
• Arrays.sort(charArray) – 지정된 배열을 숫자 오름차순으로 정렬합니다.
• Arrays.equals(charArray1, charArray2) –지정된 두 문자 배열이 서로 같으면 true를 리턴합니다.

이 문제를 푸는 데 이 메서드들이 아주 유용하고, 여러분의 구현물에서 사용하시기를 권해 드립니다.


해당 코드는 기본 뼈대입니다

import java.util.Arrays;

public class StringMagic {

    public boolean areAnagrams(String str1, String str2) {
        
    }
}


코드를 이용하여 지침을 완성하시오









--------------------------------------------------------------------









힌트)









· 힌트 1: 먼저 특수한 사례들을 처리합니다. 
  입력된 문자열이 null이면 어떻게 될까요? 애너그램이 될 수 없습니다. 그렇죠?

· 힌트 2: 애너그램은 대소문자를 가리지 않습니다. 
  즉 “listen”과 “Silent”는 애너그램입니다. 그러므로 두 문자열을 같은 대소문자로 변환하십시오.

· 힌트 3: 두 문자열이 애너그램이면 정확히 같은 글자가 포함되어 있어야 합니다. 
  즉 문자열의 길이가 반드시 같아야 합니다. 이걸 이용해서 일부 경우에 함수에서 조기에 리턴할 수 있을까요?

· 힌트 4: 두 문자열이 애너그램인지 검사하는 쉬운 방법은 문자들을 정렬하고 결과가 같은지 알아보는 방법입니다.
  Java에는 문자열을 문자 배열로 변환하는 내장 메서드(toCharArray())와 
  배열을 정렬하는 메서드(Arrays.sort())가 제공되어 있습니다.

· 힌트 5: 문자 배열이 정렬되었으면 Arrays.equals()를 사용하여 직접 그것들을 비교할 수 있습니다. 
  그것들이 같다면 원본 문자열들은 애너그램입니다!

--------------------------------------------------------------------













--------------------------------------------------------------------
















해답)








import java.util.Arrays;

public class StringMagic {

    public boolean areAnagrams(String str1, String str2) {
        //조건부 먼저 실행
        if (str1 == null || str2 == null) { //NULL값이면
              return false;
        }
        if(str1.length() != str2.lenth()){ //길이가 같지 않으면
              return false;
        }
        //조건은 모두 만족함 하지만 아직도 지시사항이 많음
        //첫번째 지시문 -> 문자열들을 소문자로 변환하라 //대소문자 상관없이 비교할 수 있게 하기 위한 작업이다
        //변수를 선언해 줄것이다
        String lowercaseStr1 = str1.toLowerCase();  //문자열 타입으로 str1을 소문자로 변환 //라이브러리 메소드를 이용, 문자열에 toLowerCase를 호출해주면 문자열 모든 글자를 소문자로 바꿔준다
        String lowercaseStr2 = str2.toLowerCase();  //str2도 추가
        
        //다음 조건은 문자열을 문자형 배열로 변환하고 정렬하라 그리고 정렬된 배열을 비교하라는 것
        //이게 무슨말이냐면, 예를들어 hello 먼저 이걸 문자들로 바꿔주는 것이다//h,e,l,l,o 이렇게//다음 할 일은 정렬이다 그럼 어캐될까? // 먼저e가오고 그리고 h,l,l,o가된다// 정렬한 다음 그 다른 문자열과 비교해야한다
        //그 다른 문자열도 방금 한 것과 같은 작업을 거치고 그 다음 비교가 진행된다
        char[] charArray1 = lowercaseStr1.toCharArray(); //먼저 문자배열을 선언
        char[] charArray2 = lowercaseStr2.toCharArray();

        //이어서 배열들을 정렬하기 위해 Arrays.sort를 호출하고 빠진 글자를 넣어주고
        Array.sort(charArray1);
        Array.sort(charArray2); //이렇게 정렬을 수행
        //배열 안에서 정렬이 수행되는 것이고 ,
       
        //이제 비교를 한다
        return Arrays.equals(charArray1, charArray2); //결과를 불린형 변수에 저장하거나 아니면 그냥 바로 반환해 버려도 되고 로직은 간단함
    }
}

--------------------------------------------------------------------


/*
정리)
조건 부분을 먼저 구현했고 
문자열을 소문자로 바꿨고 
그다음 문자형 배열로 전환하고 정렬했고 ,
그다음 정렬된 문자형 배열 두 개가 완전히 같은지 비교했다
같다면 둘은 아나그램인 것이다
이렇게 아나그램을 확인하는 로직을 구현하는 방식 하나를 배웠다
*/
