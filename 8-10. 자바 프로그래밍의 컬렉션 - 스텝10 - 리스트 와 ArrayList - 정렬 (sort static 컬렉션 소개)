
이제는 중점을 수자들의 리스트를 정렬하는 것으로 옮겨보도록 하자

jshell> List<Integer> numbers = List.of(123, 12, 3, 45);
numbers ==> [123, 12, 3, 45]
숫자들의 리스트를 생성

정렬을 하고 싶으면, 무엇을 해야 할까?
ArrayList를 만들어야 겠지? 불변적 리스트니까

그럼 참조변수를 List<Integer> numbersAl = new ArrayList<>(numbers);
jshell> List<Integer> numbersAl = new ArrayList<>(numbers);
numbersAl ==> [123, 12, 3, 45]

• 정렬(sort)
정수 ArrayList안에 정렬 메소드가 있는지 확인해보자,
jshell> numbersAl.sort()
|  Error:
|  method sort in interface java.util.List<E> cannot be applied to given types;
|    required: java.util.Comparator<? super java.lang.Integer>
|    found:    no arguments
|    reason: actual and formal argument lists differ in length
|  numbersAl.sort()
|  ^------------^
비교자가 필요하다고 말하고 있다, 그래서 비교자가 무엇일까? 조금있다 설명

기본적으로, 리스트 인터페이스 안의 정렬 메소드를 사용하고 싶다면 비교자를 사용해야 한다

지금 당장, 또다른 정렬 메소드가 존재한다는 것이 중요하다
우리는 정렬을 직접적으로 ArrayList메소드의 리스트 메소드를 이용해 해보려 했다

다른 메소드를 봐보자
다른 방법은 Collections.sort이다 여기에는 너가 정렬하고 싶은 ArrayList를 통과시킬 수 있다

Collections.sort(numbersAl); 이건 정적 메소드이다
Sort는 Collections안에 존재하는 정적 메소드이고, numbersAl은 너가 정렬하길 바라는 집합이다

jshell> Collections.sort(numbersAl);
이렇게 하고 이제 numbersAl을 출력해보자

jshell> numbersAl
numbersAl ==> [3, 12, 45, 123]
정렬되었다

이것이 정렬을 하는데 있어 기본적으로 인기있는 방법이다, Collections.sort()말이야


• 

이제 조금 더 복잡한 클래스를 만들어보도록 하자
이제는 그저 숫자들을 리스트에 저장하는 것 대신 우리가 할 것은, 특정 클래스의 객체들을 저장해 볼 것이다


------------------------------------------------------------------------------------

Student 클래스 파일


package collectionsTraining;

public class Student {
	//문자열 name추가 //평상시와 같이 폐쇄형으로 만들기
	private int id;
	private String name;
	
	// 그리고 생성자 생성
	
	public Student(int id, String name) {
		super();
		this.id = id;
		this.name = name;
	}

	//Getter, Setter 도 생성
	
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	} 
	
	
	public String toString() {
		return id+ " " + name; //몇개의 집합이다 문제될건 없다. //다시 StudentCollectionRunner로..
	}
	//가장 기본적인 메소드들을 생성했음 이제 StudentCollectionRunner에서 학생들 리스트를 생성하자
	//StudentCollectionRunner클래스로...
	//toString을 넣어주자
}


------------------------------------------------------------------------------------





------------------------------------------------------------------------------------

StudentCollectionRunner 클래스파일

package collectionsTraining;

import java.util.*;

public class StudentCollectionRunner {

	public static void main(String[] args) {
		
		//제너릭엔 Student를 넣고 List.of() 메소드를 사용하자 new Student에는 새 학생을 만들 수 있겠지
		List<Student> students= List.of(new Student(1, "Ranga"),
										new Student(100, "Adam"),
										new Student(2, "Eve"));
		
		//System.out.println(students);를하면 무엇이 출력될까? 생각해보자
		
//		System.out.println(students);
		
		/*
		  출력==>
		  [collectionsTraining.Student@7c30a502, collectionsTraining.Student@49e4cb85, collectionsTraining.Student@2133c8f8]
		 */
		
		//결과를 개선하고 싶다 학생클래스로가자 //Student클래스로...
		
//		System.out.println(students);
		
		//Student클래스에 toString 메소드를 추가했으니 다시 실행해보자
		/*
		 출력 ==> [1 Ranga, 100 Adam, 2 Eve]
		 */
		
		//이제 이 학생의 리스트를 정렬하고 싶다.. 학생들의 ArrayList를 만들어보자
		
		ArrayList<Student> studentAl = new ArrayList<>(students);
		//중요한 것 중 하나는, 예시에서 ArrayList를 쓰는 이유는 기본적이기 때문이다
		//집합에 대해 이야기하면, 우리 생각에 첫째로 드는 것은 ArrayList다
		//이것이 우리가 ArrayList를 사용하는 이유이다
		//이 예시들에서는 너가 LinkedList나 Vector를 사용해도 아무 문제 없이 같은 결과를 받았을 것이다. 성능이 조금씩 다를수는 있지만 결과물은 완벽히같다
		
						    //이제 studentAl에 있는 학생들을 정렬하고 싶다.. 어떻게 할까? 저번에 쓴것 기억하지?

• sort중 문제점 발생
		Collections.sort(studentAl); //컴파일 에러가 나온다 마우스를 띄워 구현을 열면 비교가능한 인터페이스 구현만 통과될 수 있다고 나온다..
					    	//ArrayList를 Comparable인터페이스를 구현하는 클래스들만 통과시킬 수 있다 정수에선 어떻게 작동한걸까?
					    	//자바에 ctrl + shift + t를 눌러서 Integer검색후 들어가 Compare 관련 들어가서 맨 아래에 들어가면 이런 메소드가 있다.

• compareTo 메소드 설명
						    // public int compareTo(T o); 이것은 어떻게 두 가지의 같은 종류의 객체를 비교하는지 정의한다 우리가 여기서 구현하는 것이다
		
	}

}

------------------------------------------------------------------------------------


• sort의 사용해야 하는 방식 (아직 해결법X)
/*
정리)
너가 두 숫자를 정렬하고 싶으면 어느것이 더 큰지 알아야 한다 두 학생들을 정렬하고 싶으면 어느것이 더 큰,작은지 말해줘야 하고
우리는 그것을 위해 Comparable인터페이스를 쓴다 
정수 문자열 클래스들은 이미 Comparable 인터페이스 구현을 제공하는것을 봤다 
우리가 Collections.sort()에서 그들을 사용할 수 있었던 이유이다
하지만 학생의 경우에는, 우리가 Comparable 인터페이스를 직접 구현해야 한다
어떻게 하는지는 다음 학습에서 보도록 하자
*/
