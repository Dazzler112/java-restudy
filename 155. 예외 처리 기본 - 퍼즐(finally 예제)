
이번 학습에선 예외를 다루는 방법에 대한 몇 개의 퀴즈들에 대해 설명하도록 하겠다 

//Will finally be executed in the program below?
  private static void method2() {
      Connection connection = new Connection();
      connection.open();
      try{
          //Logic
          String str = null;
          str.toString();
          return;
      } catch (Exception e) {
      } finally {
          connection.close();
      }
  }
첫 번째 문제를 시작해 보도록 하겠다
여기서 질문은 finally가 프로그램의 마지막에서 실행이 되는지 안 되는지 알아내면 된다
즉, connection.close()가 여기 현존하는 프로그램에서 실행이 될까? 되지 않을까?
한 번 생각해 보자, 만약 어떤 예외의 사례가 던져진다면, 결국에 마지막에서 코드는 실행이 될까?
이 문제에는 작은 함정이 존재한다 

일단 여기서 정확히 어떤 일이 벌어지고 있는지 봐야한다
connection을 생성해 주고, open을 이용해 열어준 다음, try를 이용해 이 부분에서 발생하는 NullPointerException을 파악한다
그래서 만약 NullPointerException이 발생하면, finally는 무조건 실행이 될 것이다, 맞지?
이게 finally의 존재 이유이다, 하지만 만약 이 코드가 NullPointerException을 던져주지 않는다면 어떨까?
다시 말해 이 부분에 'str ='로 시작하는 이 코드가 존재하지 않고, 제대로 된 값이 병합된다면 말이다
즉, str이 올바른 문자형 값을 갖게 되는 것이다
그리고 이에 대해 예외적인 상황은 던져지지 않았다 이런 상황에서도 finally가 실행될까?
그리고 try부분에 return statement 또한 존재한다 여기서 반환을 요구하고 있는 것이다 
finally는 여기서 실행이 될까?, 되지 않을까? 

정답은 yes로, finally는 여기서 실행이 된다
정리하자면 예외가 존재하든, 반환해야 하는 값이 존재하든, 심지어 예외가 존재하지 않아도 
❗ finally는 실행이 된다 ❗



그렇다면 finally는 어떤 코드 환경에서 실행이 안 될까?
finally를 포함한 한 줄의 코드가 실행되지 않는 경우는 언제일까?

전에 배웠던 코드를 예시로 살펴보겠다 ㅇㅋ?

---------------------------------------------------------------------------------------------


package exceptionHandling;

import java.util.*;

public class FinallyRunner2 {

	public static void main(String[] args) {

		Scanner scanner = null;
		try{
			scanner = new Scanner(System.in);

			int[] numbers = {12, 3, 4, 5};
			int number = numbers[21];
			
		} catch (Exception e){
			//여기서는 JVM crash라는 행사가 발생한다 어떤 예외적 상황이 발생하고, 이를 처리하고자 할 때 바로 이 시점에서 JVM이 충돌한다
			//JVM crash는 System.exit라 적고 괄호 안에 1을 적어서 작동시킬 수도 있다 그리고 이 코드는 시도 하지 말것을 추천한다...(시도하지 마라..)
			//❗❗ 집에서 이 코드 절대 시도하지 말아라 너의 컴퓨터에 존재하는 응용 프로그램들이 망가지게 될것 ❗❗
//			System.xit(1); //혹시 모를 위험을 위해 단어 한개 지움
			/*❗ 주의 ❗
			exit 설명은 web application 혹은 JavaEE application에 이를 적어주게 된다면
			너의 서블렛 뿐만 아니라 전체 응용 프로그램들과 충돌하게 될 것이다 
			여기 보다시피 현재 작동중인 Virtual Machine을 끝내는 기능을 한다는 것이 적혀있다..
			!절대 시도하지 말아라!
			*/
			//그래서 System.exit를 불러내면 finally 코드 또한 작동이 되지 않는다,
			e.printStackTrace();
		
		} finally {
			//finally를 포함하여 어떻게 작성이 될 때 실행이 안 될까?
			//syso가 예외적인 상황을 만들어 준다고 해보겠다 이 특정한 경우에만 실헹되지 않는다
			//그 전의 코드 내용이 예외를 포기하고 있다면 말이다 딱 한 가지 시나리오가 더 존재하기는 하다 //catch block으로..
			System.out.println("Before Scanner Close");
			
			if(scanner != null) {
				scanner.close();
			}
		}
		System.out.println("Just before closing out main");

	}
}

---------------------------------------------------------------------------------------------
이게 이 퍼즐에 대한 답이 된다



다음 퍼즐은
//Will finally be executed in the program below?
  private static void method2() {
      Connection connection = new Connection();
      connection.open();
      try{
          //Logic
          String str = null;
          str.toString();
          return;
      } finally {
          connection.close();
      }
  }
이 코드가 컴파일될까? 이다
보다시피 여기 try가 존재하고, finally또한 적혀있다
여기서 빠진게 뭘까?
