public class Dimension {
    private int feet;
    private int inches;
    
    public Dimension(int inches) {
        //25 inches (인치를 피트와 인치로 변환해야한다!)
        //12 inches = 1 foot
        //25 inches = 2foot 1 inches
        // TODO: Convert the total inches into feet and inches. One foot is 12 inches.
        // Store the feet and inches in their respective instance variables.
    }
    
    public int getFeet() {
        // TODO: Return the value of feet.
        return -1;
    }
    
    public int getInches() {
        // TODO: Return the value of inches.
        return -1;
    }    
}

----------------------------------------------------------------------------------------------------------
예문)
코딩 예제: 인치를 객체로(피트, 인치)
이 문제에서 여러분은 측정치를 피트와 인치로 나타내는 Java Dimension클래스 구현물을 완성해야 합니다.

다음은 Dimension클래스의 기본 골격입니다.

public class Dimension {
    private int feet;
    private int inches;
    
    public Dimension(int inches) {
        // TODO: Convert the total inches into feet and inches. One foot is 12 inches.
        // Store the feet and inches in their respective instance variables.
    }
    
    public int getFeet() {
        // TODO: Return the value of feet.
        return -1;
    }
    
    public int getInches() {
        // TODO: Return the value of inches.
        return -1;
    }    
}
과제

여러분의 과제는 Dimension(int inches)생성자와 Dimension클래스 안의 getFeet()및 getInches() 메서드를 구현하는 것입니다.

Dimension(int inches)- 이 생성자는 inches(정수)라는 매개변수 하나를 받고, 주어진 인치를 피트와 인치로 변환해야 합니다. 
입력된 인치가 0보다 작으면 피트와 인치를 -1로 설정해서 유효하지 않은 입력임을 나타내야 합니다. 1피트는 12인치와 같습니다.

getFeet() - 이 메서드는 생성자로부터 계산한 피트를 리턴해야 합니다.

getInches() - 이 메서드는 나머지 인치 수(12 미만)를 생성자로부터 리턴해야 합니다.

예시

다음은 Dimension클래스를 구현했을 때 클래스가 어떻게 작동해야 하는지를 보여주는 예입니다.



Dimension dim = new Dimension(25);
System.out.println(dim.getFeet());    // Output: 2
System.out.println(dim.getInches());  // Output: 1
위의 예에서 25인치는 2피트 1인치와 같습니다.

Dimension dim = new Dimension(-1);
System.out.println(dim.getFeet());    // Output: -1
System.out.println(dim.getInches());  // Output: -1
위의 예에서 -1인치는 유효하지 않은 입력값이므로 getFeet()와 getInches() 모두 -1을 리턴합니다.

그럼 행운을 빕니다!

----------------------------------------------------------------------------------------------------------

힌트)

인치를 피트와 인치로 변환하기: 총 피트 수는 총 인치 수를 12로 나누어서 계산할 수 있습니다(1피트는 12인치이므로). 
나머지 인치 수는 12를 사용하여 나머지 연산자(%)를 쓰면 계산할 수 있습니다. 그러면 나머지가 나오고, 그게 1피트보다 작은 인치 수입니다.

음의 입력값 처리하기: 입력값 인치 수가 0보다 작은 경우, 유효하지 않은 입력임을 나타내기 위해 피트와 인치를 모두 -1에 설정합니다.

getFeet()와 getInches() 메서드: 이 메서드들은 그냥 각각의 인스턴스 변수를 리턴할 것입니다.

위의 힌트를 활용하여 Dimension클래스 구현물을 완성해 보세요.

그럼 행운을 빕니다!













----------------------------------------------------------------------------------------------------------
해답)
public class Dimension {
    private int feet;
    private int inches;
    
    public Dimension(int inches) {
        // 25/12 = 2를반환함!
        // 25%12 = 1을반환
        if(inches < 0){
            //feet = -1;   // 1. 이렇게 하면 0을 반환한다 이유? feet = -1; 이라고 했는대 로컬변수에 설정을 하고있기 때문! 멤버변수에 설정하지 않았다!
            //inches = -1; // 1. 이렇게 하면 0을 반환한다 이유? inches = -1; 이라고 했는대 로컬변수에 설정을 하고있기 때문! 멤버변수에 설정하지 않았다!
            this.feet = -1;   //2. 이렇게 안전하게 this를 사용하여 멤버변수에 할당해준다!
            this.inches = -1; //2. 이렇게 안전하게 this를 사용하여 멤버변수에 할당해준다!
        }else{
           this.feet = inches/12;
            this.inches = inches % 12;
        }

        //25 inches (인치를 피트와 인치로 변환해야한다!)
        //12 inches = 1 foot
        //25 inches = 2foot 1 inches
        // TODO: Convert the total inches into feet and inches. One foot is 12 inches.
        // Store the feet and inches in their respective instance variables.
    }
    
    public int getFeet() {
        return feet;
    }
    
    public int getInches() {
        return inches;
    }    
}
