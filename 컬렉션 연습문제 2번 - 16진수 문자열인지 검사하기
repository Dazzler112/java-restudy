코딩 예제 – 16진수 문자열인지 검사하기

이번 문제에서는 MyString 클래스와 String변수 str, 
그리고 isHexadecimalChar(char ch)와 isHexadecimal()이라는 2개의 메서드가 제공됩니다.

여러분은 이 메서드들을 완성해야 합니다.

여기서 문자열은 숫자(0 ~ 9)와 문자 A ~ F(대소문자 불문)만 포함되어 있는 경우에만 유효한 16진수로 간주됩니다.

문자가 유효한 16진수 문자(A ~ F 또는 a ~ f)일 경우, 
isHexadecimalChar(char ch) 메서드는 true를 리턴해야 하고, 
그렇지 않으면 false를 리턴해야 합니다.

만일 문자열 str이 유효한 16진수 문자열이면isHexadecimal()메서드는 true를 리턴해야 하고, 
그렇지 않으면 false를 리턴해야 합니다.


• 엣지 케이스

- 문자열이 비어 있거나 null인 경우, isHexadecimal()메서드는 false를리턴해야 합니다.
- isHexadecimalChar(char ch) 메서드는 대소문자를 모두 처리해야 합니다.

• 예시

-"123F" => true"A23g" => false.


• 참고사항

- Character.isDigit(char ch) 메서드는 문자가 숫자인지 검사합니다.
- String.toCharArray() 메서드는 문자열을 문자 배열로 변환합니다.
- 관계 연산자 >= 과 <=을 사용하여 어떤 문자가 특정한 범위 안에 있는지 검사합니다.
- ASCII에서 소문자와 대문자의 차이에 유의하십시오. ‘a’ ~ ’f’와 ‘A’ ~ ’F’는 다른 범위에 있습니다.


다음은 기본 코드 뼈대입니다

public class MyString {

    public String str;

    public MyString(String str) {
        this.str = str;
    }
    
    public boolean isHexadecimalChar(char ch) {
        // Write your code here
    }

    public boolean isHexadecimal() {
        // Write your code here
    }

    
}

해당 코드로 지시사항을 완료하시오










-------------------------------------------------------------------------------------









힌트)












힌트 1: 여러분은 Character클래스의 isDigit함수를 사용하여 어떤 문자가 숫자인지 검사할 수 있습니다.
힌트 2: 어떤 문자가 유효한 16진수 문자인지 검사하기 위해서는 
        16진법 체계에 0 ~ 9의 숫자와 A ~ F(또는 a ~ f)의 문자가 포함되어 있다는 사실을 기억하십시오. 
        문자의 ASCII 값 범위를 이용하여 검사할 수 있습니다.
힌트 3: 입력 문자열이 null 또는 비어 있는 엣지 케이스를 잊지 말고 처리하십시오.
힌트 4: String 클래스의 toCharArray함수를 사용하여 문자열의 문자 배열을 얻을 수 있고, 
        그걸 반복하여 각각의 문자를 검사할 수 있습니다.
힌트 5: 16진수 검사는 대소문자를 가리지 않는다는 점을 기억하십시오. 즉 ‘A’ ~ ‘F’와 ‘a’ ~ ‘f’는 16진법에서 같습니다.


-------------------------------------------------------------------------------------













-------------------------------------------------------------------------------------












해답)














//먼저 isHexadecimalChar 부터 보자
public class MyString {

    public String str;

    public MyString(String str) {
        this.str = str;
    }
    
    public boolean isHexadecimalChar(char ch) {
        //a-f A-F 확인하고 결과를 반환해야함
        return (
               (ch >= 'a' && ch <= 'f') ||         //a-f 범위에 있는지 확인
                                                   //         ||
               (ch >= 'A' && ch <= 'F')            //A-F 범위에 있는지 확인
                );//이 두 조건중 하나라도 충족한다면 true를 반환하게 됨 //아니면 불린형 변수를 별도로 만들고 그 변수의 값을 반환하게 할 수도 있긴 하다
       //isHexadecimalChar가 a,b,c,d,e,f중 하나이거나 대문자나 소문자인지 확인한다
    }

    public boolean isHexadecimal() { //여기가 핵심로직을 구현한다, 문자열 전체를 확인하는것임
        //먼저 해야할 것은 명시된 조건 부분을 만족시키는 것

        //먼저 false를 반환하는 조건, 빈 문자열이나 null 문자열이 주어졌을때!
        if(str == null || str.equals("")) {
            return false;
        }
        //이어서 확인할 것 문자열을 구성하는 모든문자를 대상으로 확인해야하고, 16진수인지 확인해야한다
        //어떻게 해야 할까? 간단하다 for문을 써준다
        for(char ch : str.toCharArray()) {//문자열 str을 toCharArray로 변환한 문자형 배열을 대상으로, char타입ch를 확인한다
            //이 함수는 문자형 배열을 반환하고, 그걸가지고 for반복문을 이용해 순회한다 //이렇게 각 문자를 취득하게 되고
            //확인해야 할 건 취득한 문자가 A-F나 a-f범위, 또 0에서 9까지 범위에 안 들어가는지이다 안들어가면 false를 반환
            //이 범위 중 하나에 들어가면 다음 문자로 넘어가고 그 다음 문자로 넘어가고 또 다음 넘어가고 이런식으로 배열 끝 까지 순회한다
            //확인하는 작업을 해보자

            if(!isHexadecimalChar(ch) && !Character.isDigit(ch)) {//부정연산자에 isHexadecimalChar를 호출// 숫자인지 어떻게 확인할까(관련 메소드가 주어졌다)
                return false;  //위의 2개가 관련된것이 아니면 false를 출력
            }
        }
            //만약 참이라면 유요한 16진수면 반복문 다시 돌고 모든 문자 확인하고 반복문 다 돌고 나면 true를 반환한다
            return true;
    }

    
}

-------------------------------------------------------------------------------------


/*
정리)
이번 실습에선 isHexadecimalChar 메소드를 구현했는데 매우 간단하다 
주어진 문자가 a-f, A-F인지 확인한다 
그리고 isHexadecimal 문자를 구현했다 
여기서 확인하는건 문자열이 16진수 문자로만 구성돼 있는지이다
그래서 먼저 명시된 조건부터 확인했다
해당 조건이 만족여부를 확인한 후에 문자열을 문자형 배열로 변환했다 그리고 문자 하나하나 확인했다
대문자 A에서 F, 소문자 a에서 f 그리고 숫자인지 보고 이 범위에 해당하지 않으면 대상 문자는 유효한 16진수 문자가 아닌거다 그래서 false를 반환했음

문자마다 다 확인을 진행했다 문자열을 구성하는 모든 문자를 대상으로 유효한 16진수 숫자나 문자인지를 확인하고 성공하면 true를 반환하는 것이다
*/
