

이번 단계에선 동기화 접근, 즉 synchronized approach에서 생길 수 있는 문제점들을 살펴보겠다 ㅇㅋ?


-------------------------------------------------------------------------------------


🟢 BiCounter 클래스파일


package concurrency;

public class BiCounter {
	//여기에선 두개의 변수를 적어주도록 하자 private int i = 0 과 private int j = 0이다
	private int i = 0;
	private int j = 0;
	
	//incrementI 이 메소드를 복사해서 incrementJ와 동기화 하겠다 특정 시점에서 단 하나의 thread만이 j++를 실행할 수 있도록 한다
	//우리는 여기서 Counter와 비슷한 논리를 가져왔다 Counter의 접근 방식을 가져와 BiCounter를 생성한 것인데 이는 매우 간단한 예시이다
	//이제 생각을 해 보자 이 접근의 문제점은 무엇일까? 너에게 두 개의 메소드가 있고 동기화되어 있다면, incrementI()와 incrementJ()라는 두 개의 메소드 모두 동기화가 되어야 겠지?
	//이 둘을 동기화시키는 과정의 문제점은 무엇일까?
	//여기 동기화된 메소드는 두 thread중 하나만 실행하는 것이 가능하다 ( synchronized public void incrementI () { i++; } )
	//그러므로 하나의 thread는 incrementI()를 기다리고, 다른 thread는 incrementJ()를 기다리고 있겠지 이 두 연산이 전혀 다르다고 해도 말이다 그러므로 i++은 j++에게 전혀 영향을 주지 않는다
	//두 메소드 모두 단 한개의 thread만이 실행이 허용된다 이게 메소드가 두 개일 때 벌어지는 상황이다
	//10과 15라는 동기화 메소드가 현재 실제로 존재하고, 엄청난 수의 thread가 메소드에 실행되기 위해 대기하고 있는 상황을 상상해 보도록 하자
	//이는 매우 중대한 performance impact를 남길 것이다
	//기본적으로 동기화를 사용하는 것의 가장 큰 문제점은 전체 동기화된 코드를 단 한 개의 thread만 실행할 수 있다는 것에 있다
	//즉, 구체적인 예시로 동기화된 코드들이 매우 많이 존재하고, 이는 꽤 중대한 영향력을 끼치게 될 것이다 
	synchronized public void incrementI () {
		i++; 
		//get i 
		//increment 
		//set i 
	}
	
	synchronized public void incrementJ () {
		j++; 
		//get j 
		//increment 
		//set j 
	}

	public int getI() {
		return i;
	}
	
	public int getJ() {
		return j;
	}
		
}

-------------------------------------------------------------------------------------



/*
다음 학습에선 이의 해결책에 대해 이야기해보도록 하겠다
*/
