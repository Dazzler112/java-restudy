
이전 학습에서 다뤘던 연습문제는 홀수만 총합을 출력하는 것이었다.
어떻게 해야 할까?


reduce 전에, filter를 호출하는 간단한 방법이다 숫자가 홀수일 때만 통과를 허용하게 만드는 것이다
즉, 숫자가 통과하기길 허용되는 전제는 number%2 ==1일 경우만이지
int sum = numbers.stream()
                 .filter(number -> number%2 ==1 )
                 .reduce(
				         0,
				         (number1, number2) -> number1 + number2
                 );
         System.out.println(sum);
        //==> 출력 31
총합 31인데, 13에 3을 더해16, +15 해서 31이 된다

지금 무엇을 한 것일까 숫자를 스트림 한것이다 filter 함수를 호출해
논리를 를 보내 홀수를 걸러내고 ( .filter(number -> number%2 ==1 ) )
그리고 reduce를 이용해 합친 것이다 



이제 위 와 아래 코드를 비교해 보자

private static int fpSum(List<Integer> numbers) {
		return numbers.stream().reduce( 0, (number1, number2) -> number1 + number2);
	}

	private static int normalSum(List<Integer> numbers) {
		int sum = 0;
		 for(int number : numbers) {
		 	sum += number;
		 }
		return sum;
	}

그러면, 이 두 메서드의 차이점이 무엇일까?
함수형 프로그래밍이 어떻게 다를까? 
1. 예제
가장 큰 차이점 하나는 sum 변수값이다 sum 변수 초기값은 0이다 그리고 숫자를 루프할 때마다 총합이 증가한다
즉, 합의 값은 루프할 때마다 계속 바뀌는 것이다(sum += number;) <- 이것을 변이(Mutations)라고 부른다
합의 값이 계속 바뀐다 이 프로그램은 변이가 있는 것이다
2.예제
또 다른 부분을 보겠다
int sum = 0;
		 for(int number : numbers) {
		 	sum += number;
		 }
return sum;
이 부분은 합을 어떻게 할지 정확하게 표현해 주는 것이다 0으로 초기화하고, number를 루프한 다음
sum += number; 숫자하나를 대입하여 더하고 그 값을 리턴 하라는 것이다

함수형 프로그래밍에선 사실 이걸 신경 쓰지 않아도 된다 단지 숫자의 흐름(stream())을 가지고 
하나씩 더하라는( (number1, number2) -> number1 + number2) ) 것이다
그럼 숫자 쌍을 가지고 뭘 해야지? 더하는 것이다 
단지 그 뿐이다 지역 변수나 루프 사용법을 신경 쓴 게 아니다 
❗ 즉, 그저 뭘 할지를 말한 것이다 ❗
더하는 거였다

구조적 프로그래밍은 뭘 할지 뿐 아니라 하는 방법에 대해서도 말하고 있다
지역변수를 만들고(int sum =0;) 
각 숫자를 더하고, 일시적 변수에 저장하고  ( for(int number : numbers) {sum += number; } )
마지막으로 값을 리턴하는 것이다 ( return sum; )

차이점
1. 
함수형 프로그래밍과 일반 절차적 프로그래밍의 두 가지 큰 차이점은
함수형 프로그래밍 에서는 변수 변이르 피한다는 것이다
즉, 값이 변하는 변수를 굳이 넣지 않는다
2.
두 번째는 뭘 할지에 중점을 둔다
즉, 모든 숫자 쌍을 더하고 숫자가 몇개가 있든 상관없이 계속 더해나가는 것이 뭘 할 지라는 것이다
어떻게 하는가는 신경 쓰지 않는다 

여기서는(for문) 어떻게 하는지 알려주고 있다
배열에서 각 숫자를 받아, 계산된 합의 값에 더하고 전체 매서드 끝에서 합을 리턴하는 것이다

함수형 프로그래밍에선 이럴 필요가 없다




/*
결론)
이번 학습 목적은 함수형 프로그래밍 접근법을 일반 절차적 접근법과 비교하는 것이다
*/
