
클래스파일 1번 -------------------------------------------------------------------------

package classMethodEncapsulation;

public class MotorBike {
	//state
	private int speed; 
	
	MotorBike(int speed){ //1. 생성자를 생성할때 클래스명과 똑같아야 한다(소/대문자 까지 같아야함)
		this.speed = speed;
	}
	
	//behaviour
	//method
	//inputs - int speed
	//outputs - void
	//name - setSpeed
	void setSpeed(int speed) { 
		if(speed > 0)
		this.speed = speed;
	}
	
	int getSpeed() {
		return this.speed;
	}
	
	public void increseSpeed(int howMuch) {
//		this.speed = this.speed + howMuch;
		setSpeed(this.speed + howMuch);
	}
	
	public void decreseSpeed(int howMuch) {
//		if(this.speed - howMuch > 0)
		setSpeed(this.speed - howMuch);
	}
	
	void start() {
		System.out.println("Bike Started");
	}
}

---------------------------------------------------------------------------------------

클래스파일 2번 -------------------------------------------------------------------------

package classMethodEncapsulation;

public class MotorBikeRunner {
	public static void main(String[] args) {
		MotorBike ducati = new MotorBike(100); //2. 이렇게 초기에 값을 줄수있음 ( 출력해보면 이값먼저 보여주고 아래의 값들 호출)
		MotorBike honda = new MotorBike(200);  //2. 이렇게 초기에 값을 줄수있음 ( 출력해보면 이값먼저 보여주고 아래의 값들 호출)
		
		System.out.println(ducati.getSpeed());
		System.out.println(honda.getSpeed());
		
		ducati.start();
		honda.start();
		
//		ducati.setSpeed(100);
		
		ducati.increseSpeed(100);
		honda.increseSpeed(100);
		
		ducati.decreseSpeed(250);
		honda.decreseSpeed(250);
		
		System.out.println(ducati.getSpeed());
		System.out.println(honda.getSpeed());
	}
}
---------------------------------------------------------------------------------------

⁕MotorBike ducati = new MotorBike(100); 이부분에서 (100) 이부분은 객체생성이다.
setSpeed 없이도 100의 값을 전달하는 MotorBike객체를 생성하고 싶을 때 
생성자를 활용하면 된다

생성자는 어떤면에선 특이한 메서드인대
일반적으로 메서드 입력 시 반환타입을 구체화 해야 하지만 (getter처럼..)
생성자는 반환 타입을 필요로 하지 않는다.

-일반메서드와 생성자의 차이점
메서드는 반환타입을 구체화 해야 하지만 생성자는 필요하지 않다.
메서드 명칭에서 차이가 있다 생성자는 클래스명을 그대로 사용해야한다(대/소문자 모두 같아야함).
