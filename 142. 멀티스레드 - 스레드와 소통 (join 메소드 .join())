
지난 학습에선 Thread를 생성하는 방법에 관해 이야기해 보았다
Thread에서의 우선순위에 대해서, 그리고 Thread의 다양한 상태에 대해서도 알아보았다

이번 학습에선 Thread 사이의 소통에 대한 이야기를 다루어 보도록 하겠다

두 개의 task가 있다
Task1 과 Task2가 있고, Task3은 메인 메소드 안에서 그 실행이 진행되고 있는 것으로 나타난다 그러므로,
정확히 말하면 Thread가 아닌 것이다 Task3은 메인 메소드의 안에서 직접적으로 실행되는 코드인것이다
여기서 Task3가 실행되기 전에 Task1과 Task2가 실행이 완료되도록 하고 싶다고 해보겠다
그러면 어떻게 해야 할까? 이번 단계에서 집중적으로 다루어 볼 내용이다
-----------------------------------------------------------------------------------------


package multiThreading;

//extends Thread
//implements Runnable

class Task1 extends Thread {
	
	public void run() {//SIGNATURE

		System.out.print("\nTask1 Started");
		for(int i = 101; i <= 199; i++ ) 
			System.out.print(i + " ");
		
		System.out.print("\n Task1 Done");
	}
}

class Task2 implements Runnable {
	@Override
	public void run() {
		System.out.print("\nTask2 Started");
		for(int i = 201; i <= 299; i++ ) 
			System.out.print(i + " ");
		
		System.out.print("\n Task2 Done");
	}
	
}

public class ThreadBasicsRunner4 {
	
	public static void main(String[] args) throws InterruptedException {
		
		//• NEW;
		//• RUNNABLE;
		//• RUNNING;
		//• BLOCKED/WAITING;
		//• TERMINATED/DEAD;•

		
		//Task1 - 101 to 199
		System.out.print("\nTask1 Kicked Off");
		Task1 task1 = new Task1();
		
		task1.setPriority(1);
		
		//task1은 이미 실행이 시작되었다 그리고 아래에 task2가 실행되었다 맞지?
		
		task1.start(); 
		
		System.out.print("\nTask2 Kicked Off");
		
		
		Task2 task2 = new Task2();
		Thread task2Thread = new Thread(task2);
		
		task2Thread.setPriority(10);
		task2Thread.start();
		
		//wait for task1 complete
		
		//이쪽으로 와서 다음과 같이 해보도록 하겠다 Task1의 실행이 완료되길 기다려 보겠다
		//즉 다시 말해 Task3는 Task1의 실행이 끝난 후에 실행이 되는 것이다 그러려면 어떻게 해야 할까?
		//task1.join()이라 적음으로써 이를 실현할 수 있다 보다시피, 여기 설명을 보면
		//Waits for this thread to die.-> Thread의 실행이 끝나기를 기다리라고 적혀있다
		//그러므로 이 특정 Thread의 실행이 끝날 때까지 대기한다는 것을 의미하는 코드이다
		
		//여기서 중요한 것은 task1.join()이라는 코드가 예외를 만들어 낸다는 것이다 여기서 ctrl + 1을 눌러주고 나서
		//'Add throws declaration'을 눌러준다 예외에 대해 다루게 될때 main메소드에 왜 throws를 적어주어야 하는지 배우게 될 것이다
		//일단 지금은 throws InterruptedException을 적어주겠다 여기선 main메소드에 추가해 주어야 한 코드이다
		
		//그러고 나서 여기 task1.join()을 적어주었다 이제 어떤 일이 생길지 확인해 보도록 하자
		//보다 시피 여기서 Task3이 실행되기 전, Task1의 실행이 완료된 것을 확인할 수 있다 ( Task1 Kicked Off   Task2 Kicked Off   Task1 Started101..  Task2 Started201..   Task2 Done149..  Task1 Done   Task3 Kicked Off301..)  
		//여러번 실행해 보아도 Task3이 항상 Task1의 실행이 완료된 후에 실행이 시작되었다는 것을 확인할 수 있다
		//이것이 task1.join()이 하는 일이다 즉, 여기 적혀있는 task가 완료된 경우엔 다음 줄의 코드가 실행이 시작되는 것이다
		//이 과정은 Task3의 시작 전에 Task1의 실행이 완료되었는지를 확인할 때 매우 중요하게 사용된다
		
		//돌아가기 앞서 두 개의 task가 모두 실행이 완료 되었는지를 확인해 보고 싶다고 해보겠다, 이러려면 어떻게 해야 할까?
		
		task1.join();
		
		//task2Thread.join()이라 적겠다 
		//그리고 실행해 보도록 하겠다
		//보다 시피 Task3이 Task1과 Task2의 실행이 모두 완료된 후에 Task3 kicked off된 것을 확인할 수 있다
		//Task1 Done293..  Task2 Done  그러고 나서 Task3 Kicked Off301...가 출력된 것을 확인할 수 있다
		//이 과정을 여러 번 실행해 보아도 같은 결과가 나온다는 것을 확인할 수 있다 
		//Task3가 kick off 되는 시점은 Task1과 Task2의 실행이 끝난 시점뿐이다, 맞지?
		
		//이런 식으로 코드를 작성할 때의 장점은 다음과 같다 
		//현재 너는 여기서 Task1과 2를 실행했다 
		//그리고 이 두 개의 task는 병렬로 실행이 되고, 두개의 task가 모두 실행이 완료되기를 기다리고 있다
		//이 두 task의 실행이 끝나면 다른 task를 실행하기 위해서다 
		task2Thread.join();
		
		System.out.print("\nTask3 Kicked Off");
		//Task3
		for(int i = 301; i <= 399; i++ ) 
			System.out.print(i + " ");
		
		System.out.print("\nTask3 Done");
		
		System.out.print("\nMain Done");

	}
}

-----------------------------------------------------------------------------------------





/*
정리)
이 학습에선, join 메소드를 이용하여 특정 thread의 실행이 끝나기를 기다렸다

		task1.join();
		
		task2Thread.join();
		
		System.out.print("\nTask3 Kicked Off");
		//Task3
		for(int i = 301; i <= 399; i++ ) 
			System.out.print(i + " ");
		
		System.out.print("\nTask3 Done");
		
		System.out.print("\nMain Done");

이 부분의 식에서 join 메소드가 사용되었을 때, 
반드시 Task1의 실행이 끝났을 때만 다음 코드 진행으로 넘어갈 수 있도록 해줬다

*/
