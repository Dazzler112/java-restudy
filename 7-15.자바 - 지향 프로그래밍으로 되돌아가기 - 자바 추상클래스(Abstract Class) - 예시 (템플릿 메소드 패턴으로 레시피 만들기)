
이번 학습에선 추상 클래스의 용도 중 하나에 대해 알아보자

----------------------------------------------------------------------

AbstractRecipe 클래스 파일

package AbstractReceipe;

public abstract class AbstractRecipe {//추상(abstract)클래스로 사용하고 싶다..
	
	//요리 몇가지를 생각해 보자..
	//보통 모든 요리를 할 때 준비과정이 조금이나마 연관되어 있다
	//먼저 준비과정을 하고 그다음 요리법을 따르고 그다음 청소를 하길 바라겠지?
	//이런 상황에 추상 클래스는 매우 쓸모가 있다. //아래 세가지 단계는 요리법을 따르는 모든 클래스들의 필수적으로 만들고 싶다..
	
	//prepare //필요한 모든 것들을 가져와야겠지 모든게 청결한지 확인부터 하는식으로..
	//recipe  //두번째 요리법을 따라 음식을 만드는것
	//cleanup //세번째 모든것 다 끝난 후 청소를 하는 것
	
	//내가 할수잇는 것은 public이라는 메소드를 만드는것 그다음..
	public void execute() {
		getReady();  // prepare단계를 호출
		doTheDish(); // 다음단계
		cleanup();   // 마지막단계
	} //이게 그것의 한 종류이다 하지만 연관된 단계들을 설정하는 것이다
	  //하지만 getReady();를 실행함에 있어 무엇이 연관되었는지 정하길 바라지 않는다 doThedish();cleanup(); 에도 마찬가지로 이것들과 연관되고 싶지 않다.
	  
	//각 요리법들이 스스로 정하길 바랄뿐 이제 어떻게 하면 될까?
	abstract void getReady();
	abstract void doTheDish();
	abstract void cleanup();
	//적용법을 제공하고 싶지 않고 대신 알고리즘을 제공하겠다는 것이다 이건 하위 클래스들이 해결해야 하는 문제라고 생각한다
	//일반적인 추상 클래스의 용례이다 어떠한 요리법이라도 AbstractRecipe를 적용하고 싶다면 어떻게 해야할까? 새로운 클래스를 만들어야 겠지 (Recipe1 생성)
}

----------------------------------------------------------------------



----------------------------------------------------------------------

Recipe1 클래스파일

package AbstractReceipe;

public class Recipe1 extends AbstractRecipe{//컴파일 오류가 나온다 필수적으로 상속된 추상메소드를 적용해야 한다고 나오네

	//보다시피 기본적 메소드들이 존재한다 getReady()는
	@Override
	void getReady() {
		System.out.println("Get the raw materials"); //라고 하자
		System.out.println("Get the utensils"); //라고 하자 간단한 알고리즘이다. //사실 알고리즘 아님
	}

	@Override
	void doTheDish() {
		System.out.println("Prepare the dish");
	}

	@Override
	void cleanup() {
		System.out.println("Cleanup the utensils");
	}
	
	//이제 RecipeRunner클래스를 만들자. 
}

----------------------------------------------------------------------




----------------------------------------------------------------------




----------------------------------------------------------------------

RecipeWithMicrowave 클래스파일



package AbstractReceipe;

public class RecipeWithMicrowave extends AbstractRecipe{
//Receipe1을 복사해서 RecipeWithMicrowave를 만든것 뿐임
	//전자레인지를 쓰기 때문에 
	@Override
	void getReady() {
		System.out.println("Get the raw materials");
		System.out.println("Switch on the microwave"); 
	}

	@Override
	void doTheDish() {
		System.out.println("get stuff ready");
		System.out.println("Put it in the microwave");
	}

	@Override
	void cleanup() {
		System.out.println("Cleanup the utensils");
		System.out.println("Switch off the microwave"); 
	}
	
	//각각의 단계들을 다르게 정의하고 있다
	//그래서 Recipe1에는 다른 단계들이 있고 여기에는 또 다른 단계들이 있다.
	
}


----------------------------------------------------------------------

RecipeRunner 클래스파일


package AbstractReceipe;

public class RecipeRunner {
	//이제 RecipeRunner클래스를 만들었다 핵심 메소드를 가진 RecipeRunner로 이 Recipe를 실행하는 것이다.
	public static void main(String[] args) {
		Recipe1 recipe = new Recipe1();
		recipe.execute(); //해당(execute) 메소드를 호출할 수 있다. //여기서 excute()정의는 AbstractReceipe에 의해 제공되고 있다
	//AbstractReceipe 각 단계들의 정의는 Recipe1 클래스에 의해 제공되고 있고 이걸 실행하면 어떤일이 일어날까?
	/*	출력 ==>
	    Get the raw materials //재료들 갖고오고
		Get the utensils      //수저를 갖고오고
		Prepare the dish      //요리를 하고
		Cleanup the utensils  //수저를 청소하고
    */
	//이 Recipe에서 전자레인지를 쓰지 않는다고 하자	
		
		//하지만 여기 있는 Recipe1대신 RecipeWithMicrowave를 실행시키고 싶으니.. 
		RecipeWithMicrowave recipeWithMicrowave = new RecipeWithMicrowave();
		recipeWithMicrowave.execute();
		//실행하면 위에것과 똑같은 일이 생기겠지?
		/* ==> 출력
		 	Get the raw materials
			Get the utensils
			Prepare the dish
			Cleanup the utensils
			Get the raw materials
			Switch on the microwave
			get stuff ready
			Put it in the microwave
			Cleanup the utensils
			Switch off the microwave
		 */
		
	}
}

----------------------------------------------------------------------




/*

정리)
추상클래스 덕에 기본 알고리즘 정의가 가능하다 우리는 연관된 여러 가지 다른 단계들을 정의한다 
그래서 getReady() dotheDish(), cleanup()을 설정했다
그리고 그 적용법을 하위 클래스에 제공한다 Recipe1과 RecipeWithMicrowave를 통해서다
이것이 여러 프레임워크에서 대부분의 추상 클래스가 하는 일이다
자바 프레임워크는 여러가지가 있는데 모든 추상 클래스들은 이들은 높은 단계의 알고리즘을 적용하고 
자세한 세부정보들은 적용클래스들에게 맡기는 것이다 추상 클래스들을 연장하는 클래스들에게
		/*
		public void execute() {
		getReady();  // prepare단계를 호출
		doTheDish(); // 다음단계
		cleanup();   // 마지막단계
		}  <== 이것들에게 맡김
		*/
이것이 추상클래스가 쓰이는 방식들 중 하나이다

*/
