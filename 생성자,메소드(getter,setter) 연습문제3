// Defining a Point class to represent a point in 2-dimensional space
public class Point {
    
    // x-coordinate of the point
    private int x;

    // y-coordinate of the point
    private int y;

    // Constructor for the Point class
    public Point(int x, int y) {
        this.x = x;  // Assigning x-coordinate of the point
        this.y = y;  // Assigning y-coordinate of the point
    }

    // Method to get the x-coordinate of the point
    public int getX() {
        return x;
    }

    // Method to get the y-coordinate of the point
    public int getY() {
        return y;
    }

    // TODO: Implement the method to move the point by dx and dy in x and y direction respectively
    public void move(int dx, int dy) {
        // Your code here
    }

    // TODO: Implement the method to calculate the distance from this point to another point
    public double distanceTo(Point other) {
        return 0.0;
        // Your code here
    }
}
-------------------------------------------------------------------------------------------------

예문)


코딩 예제: 2차원 좌표 x, y가 있는 Point 클래스 만들기
이 예제에서 여러분은 Java 클래스 Point의 구현을 완료해야 합니다. 2차원 공간에서 점은 x좌표와 y좌표가 있는 실체입니다.



다음은 여러분이 완성하게 될 미완성 상태의 Point클래스입니다.

// Defining a Point class to represent a point in 2-dimensional space
public class Point {
    
    // x-coordinate of the point
    private int x;
 
    // y-coordinate of the point
    private int y;
 
    // Constructor for the Point class
    public Point(int x, int y) {
        this.x = x;  // Assigning x-coordinate of the point
        this.y = y;  // Assigning y-coordinate of the point
    }
 
    // Method to get the x-coordinate of the point
    public int getX() {
        return x;
    }
 
    // Method to get the y-coordinate of the point
    public int getY() {
        return y;
    }
 
    // TODO: Implement the method to move the point by dx and dy in x and y direction respectively
    public void move(int dx, int dy) {
        // Your code here
    }
 
    // TODO: Implement the method to calculate the distance from this point to another point
    public double distanceTo(Point other) {
        // Your code here
    }
}
과제

여러분의 과제는 Point 클래스의 다음 메서드들의 구현을 완료하는 것입니다.

메서드: move(int dx, int dy)

이 메서드는 현재 점의 위치를 2차원 공간에서 조정합니다. 매개변수 dx와 dy는 각각 x좌표와 y좌표의 변화를 나타냅니다.

이 메서드를 호출한 후에 점의 새로운 좌표는 (current x + dx, current y + dy)가 될 것입니다.

예시: 좌표가 (3, 4)인 점이 있고 인수를 1과 2로 하여 move메서드를 호출하면 점의 새로운 좌표는 (3+1, 4+2) 즉, (4, 6)이 될 것입니다.

메서드: distanceTo(Point other)

이 메서드는 현재의 점과 또 다른 점 other 사이의 유클리드 좌표계 상의 거리를 계산하여 리턴합니다.

두 점 (x1, y1)과 (x2, y2)의 유클리드 좌표계 상의 거리는 d = sqrt((x2-x1)^2 + (y2-y1)^2)로 계산됩니다.

예시: 만일 좌표가 (3, 4)인 점이 있고 좌표가 (6, 8)인 또 다른 점과의 거리를 계산하고 싶으면 거리는 
sqrt((6-3)^2 + (8-4)^2) 즉, sqrt(9+16) 즉, sqrt(25) 즉, 5.0이 됩니다.

팁: Math.sqrt 함수를 사용하여 어떤 숫자의 제곱근을 계산합니다.



예시

여러분의 코드가 정확히 구현되었다면 다음의 예가 제대로 작동할 것입니다.

Point p1 = new Point(3, 4);
Point p2 = new Point(6, 8);
 
p1.move(1, 1);  // After this move, the point p1 should be at (4, 5)
 
double distance = p1.distanceTo(p2);  // The distance from p1 to p2 should be sqrt((6-4)^2 + (8-5)^2) = sqrt(4+9) = sqrt(13) ≈ 3.60555


그럼 행운을 빕니다!
-------------------------------------------------------------------------------------------------

힌트)

1.move(int dx, int dy) 메서드에 관한 힌트: 이 메서드는 여러분의 점의 좌표를 변경하는 메서드입니다. 
dx는 변경되는 x좌표의 양이고 dy는 변경되는 y좌표의 양입니다. += 연산자를 사용하여 현재의 x, y 좌표를 각각 dx및 dy만큼 증가시킵니다.

2.distanceTo(Point other) 메서드에 관한 힌트: 두 점 사이의 유클리드 좌표계 상의 거리를 계산하기 위해 
여러분은 x좌표와 y좌표의 차이의 제곱들의 합계의 제곱근을 구해야 합니다. 
Math.sqrt 함수를 사용하여 어떤 숫자의 제곱근을 구합니다. other점의 좌표에서 현재 점의 좌표를 빼야 한다는 사실을 기억하시기 바랍니다.




-------------------------------------------------------------------------------------------------



해답)











// Defining a Point class to represent a point in 2-dimensional space
public class Point {
    
    // x-coordinate of the point
    private int x;

    // y-coordinate of the point
    private int y;

    // Constructor for the Point class
    public Point(int x, int y) {
        this.x = x;  // Assigning x-coordinate of the point
        this.y = y;  // Assigning y-coordinate of the point
    }

    // Method to get the x-coordinate of the point
    public int getX() {
        return x;
    }

    // Method to get the y-coordinate of the point
    public int getY() {
        return y;
    }

    // TODO: Implement the method to move the point by dx and dy in x and y direction respectively
    public void move(int dx, int dy) 
        this.x = this.x + dx;   
        this.y = this.y + dy;   
    }

    // TODO: Implement the method to calculate the distance from this point to another point
    public double distanceTo(Point other) {
        // Calculating the difference in x-coordinates
        int diffX = this.x - other.x;    //this.x - other.x 가 x2-x1이다! // other.x - this.x 해도 상관없는 이유가 아래의 Math.sqrt()<-안쪽부분에서 곱할때 음수의 제곱은 양수가 된다!
        // Calculating the difference in y-coordinates
        int diffY = this.y - other.y;    //this.y - other.y 가 y2-y1이다! // other.y - this.y 해도 상관없는 이유가 아래의 Math.sqrt()<-안쪽부분에서 곱할때 음수의 제곱은 양수가 된다!
        // Returning the Euclidean distance between the two points
        return Math.sqrt(diffX * diffX + diffY * diffY); //두점사이의 거리를 반환해야 한다!
        // Your code here
    }
}
