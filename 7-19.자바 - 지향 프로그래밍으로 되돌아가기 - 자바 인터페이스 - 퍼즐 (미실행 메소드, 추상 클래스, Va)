
인터페이스에 관한 몇가지 수수께끼들에 대해 알아보자 

Interface1 이라는 인터페이스 생성 그리고 여기엔 메소드가 있다고 하자
jshell> interface Interface1{
   ...>     void method1();
   ...> }
|  created interface Interface1

여기서 과연 인터페이스를 연장해서 Interface2가 Interface1을 연장하는 게 허용될까? 생각해보자 여기선 method2를 생성

jshell> interface Interface2 extends Interface1 {
   ...>     void method2();
   ...> }
|  created interface Interface2
허용 된다 인터페이스는 또다른 인터페이스를 연장할 수 있다 이건 허용이 된다

하지만 어떤 클래스가 이 Interface2를 구현하고 싶다면 무엇을 애야 할까? 컴파일이 될까?
jshell> class Implementatiton implements Interface2 {
   ...> }
|  Error:
|  Implementatiton is not abstract and does not override abstract method method2() in Interface2
|  class Implementatiton implements Interface2 {
|  ^--------------------------------------------...
컴파일이 되지 않는다 왜냐하면 이것은 이 두 메소드들을 위한 구현을 제공해야 하기 때문이다


method2()를 위한 구현을 제공한다 public void method2() 그다음 비어있는 코드
그래서 구현이 method2()의 구현을 제공한다면? 이걸로 충분할까? 

jshell> class Implementatiton implements Interface2 {
   ...>     public void method2() {}
   ...> }
|  Error:
|  Implementatiton is not abstract and does not override abstract method method1() in Interface1
|  class Implementatiton implements Interface2 {
|  ^--------------------------------------------...
안된다, 왜냐하면 method1()에 대한 구현도 제공해야 하기 때문이다

그러니 이제 method1()의 구현도 제공해보자
method2(),method1() 그리고 이제야
jshell> class Implementatiton implements Interface2 {
   ...>     public void method2() {}
   ...>     public void method1() {}
   ...> }
|  created class Implementatiton
클래스를 통해 인터페이스의 구현을 생성할 수 있다.

/*
요약을 하자면, 인터페이스를 연장시킬수 있다 하지만 두번째 인터페이스를 구현하고 싶으면 
그러면 너는 연장하려는 인터페이스와 연장하는 인터페이스의 메소드들을 구현해야 한다는 것이다.
*/

다음 수수께끼로 넘어가 보자

이제 Interface2를 구현하고 싶지만 method1()만 구현하고 싶다고 하자 method2()는 구현하고 싶지 않음
어떻게 해야 할까? Interface2를 구현하고 싶짐나 메소드들 중 하나만 구현하고 싶다... 어떻게 해야할까...


추상클래스를 만들면 된다 추상클래스를만들어서
ImplementationAbstract라 부르면 Interface2를 구현한다고 할 수 있다.
어떤 메소드도 구현할 필요가 없다.
jshell> abstract class InplementationAbstract implements Interface2 {
   ...>     public void method1() {}
   ...> }
|  created class InplementationAbstract
method1()을 구현할수 있다 허용이 된다 왜냐하면 우리는 이것이 추상클래스라고 하기 때문이다
추상클래스는 인터페이스에 정의되어 있는 메소드들의 일부만 구현할 수 있고, 허용이 된다
하지만! 아무 클래스, 이 추상 클래스를 연장하는 아무 구상 클래스는 당연히 모든 것을 구현해야 한다
(Interface2와 연장되는 인터페이스들 안에 존재하는 것들을)

/*
요약하자면 너는 자신이 연장하는 인터페이스에 대한 구현이 없는, 그저 인터페이스만 구현하는 추상 클래스를 만들수 있다
하지만 그 추상 클래스를 어떤 구상 클래스가 연장한다면, 
그 구상클래스와 추상클래스 사이에서 인터페이스와 하위 인터페이스에서 정의된 모든 메소드들의 구현을 제공해야 한다는 것이다.
*/

또 이제 간단한 인터페이스를 만들어보자
여기서 변수 int test; 라는 변수를 만들어 보려한다 이것은 허용이 될까? 생각해보자
jshell> interface Interface3 {
   ...>     int test;
   ...> }
|  Error:
|  = expected
|      int test;
|              ^
안된다 왜 허용되지 않는지 알아보자.

test에 5의 값을주고 만들어보자
jshell> interface Interface3 {
   ...>     int test = 5;
   ...> }
|  created interface Interface3
인터페이스가 생성된 것을 볼 수 있다

사실 우리가 여기 int test = 5; 만든건 변수가 아니다 여기서 만든건 상수이다.
인터페이스 안에서 변수가 아니라 상수를 만들 수 있다.
이 상수의 값은 바뀔 수 없다
자바 8 이전에는 인터페이스 내부에서 메소드의 진짜 구현을 생성할 수 없었다 하지만 8버전부터 허용으로 바꼈다

그래서 어떻게 구현을 생성할지 알아보자 Interface4라 하고 간단한 메소드를 생성해보자
jshell> interface Interface4 {
   ...>     default void print() {
   ...>         System.out.println("default");
   ...>     }
   ...> }
|  created interface Interface4
이건 허용이 된다 이제 여기에 기본적 메소드가 있는걸 볼 수 있다.
이것은 자바 8버전 부터 허용된 것이다

어떤 일이 벌어지냐면, 어떤 클래스가 Test라 해보자, Interface4를 구현한다 할 때
jshell> class Test implements Interface4 {
   ...> }
|  created class Test
이 print method()를 구현하지 않으면 그 클래스는 기본적 구현을 받는 것이다.

그래서 만약 내가 Test 클래스의 인스턴스를 만들면
jshell> Test test = new Test();
test ==> Test@5fa7e7ff

그리고 test.print()를 호출 한다면 무엇을 받게 될까?
jshell> test.print();
default
//기본적 구현 default를 받게 된다
하지만 이것 또한 덮어쓰기가 가능하다

Test1 클래스 생성 interface2 구현
그 인터페이스의 구현을 덮어씌울 수 있다.
jshell> class Test1 implements Interface4 {
   ...>     public void print() {
   ...>         System.out.println("override");
   ...>     }
   ...> }
|  created class Test1

Test1의 인스턴스들을 생성할 수 있다
jshell> Test1 test = new Test1();
test ==> Test1@3fa77460
test.print()메소드를 호출
jshell> test.print();
override
//override를 출력하게됨

우리가 본 것은 인터페이스는 기본적 메소드를 제공할 수 있다는 것이다.
default라는 키워드를 이용해서 이다 Interface4에서 메소드를 구현하는건 하던대로이다 단지 키워드가 default인 것일 뿐이다
이 인터페이스 안의 특정 메소드에 대한 기본적 구현으로 행동한다
기본적 메소드의 용도는 일반적으로 인터페이스를 연장할 때 쓰인다, 
세가지 메소드를 가진 인터페이스와 이 세 메소드들을 구현하는 클래스가 1000개라고 해보자
여기서 네번째 메소드를 인터페이스에 추가하면 모든 1000개의 클래스들이 컴파일 오류를 발생시킬 것이다.
무슨말일까? 간단한 예시를 한번 보자


------------------------------------------------------------------------------------

	interface Test {
		void nothing();
		default void nothing1() {} //default후 기본적 구현해야 컴파일오류 방지
	}
	//이제 이것을 구현하는 클래스 두개를 만들 것이다
	//Test를 구현하는 두 클래스가 있다
	//우리가 연장하는 인터페이스에 메소드를 하나 더 만든다고 치자 void nothing1();
	//무슨 일이 벌어질까? 아까 만든 클래스들이 모두 컴파일을 실패하기 시작한다 왜냐하면 그들은 nothing1()을 구현하지 않았기 때문이다
	//그래서 Test인터페이스를 구현하려고 하면 nothing1() 또한 구현해줘야 된다는 것이다.
	//그래서, Test를 새 메소드로 연장하게 된다면 이 두 클래스들도 똑같이 그것을 구현해 줘야 한다
	//컴파일 오류를 방지하기 위해 우리가 할수있는 것은 default nothing1()후에 기본적 구현을 제공하는 것이다
	//그러면 컴퍼일 오류들이 사라지기 시작한다
	class Class1 implements Test {

		@Override
		public void nothing() {
			// TODO Auto-generated method stub
			
		}
		
	}
	class Class2 implements Test {

		@Override
		public void nothing() {
			// TODO Auto-generated method stub
			
		}
		
	}
	//이것이 특히나 유용한 상황은 만약 너가 인터페이스를 제공하지만 또다른 제 3가자
	//인터페이스의 구현을 제공할 때이다 이런 상황에서는 특히나 기본적 메소드를 가지는 것이 
	//매우 매우 유용하다, 왜냐면 넌믄 제3자의 코드를 망가뜨리지 않기 때문이다

------------------------------------------------------------------------------------

/*

정리)
이번 학습에선 인터페이스의 수수께끼들에 대해 탐구해 봤다
우리는 인터페이스가 다른 인터페이스를 연장할 수 있는것을 보았고 만약 인터페이스의 모든 메소드를 구현하지 않는
클래스를 구현하고 싶다면 추상 클래스로 만들 수 있다는 것을 배웠다

또 자바 8부터 인터페이스의 기본적 메소드들이 특정 인터페이스의 기본적 구현을 제공할 수 있게 해준다는 것도 이야기했다
특정 인터페이스의 구현자는 그 구현을 덮어씌울 수 있지만 기본적 구현은 우리가 인터페이스를 연장하고 
그 인터페이스의 구현자들이 컴파일 오류를 발생시키지 않게 하는데 유용하다 

*/
