코딩 예제: 문자열에 2개의 연속된 동일한 문자가 있는지 검사하기

여러분의 과제는 StringMagic클래스 안에서 hasConsecutiveDuplicates메서드를 완성하는 것입니다. 
이 메서드는 주어진 문자열에 2개의 연속된 동일한 문자가 있는지 검사해야 합니다.

이 메서드의 시그니처는 다음과 같습니다.

public boolean hasConsecutiveDuplicates(String str);
여기에서
• str은 길이가 n인 문자열입니다(0 ≤ n ≤ 1000). 이 문자열에는 프린트 가능한 ASCII 문자가 포함되어 있을 수 있습니다.

이 메서드는 문자열에 2개의 연속된 동일한 문자가 있는 경우에는 true를, 그렇지 않은 경우에는 false를 리턴해야 합니다.

예시

다음은 hasConsecutiveDuplicates 메서드의 동작을 보여주는 몇 가지 예입니다.

• 가령 문자열 “Hello”가 있다면 문자 ‘l’이 2개 연속 있으므로 여러분의 메서드는 true를 리턴해야 합니다.
• 가령 문자열 “World”가 있다면 2개의 연속된 동일한 문자가 없으므로 여러분의 메서드는 false를 리턴해야 합니다.
• 가령 비어 있는 문자열 ""가 있다면, 여러분의 메서드는 false를 리턴해야 합니다.
• 가령 단일 문자 "H"로 된 문자열이 있다면 여러분의 메서드는 false를 리턴해야 합니다.
• 다수의 동일한 문자가 있는 문자열 "HHH"가 있다면 연속된 문자 ‘H’가 여럿 있으므로 여러분의 메서드는 true를 리턴해야 합니다.

기본 코드

public class StringMagic {

    /**
     * This method checks if a given string has two consecutive identical characters.
     *
     * @param str The string to check for consecutive duplicates.
     * @return true if the string has consecutive duplicates, false otherwise.
     */
    public boolean hasConsecutiveDuplicates(String str) {
      // TODO: Write your code here
    }
}

//해당 로직으로 코드를 작성하시오.




-------------------------------------------------------------------------------------










힌트)















1. 엣지 케이스, 즉 비어 있는 문자열과 문자 하나만 있는 문자열을 먼저 처리합니다.
2. for 반복문을 사용하여 문자열을 반복합니다. 마지막에서 두 번째 문자에서 멈춥니다.
3. 반복할 때마다 charAt() 메서드를 사용하여 현재의 문자와 다음 문자를 비교합니다.
4. 현재의 문자와 다음 문자가 동일하면 즉시 true를 리턴합니다.
5. 연속된 동일한 문자를 발견하지 못하고 반복문이 완료되면 false를 리턴합니다.

-------------------------------------------------------------------------------------













-------------------------------------------------------------------------------------












해답)


















public class StringMagic {

    /**
     * This method checks if a given string has two consecutive identical characters.
     *
     * @param str The string to check for consecutive duplicates.
     * @return true if the string has consecutive duplicates, false otherwise.
     */
    public boolean hasConsecutiveDuplicates(String str) {
       
        for(int i = 0; i < str.length()-1; i++){ //반복문으로 시작 //문자열의 문자에 액세스 할수 있음 //그리고 lenth()에 -1을 해줘야한다 왜일까? 문자열에 10개의 문자열이 있다고 가정해보자 
                                                 //ABCDEFGHIJ str.length란 무엇일까? 문자열 점 길이를 주면 10이 나온다 //ABCDEFGHIJ 10 이 두가지를 먼저 비교해보자 J에 도달할때 9개의 비교만 실행하고 싶지만 다음문자가 없다 다음문자에 접근하려고 하면 예외가 발생한다.
                                                 //그래서 인덱스를 0에서 시작하는 것이고 0은 A,하나 B,둘...여덟 I이다 //따라서 8에서 8에 액세스하고 9의값에 액세스할 수있으므로 8에서 중지하고 싶다
                                                 //따라서 인덱스 8의 값은 즉, 다음 인덱스 I에 1을 더한값은 J이다. 커렌트와 넥스트를 비교하고 싶은것이다 다음 인덱스에는 아무것도 없기 때문에 J를 다음 인덱스와 비교하고 싶지 않다. 인덱스 10으로 값에 액세스하려고 하면 예외가 발생한다.
                                                 //따라서 str.length에서 1을 뺀 값이다. 이것이 첫 번째 작업이다.
            char currentCharacter = str.charAt(i);  //현재캐릭터 char로 변수 초기화
            char nextCharacter = str.charAt(i+1);   //다음캐릭터 char로 변수 초기화하는대 생성자부분에 +1을 넣어줌 (그래야 다음과 같은지 확인할 수 있기 때문)
        
            if(currentCharacter == nextCharacter){ //이 두문자가(현재, 다음)같다면
                return true;      //char nextCharacter = str.charAt(i+1);  이부분에 연속된 인덱스에서 동일한 문자가 있는것을 의미하기 때문
            }
        }
        return false; //그렇지 않으면 거짓을 반환 (별도의 null조건 만들어 줄 필요 없이 for문의 조건에서 걸리지 않으면 return false로 빠진다)
    }
}

-------------------------------------------------------------------------------------
