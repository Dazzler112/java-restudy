
세 번째 예시에선 함수형 프로그래밍을 이용해 숫자의 리스트의 총합을 구하고 싶다 어떻게 해야할까?
시작해보자


--------------------------------------------------------------------------------------------------



FPNumberRunner 클래스 파일




package funtionalProgramming;

import java.util.*;

public class FPNumberRunner {
	
	public static void main(String[] args) {
		//우선 먼저 해야할건 기본 리스트를 만드는 것이다
		List<Integer> numbers = List.of(4, 6, 8, 13, 3, 15);
		
		//그 다음 하고 싶은 것은, numbers.stream().forEach하고 syso를 하고싶은것이다 맞지?
		//element(요소), 각 element(요소)마다, 우리는 syso하고 싶다
		numbers.stream().forEach(element -> System.out.println(element));
		/*출력==>
		 4
		 6
		 8
		 13
		 3
		 15
		 */
		//이것이 우리가 전에 했던 것이고 이제 모든 숫자들을 출력하는 것이다, 그리고 이 리스트를 전 예제에서 걸러내 보았다
		
//		 int sum = normalSum(numbers); ❗1-1
//		 System.out.println(sum);
		 
		 
		 //우리가 하고 싶은것은 이 요소들을 다 더하는 것이다 우리는 총 6개의 list 값이있다 
		 //우리는 이제 이 여섯 개의 요소들을 한 요소로 줄일 것이다 어떻게 줄일 수 있을까?
		 //그것이 중요한 부분이다, 우리가 할 것은, 한 쌍을 가져다가 더해주는 것이다
		 //그래서,0으로 시작해보자, 0+4는 4,4+6=10, 4+6+8=18..이런 방식으로 말이다
		 //어떻게 쌍을 하나로 줄일까? 어떻게 해야할까?
		 //이때가 줄임 함수가 빛을 발할 때이다, 
		 //줄임 함수에게 초기값을 줄 수 있다, 시작하는 값은 0이다 그래서,0으로 시작한 다음 각 숫자의 쌍마다 number1, number2 무엇을 해야 할까?
		 //이들을 더하고 싶은 것이다 number1 + number2 그리고 우리는 이것을 가져가고 이것이 합이 되겠지?(int sum 으로 초기화)
		 int sum = numbers.stream().reduce(
				 0,
				 (number1, number2) -> number1 + number2);
		 
		 System.out.println(sum);
		 // 출력 ==> 49
		 /*
      코드 해석 ==>
		  자, 우리는 줄임 메서드를 두 매개변수를 가지고 호출한다
		  첫번째 매개변수는 0이다
		  두번째 매개변수는 함수의 정의이다 함수 정의는 매 숫자의 쌍( (number1, number2) )마다
		  이것이 해야할 일은 number1 + number2 이제 이것을 실행 하면 종합이 무엇일까? 49이다
		  아까와 완벽히 같다 
		  */
		 
		 /*
     ()구분? ==> 
		 여기서 흥미로운 부분은 괄호들이다 ( (number1, number2) ) 여기 괄호들을 볼 수 있다 
		 어떤 메서드에 단 하나의 요소만 갖고 있을 때, 우리는 그 주변에 괄호가 필요하지 않다 forEach((element) 이건 ok 이것도 괜찮지만 굳이 필요하지 않다
		 하지만❗ 두개의 매개변수가 있을 때 여기(number1, number2) 우리는 매개변수가 두 개다 숫자1, 숫자2
		 ❗ 이렇게 매개변수가 두 개일 때 너는 괄호가 꼭 필요하다 ❗
		 (number1, number2) 여기 우기가 하는 것은 어디가 시작점( 0, )인지와 여기 이후의 숫자 쌍이( (number1, number2) ) 어떻게 처리되어야 할지 특정하는 것이다
		 우리는 이들을 줄여햐 한다, 우리는 이 값들을 하나의 값으로 줄여야 한다
		 그리고 각 쌍을 하나로 어떻게 줄이지? 더함으로써 줄일 수 있다 ( number1 + number2 )
		 
		 그래서, numbers.stream().reduce,시작값은 0이고 그 이후부터, 숫자1 과 숫자2를 출력
		 그 이후부터는 각 쌍을 합하기 그래서, 0과 4의 쌍으로 시작하겠지 0과 4가 서로 합해지겠고 그 합이 6과 더해지겠고
		 그 다음 쌍은 그 합과 8이겠고 그다음엔 다음 쌍은 8까지 더한 것과 13이겠고 그런식으로 가겠지
		 */
	}

  •일반적으로 총합 계산했던 방식 ==>
	//이 안에서 우리가 하고 싶은 것은, 모든 숫자들의 총합을 계산할 수 있는 것이다
	//일반적으로, 우리는 모든 숫자의 총합을 어떻게 구했지? 아주 간단하다 ❗1-1
	private static int normalSum(List<Integer> numbers) {
		int sum = 0;
		 for(int number : numbers) { //라 하고 정수 numbers를 가져다
		 	sum += number;
		 }
		return sum;
	}
	 /*
	 이것이 우리가 익숙한 논리다
	 자, 만약 니가 이것을 한다면, 무엇이 일어날까 총합이 출력된다
	 출력==> 49
	 그리고 함수로 추출해 보자
	 */
	
	//이제 함수형 프로그래밍 방식으로 이것을 해보도록 하겠다 
	//함수형 프로그래밍 방식으로 어떻게 해야할까? 같은 방식으로 시작하겠지? mainmethod에서 작성...
}

--------------------------------------------------------------------------------------------------





/*
다음 연습문제 예제 ==>
이 단계에서 너의 연습문제는 이 리스트에서 홀수 숫자들만의 총합을 구해보는 것이다, 
여기에 있는 코드를 발전시켜 홀수만의 총합을 구해보도록 시도해 봐라
다음 학습에서 이 연습문제를 풀어 보겠다.



나의 답 ==>
int sum = numbers.stream().filter(element -> element%2 ==1 ).reduce(
				 0,
				 (number1, number2) -> number1 + number2);
*/
