
코딩 예제: 가장 큰 짝수 구하기

이번에는 여러분께 정수 리스트가 주어져 있습니다. 
여러분의 과제는 리스트의 가장 큰 짝수를 리턴하는 findMaxEvenNumber 함수를 완성하는 것입니다. 
만일 리스트가 null이거나 리스트에 짝수가 없다면 0을 리턴합니다.

• 엣지 케이스
1. 리스트는 null이 될 수 있습니다. 그런 경우에는 0을 리턴합니다.
2. 리스트는 비어 있을 수 있습니다. 역시 0을 리턴합니다.
3. 리스트에 홀수만 있을 수 있습니다. 그 경우에도 0을 리턴합니다.
4. 리스트에 음수도 있을 수 있습니다. 그런 경우에는 최대 짝수를 구할 때 고려합니다.

• 예시
그럼 몇 가지 예를 통해 문제와 해답을 이해해 보겠습니다.
예 1:
입력: [23, 45, 67, 12, 34, 56, 78]
출력: 78

예 2:
입력: [1, 3, 5, 7, 9]
출력: 0

예 3:
입력: null
출력: 0

• 참고사항

1. stream(): Java Collection인터페이스에 있는 함수입니다. 
   이 함수는 컬렉션에 있는 요소들로 이루어진 순차적인 스트림을 리턴합니다. 
   스트림은 병렬로, 혹은 순차적으로 처리할 수 있는 요소들로 된 시퀀스입니다.

2. filter(): Java Stream 인터페이스에 있는 함수입니다. 
   이 함수는 Predicate (불리언을 리턴하는 람다 함수)를 받아서 Predicate가 
   true를 리턴한 모든 요소들이 포함된 새로운 스트림을 리턴합니다.

3. max(): 역시 Java Stream인터페이스에 있는 함수입니다. 
   이 함수는 Comparator를 받고 제공된 Comparator에 따라 스트림의 최대 요소를 Optional로 감싸 리턴합니다.

4. Optional: null이 아닌 값을 포함하거나 포함하지 않을 수 있는 컨테이너 객체입니다. 
   만일 어떤 값이 존재하면 isPresent()는 true를 리턴합니다. 
   그렇지 않다면 객체가 비어 있는 것으로 간주되고isPresent()는 false를 리턴합니다. 
   Optional을 사용하여 NullPointerException을 피할 수 있습니다.

5. orElse(): Java Optional 클래스에 있는 메서드입니다. 
   이 메서드는 존재할 경우 값을 리턴하고 그렇지 않을 경우, 인수로서 전달된 기본 값을 리턴합니다.

6. Integer::compare: Java에서 사용하는 메서드 참조입니다.
   2개의 정수를 숫자로서 비교하는 Integer 클래스 안의 정적 메서드 compare를 참조하고 있습니다. 
   ::은 Java에서 메서드 또는 생성자를 참조하기 위해 사용하는 토큰입니다.



해당 코드는 기본 뼈대이다

import java.util.List;
import java.util.Optional;

public class FunctionalProgrammingMagic {

    public static int findMaxEvenNumber(List<Integer> numbers) {
        // Write your code here 
    }
}

해당 코드를 이용하여 지침을 완성하시오













-----------------------------------------------------------------------------------















힌트)















이 문제를 풀기 위한 간단한 힌트를 몇 개 드립니다.

힌트 1: 입력된 리스트가 null인지부터 검사합니다. 만일 그렇다면 즉시 0을 리턴합니다.
힌트 2: 다음으로 stream() 메서드를 사용하여 리스트로부터 정수 스트림을 만듭니다.
힌트 3: filter() 메서드와 람다식을 사용하여 짝수만 스트림에 남깁니다.
힌트 4: 필터링을 한 후에 Integer::compare를 비교기(comparator)로 하고 max() 에서드를 사용하여 최대 숫자를 구합니다.
힌트 5: max() 메서드는 Optional<Integer>를 리턴합니다. Optional이 비어 있으면(즉 짝수가 없으면)0을 리턴합니다.
힌트 6: 마지막으로 Optional이 비어 있지 않으면 Optional::get 또는 Optional::orElse를 사용하여 최대 짝수를 리턴합니다.

-----------------------------------------------------------------------------------














-----------------------------------------------------------------------------------















해답)




















import java.util.List;
import java.util.Optional;

public class FunctionalProgrammingMagic {

    public static int findMaxEvenNumber(List<Integer> numbers) {
        //첫 번째 조건은 간단하다 numbers가 null인지 확인
        if(numbers == null) {
            return 0;
        }
        //List를 가지고 stream을 호출 정수를 가진 stream을 만들고 이중 짝수이면서 최댓값을 찾아야 한다
        //그래서 filter를 호출 n을 가지고 나머지를 구한다 2로 나누고 값이 0인지 확인하게
        //이렇게 짝수만 모은 다음 이 짝수 중에서 최댓값을 찾아야 하는데, 이를 위해 정수 비교를 진행한다 Integer::compare로 한다
        //정수 비교이용해 걸러낸 짝수들로 구성된 정수 List에 최댓값을 찾는다 
        //!여기서 유의해야할 점은 여기서 Optinoal을 반환한다는 것이다 List에 짝수가 있을거라는 보장이 없고 그래서 Optional을 반환한다 maxEven이란 명으로
        //.stream.filter.max를 호출한 결과이다 그래서 존재한다면 짝수 최대값을 얻는다 
        //존재하지 않는다면 뭘 반환해야 하지? 0을 반환해야 한다 
        return Optional<Integer> maxEven = numbers.stream().filter(n -> n % 2 ==0).max(Integer::compare).orElse(0);

        //그러기 위해 return 키워드를 maxEven.orElse 호출해서 maxEven이 있다면 그대로 반환하고 없다면 0을 반환한다
        //Optional이라 이렇게 할 수 있었다
        return maxEven.orElse(0);

        /*
        결론)
        결과 값이 존재할 수도, 하지 않을 수도 있을때 존재한다면 maxEven을 그대로 반환하고
        없다면 0을 반환한다
        /*
    }
}

-----------------------------------------------------------------------------------


/*
정리)
이번 과제에선 함수형 프로그래밍 개념을 여럿 활용했다
stream 메소드로 List를 Stream으로 바꿨다
이건 자바의 Collection 인터페이스에 있는 함수이다
List를 Stream으로 바꿔준다, 그리고 filter를 썼는데 이건 주어진 Condition(조건)에 따라 수행된다
이 Condition(조건)에 맞는 것만 통과가 되는 것이다
이 Condition(조건)에 맞는 것들은 Stream으로 만드는 것이다

이어서 max 메소드를 호출해서 걸러내진 목록에서, 제일 큰 정수를 찾아내기 위한 목적이었다
그걸위해 Integer::compare 메소드 참조를 이용했다

결과로 Optional를 받았다 
Optional은 컨테이너 객체로 null이 아닌 값을 가지고 있을 수도 없을 수도 있다
값이 있다면 Optional이 반환하는 건 true이다
없다면 빈 객체로 인식하여 false를 반환한다

또 우리가 활용한 건 orElse 메소드인데 
이 함수는 자바의 Optional클래스가 제공하는 것이다
값이 존재한다면 그 값을 반환한다, 짝수 최댓값이 존재하면 해당 값을 반환한다
없다면 기본 값, 즉 인수를 반환한다
*/
