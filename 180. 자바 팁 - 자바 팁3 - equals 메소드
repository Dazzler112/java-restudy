

자바 프로그래밍에 관한 이번 tip에는 equals() 메소드에 대한 내용을 알아보도록 하자 


-----------------------------------------------------------------------------------------------------------------



🟢 EqualsRunner 클래스파일



package equals;

import java.util.*;

//1: 여기서 간단한 클래스를 생성하려 한다.. class Client라 적고, 주민등록증을 가지고 있다고 가정해 보자
//이를 개인적인 정보로 처리하기 위해, private int id;라 적어주고 constructor와 fields를 사용하는 Generate Constructor를 추가해준다, 여기에 ID를 입력받는 것이다
//equals() 에 대해 알아볼 때 배웠던 중요한 것 중 하나가 기본적으로 두 개의 객체는 같은 객체일 경우 등호를 사용하여 같다고 해 줄수 있다 이게 무슨뜻일까? //1-1: 메인메소드로..
//
class Client {
	private int id;

	public Client(int id) {
		super();
		this.id = id;
	}


	
	//2: equals() 메스도의 사용에 대해서는 조금 이해가 가는데, 그렇다면 hashCode()는 왜 등장한 것일까?
	//걱정하지 않아도 된다 이에 대한 이야기는 이후에 해보도록 하겠다 일단 지금은, 아래에 다음과 같이 해주도록 하자
	//마우스의 오른쪽 버튼을 눌러주고 Source로 돌아가, Generate hashCode() and equals()라는 선택지를 눌러준다 hashCode()와 equals()에 대한 코드를 직접 작성하는 대신, 이클립스로 생성해 보도록 하겠다
	//hashCode()와 equals()를 생성해주고 ID를 이용해 서로를 비교해 주도록 하겠다
	//여기 보다시피 이것이 hashCode()와 equals()에 대해 기본적으로 실행되는 것들이다
	/* 작성한 Generate hashCode and equals 설명 ==>
	obj를 대신해 이부분을 that이라고 불러주겠다 이제 우리가 비교해 주어야 하는 대상은 that이다 이게 현재의 객체이다,
	만약 this(이것)과 that(저것)이 같은 것을 가르킨다면 true라는 값을 반환받을 수 있을 것이다 그리고 만약 등호의 가치가 없다면, (that == null)이렇게 null이 출력되었으므로 두가지가 같지 않다는 뜻이 된다 그러므로 false라는 답변이 출력된다
	그리고 여기서 비교 대상은 class인데,	if (getClass() != that.getClass()) return false; 만약 class가 같지 않다면, 다른 임의의 클래스에 해당한다면, 결과로 false를 반환한다
	보다시피 equals()가 허용하는 parameter는 type Object로 부터 온 것임을 알 수 있다 ( public boolean equals(Object that) { ) type Client에 해당하는 값이 아니라 type Object에 해당하는 값이다
	이 부분이 기억하고 넘어가야 할 또 다른 내용이다
	그리고 Client other = (Client) that; 여기에서는 두 명의 고객을 입력받아 ID를 비교, 대조하고 있다
	이 부분의 논리가 조금 헷갈려도 걱정할 필요가 없다 시도해보고, 디버그해 보면 여기서 어떤 일이 일어나는 것인지 쉽게 이해가 가능할 것이다
	*/ //2-1: 다시 메인메소드로..
	//equals 
	//hashcode
	
	@Override
	public int hashCode() {
		return Objects.hash(id);
	}
	
	@Override
	public boolean equals(Object that) {
		if (this == that)
			return true;
		if (that == null)
			return false;
		if (getClass() != that.getClass())
			return false;
		Client other = (Client) that;
		return id == other.id;
	}
}

public class EqualsRunner {

	
	public static void main(String[] args) {
		
		//1-1: 여기 두 명의 고객을 생성해 보자 먼저 Client c1 = new Client(1)라고 적어주고, 같은 ID의 두 번째 고객도 만들어 주자
		//보다시피 두 고객의 같은 신상정보를 갖고 있다 그러므로 기본적으로 이걸 보면 두 고객이 같은 사람이라 생각하게 될 것이다
		//여기서 equals()라는 메소드를 사용해 보도록 하겠다 syso를 적어주고, c1.equals(c2)라고 적어주겠다 무엇이 출력될 것 같냐?
		Client c1 = new Client(1);
		Client c2 = new Client(1);
//		System.out.println(c1.equals(c2));
		/*출력결과 ==>
		false
		false, 즉 거짓이라는 값이 출력된다 
		같은 신상 정보, 즉 ID를 갖고있다고 해도, 기본적으로 equal()이라는 메소드는 두 물체가 정확히 같은 객체일 때만 비교가 가능하므로 값은 여기서 다루지 않는다 
		그저 두 개가 같은 문체인지만을 확인한다 아니지? c1은 c2와 엄연히 다르다 
		*/
		
		//그렇다면 c1.equals(c1)이라고 적으면 결과가 어떻게 나올까?
//		System.out.println(c1.equals(c1));
		/* 출력결과 ==>
		true
		true,즉 참이 나올 것이다 둘은 같은 대상이기 때문이다 
		*/
		
		//c2.equals(c2)도 해 보겠다
//		System.out.println(c2.equals(c2));
		/*
		true 
		같은 결과가 나왔다 하지만, c1.equals(c2)를 시도해보면 false가 나온다 
		*/
		
		//equals()에서 기본 실행 값은 Object 클래스로 부터 설정이 된다 알다시피 자바에서 모든 클래스 중 상속이 이루어지지 않는 것들의 경우에는 Object 클래스로부터 상속을 받는다
		//즉 class Client { 여기서는 서로 같은 대상일 경우에만 비교를 시작하는 기본 실행 값을 Object 클래스로부터 상속받고 있다
		//특정한 부분에 대해 같은 메모리를 갖고 있는 부분을 말이다 (  Client c1 = new Client(1); Client c2 = new Client(1); ) 이런 경우만 비교와 대조를 시작한다
		//여기서 System.out.println(c2.equals(c2));이 작업에 논리를 추가해 주도록 하겠다 여기서 이 객체들의 ID를 비교해 보도록 하는 거다
		//이런 경우에 equals() 와 hashCode()메소드를 사용해야 하난 상황이 된다 //2: Client 클래스로..
	
		//2-1: 이제 여기서 이 프로그램을 실행해 보겠다 보다시피 equals()메소드를 사용하였고,
		System.out.println(c1.equals(c2));
		/*HashCode, equals 생성후 실행 ==>
		true
		'true'라는 값이 출력된 것을 확인할 수 있다 
		이는 정확히 말하면 1과 2를 비교한 것이다 이제 
		*/
		
		//이게 잘 작동하는 것이 맞는지 확인하기 위해 c3을 새롭게 만들어서 이를 id2와 비교해 보겠다 c1.equals(c3)라 적어주겠다 그리고 실행..
		Client c3 = new Client(2);
		System.out.println(c1.equals(c3));
		/* 실행결과 ==>
		true
		false
		false라는 값이 반환되었다 
		정리하자면 c1과 c3은 다른 id를 갖는다 그러나 c1과 c2는 동일하다
		그러므로 여기선 true가 반환되는 것이다
		*/
	}

}

-----------------------------------------------------------------------------------------------------------------






/*
정리)
즉, 이를 정리하자면,
이번 단계에선 Object 안에 있는 메소드 equals()에 대해 가볍게 다루어 보았다
기본적으로 equals()라는 메소드는 Object에 포함되는 함수로써, 같은 대상일 경우에만 비교할 수 있다
여기서 논리연산자는 이런식으로 작성이 될 것이다
	@Override
	public boolean equals(Object that) {
		if (this == that)
			return true;
		if (that == null)
			return false;
		if (getClass() != that.getClass())
			return false;
		Client other = (Client) that;
		return id == other.id;
	}
	
this==that이면 ture가 출력되고 아니라면 false 값이 반환된다 
이게 규칙적인 default implementation으로, Object안에 존재한다
그러므로 이 모든 코드는 거기 존재하지 않을 것이다

그리고 이클립스를 사용하여 소비자들의 ID를 비교하는 Implementation도 만들어 보았다
Client other = (Client) that; ID가 서로 일치한다면 true가 출력될 것이다 그리고 일치하지 않는다면 false가 반환되겠지

여기서 이해가 잘 안가는 한가지가 있을 것이라고 예상하는데,hashCode()메소드를 왜 만들어 냈는지 말이다
이부분은 다음 학습에 살펴보도록 하겠다
*/
