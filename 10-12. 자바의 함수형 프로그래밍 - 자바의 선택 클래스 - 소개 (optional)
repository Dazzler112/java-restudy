
이번 학습에선 옵셔널에 대해 배울 것이다.
옵셔널에 대한 논의를 지난 학습에서 접해본 적이 있다
먼저 옵셔널에서 소개할 중요한 메소드와 정확히 어느 때 옵셔널을 사용할 수 있을지 알아보겠다

옵셔널은 Java8에서 새로 소개된 기능중 하나이다
'null pointer exception' 이라는 오류를 피하고자 사용한다
일반적으로, 다양한 값들을 리스트로 가지고 있고 이 자료들에 접근하려고 할 때.
만약 마지막에 결과로 아무 일도 일어나지 않는다면 보통 'null'값이 반환된 것이다
이때 API 사용자들은 Null값이 환원됐다는 사실을 알지 못한다.
그러므로 object()함수를 사용하는 대신, 옵셔널로 값을 환원받을 수 있다
어떻게 하는건지 알아보자

간단한 예시를 만들어 보자 
그리고 원하는 숫자들을 걸러주어야겠지? 가장먼저 스트림으로 변환해 주도록 하겠다
그리고 짝수들만 걸러줄 것이다 filter()함수 안에 (n -> n % 2 == 0)를 적어주도록 하겠다
그다음 max를 적어 최댓값을 찾아주자
max를 찾아주는 방법은 저번에 배웠지만 괄호안 n1,n2를 적은후 이어서 Integer.compare(n1,n2)를 적어 숫자와 비교해 준다
List.of(23, 45, 67,12).stream().filter(n -> n % 2 == 0).max((n1,n2) -> Integer.compare(n1, n2));
이 작업은 최대값을 반환할 것이다 전에 알아낸 것처럼, 여기서 옵셔널 값을 반환한다.
jshell> List.of(23, 45, 67,12).stream().filter(n -> n % 2 == 0).max((n1,n2) -> Integer.compare(n1, n2));
$3 ==> Optional[12]
옵셔널 값을 얻으려면 $3.get()을 적으면 된다 맞지?
jshell> $3.get();
$4 ==> 12
그래서 $3.get()을 사용하면 12라는 값을 얻게 된다
즉, 짝수 중 최대값이 12인 것이다 

• isPresent() (검산)
옵셔널에는 값에 대한 검산을 할 수도 있다 isPresent()를 적어주면 된다
이렇게 isPresent()를 적어주면
jshell> $3.isPresent();
$5 ==> true
참이라는 값이 나왔다
그러므로 현재 값이 존재한다


이번엔 짝수를 포함하지 않는 스트림을 만들어 보겠다 Ctrl + A를 눌러 문장의 처음으로 이동해 주고, 짝수들을 지워주자
List.of(23, 45, 67).stream().filter(n -> n % 2 == 0).max((n1,n2) -> Integer.compare(n1, n2));
이제 리스트안에 짝수들은 존재하지 않는다 보는 대로 이 코드는 짝수 중 최댓값을 출력하는 코드인데
리스트 안에 더이상 짝수가 존재하지 않는다

jshell> List.of(23, 45, 67).stream().filter(n -> n % 2 == 0).max((n1,n2) -> Integer.compare(n1, n2));
$6 ==> Optional.empty
그러므로 이 코드를 실행하면 일시적인 변수 $6이 생성되었고,
Optional.empty 가 반환된 것을 확인할 수 있다 null을 반환하고 있지 않는다
짝수가 여기 존재하지 않으니, 짝수의 최대값은 존재하고 있지 않지만, null이라는 값을 반환하고 있지는 않다
그대신 Optional.empty라는 것이 출력되었다

이 경우에 대해서도 같은 연산이 가능하다 $6.isPresent()를 적어주고, 어떤 일이 벌어지는지 보자
jshell> $6.isPresent();
$7 ==> false
거짓이라고 출력되었다

현재 이 임시변수 안에 존재하는 요소가 없다
•orElse() (기본값 설정)
여기서, 기본값을 설정하고 싶다고 해보자 
$6.orElse(0)이라 적어주면?
jshell> $6.orElse(0);
$8 ==> 0
0이라는 값이 반환된다

기본값을 설정해 주는 것은 이 식에서도 가능하다 이전에 작성한 코드에서 orElse(0)라고 적어보겠다
List.of(23, 45, 67).stream().filter(n -> n % 2 == 0).max((n1,n2) -> Integer.compare(n1, n2)).orElse(0);
$9 ==> 0

이게 어떤 기능을 할까? 다시 34라는 숫자를 리스트에 추가해준 다음 실행해주면
jshell> List.of(23, 45, 67, 34).stream().filter(n -> n % 2 == 0).max((n1,n2) -> Integer.compare(n1, n2)).orElse(0);
$10 ==> 34
보다시피 orElse(0)라고 적는다는 것은 반환하는 값에 대해 기본값을 설정해 주는 것이다
만약에 반환할 값이 존재한다면 34를 반환할 것이고,
반환할 값이 존재하지 않는다면, 기본값 0을 반환하겠다

/*
orElse() 정리)
정리하면, 옵셔널은 null이라는 값을 반환하지 않기 위해 사용하는 방법이다
반환할 값이 존재하든 존재하지 않든, 옵셔널로 값을 반환할 수 있고, 
그리고 이게 스트림에 존재하는 대부분의 메소드가 하는일이다
max는 여기 포함되어도 되고, 안돼도 된다, min 또한 여기 포함되어도 되고, 안돼도 된다
스트림은 옵셔널의 값을 반환한다 그다음에 orElse를 사용하여 기본값을 설정할 수 있다
혹은 반환할 값이 존재한다고 확신하는 경우엔 반환되는 값을 바로 출력하는 코드를 작성해도 된다
*/




/*
정리)
오늘 학습에는, 옵셔널이 일어날 때 화면 뒤에서 어떤 과정을 거쳐서 일어나는 것인지 알아보았다
다음 학습에도 화면 뒤에서, 어떤 코드가 실행될 때의 구체적인 과정에 대해 알아보겠다
다음 시간에는 람다식의 작동 원리에 대해 알아보겠다
*/
