

이번 학습에서는 'Block'이라는 것에 대해 알아보도록 하겠다
if block, for block 등 block을 몇 번 이미 사용해 본 적이 있는데 
이번 학습에서는 더 자세하게 들여다보도록 하겠다


------------------------------------------------------------------------------------------------------------------


🟢 BlocksRunner 클래스파일



package tipAndTricks;

public interface BlocksRunner {
	
	public static void main(String[] args) {
		//1: 여기에 if문을 적어주도록 하겠다 if(3>2), 3이 2보다 크면 이라는 조건문을 적어주고, 이때 어떤 작업을 할지 적어주겠다
		//이 과정은 이미 전에 몇 번 해보았었다 여기서 중괄호{} 안에 있는 내용이 모두 block에 해당한다
		//즉, 다시 말해 이게 메소드 block에 해당한다 { System.out.println("3>2"); } 그리고 이건 code block으로, 코드 block이다
		//이것 말고도 else 조건 block과 더불어 다른 block들도 생성이 가능하다 
		/*▪주의점: 
		중요한 점 중 하나는 중괄호를 적지 않고서 
		if(3>2) 
		syso("3>2");  
		이렇게 코드를 적는 행동은 매우 나쁜 관행에 해당한다 이럴 경우 누군가가 이런식으로 코드를 추가로 작성하는 경우가 생길 수 있다
		if(3>2) 
		syso("3>2");  
		syso("3>2");
		그리고는 이렇게 생각하겠지? '이 코드는 if 조건문에 해당하지'하지만 사실은 여기서 첫 번째 문장만 if 조건문에 포함되는 코드이다 맞지?
		그러므로 if 안에 여러 문장을 넣어 주고 싶다면, block을 생성하는 과정이 꼭 필요하다
		if(3>2) {
		syso("3>2");  
		syso("3>2");
		}
		*/
		if(3>2) {
			System.out.println("3>2");
		}
		
		//재미있는 사실은 block을 만들기 위해 꼭 if 조건문이 필요한 것은 아니라는 것이다, 타당한 사실이다
		//여기 보는 것처럼 잘 적혔지? 또한 여기에서 변수를 선언하는 것도 가능하다 여기 이렇게 int i;라고 적어보겠다
		//block 안에서 변수를 생성해 주면, 그 블록 안에서만 유효하게 된다 
		
		//2: 빠르게 여기에 무언가 입력해 보도록 하자 syso("main")이라고 적어보도록 하겠다
		//즉 여기에 코드를 작성하여 문장으로 적는 것도 가능하고, 변수를 선언하거나 {]안에서 논리 연산자를 사용하는 것도 가능하다
		System.out.println("main");
		{
			int i;
			System.out.println("3>2");
			System.out.println("3>2");
		}
		//이 부분이나 블록 밖에서 syso(i)라고 적으면 이는 허용되지 않는 코드가 되겠지 (i cannot be resolved to a variable) 보다시피 i가 변수로써 선언이 이루어지지 않았다고 한다
		//그러므로 블록 안에서 선언된 변수처럼 이 안에서만 존재하는 문장들이 존재한다 //2: 위로 가서 작성
		System.out.println(i);
	}
}

------------------------------------------------------------------------------------------------------------------




이것은 특별한 tip에 해당한다 이런식의 작업을 해주는 코드는 교육자도 한번도 본 적이 없다고 한다
하지만 block에 대해 가장 중요한 것은 중괄호를 사용해야 한다는 점과, 특정한 block이 형성되도록 해주어야 한다는 점이다 if나 for, while 혹은 조건문이나 반복문을 사용하는 경우,
block을 잘 사용해주고 있는지 꼭 확인해 줘라 Block은 사용하기 매우 좋고 명확한 기능이다 
