

이번 학습에선 익명 클래스에 대해 알아보겠다
먼저 간단한 예시를 본 다음 익명 클래스가 무엇인지 알아보도록 하자


--------------------------------------------------------------------------------------------------------------


🟢 AnonymousClassRunner 클래스파일


package tipAndTricks.anonymous;

import java.util.*;

//2: class 'LengthComparator implements Comparator'를 입력하면 문자열을 비교해준다
//그리고 컴파일오류가 뜨는데 ctrl+1로 미구현 메소드를 추가해주자
class LengthComparator implements Comparator<String> {

	@Override
//그리고 구현 메소드 안에 return을 입력하고, 길이순 정렬을 해 볼것인데 문자열 str1, str2로 바꿔주겠다 길이를 비교해 봐야겠지? 'Integer.compare'를 입력하면 사용할 수 있는 메서드가 있다 여기 'str1.length(), str2.length()'를 입력해줘라
	public int compare(String str1, String str2) {
		return Integer.compare(str1.length(), str2.length());
	}
	//이전에 비교자를 다뤘을 때 했었지?//3: 다시 메인메소드 안으로...
}


public class AnonymousClassRunner {

	public static void main(String[] args) {
		//1: 먼저 문자열 리스트를 만들것이다 'List.of'라고 입력한다 리스트에 "Ant", "Cat", "Ball", "Elephant" 까지 해서 animals로 정하고 이 리스트를 정렬해 보겠다
		//그다음 새로운 배열 목록을 생성해서 수정할 수 있게 하는 것이다 new ArrayList라고 하면 자동으로 List.of가 변경 불가된다 그런데 변경 불가 말고 수정할 수 있으면 좋겠다 그래서 배열 목록을 만드는 것이다 ㅇㅋ?
		List<String> animals = new ArrayList<String>(
						List.of("Ant", "Cat", "Ball", "Elephant"));

		//일반적인 정렬을 위해 Collections.sort(animals)를 입력한다
		//그리고 animals를 syso메서드에 사용하면 어떻게 될까?? //실행..
//		Collections.sort(animals);
//					|
//					V
		//3: 'sort(animals, new LengthComparator)'를 입력하고 실행한다 //3-1: 실행하기
		Collections.sort(animals,new LengthComparator());
		System.out.println(animals);
		/*출력결과 ==>
		[Ant, Ball, Cat, Elephant]
		알파벳 순서대로 출력이 된다
		*/
		/*Collections 클래스 ==>
		@SuppressWarnings({"unchecked", "rawtypes"})
		    public static <T> void sort(List<T> list, Comparator<? super T> c) {
		        list.sort(c);
    	}
		분류에 오버라이딩 된 게 보인다 여기엔 Comparator(비교자)를 사용할 수도 있겠다
		만약 알파벳 정렬이 싫고 길이대로 정렬하고 싶으면 비교자를 만들면 된다
		*/
		//이전에 비교자를 만들어봤었다//2: 클래스 위로..
		
		
		/* 3-1 : 출력결과 ==>
		[Ant, Cat, Ball, Elephant]
		Ant, Cat, Ball, Elephant이 나온다 길이순으로 정렬된 걸 볼 수 있다 3글자,3글자,4글자,8글자
		저번 인터에피스 구현때 썼던 방식이다
		*/
		//그런데 사실 이렇게까지 할 필요가 없다 //이 클래스를 만들지 않고 해 보곘다
	}
}

--------------------------------------------------------------------------------------------------------------



● 익명클래스 사용시

--------------------------------------------------------------------------------------------------------------


🟢 AnonymousClassRunner2 클래스파일




package tipAndTricks.anonymous;

import java.util.*;

public class AnonymousClassRunner2 {

	public static void main(String[] args) {

		List<String> animals = new ArrayList<String>(
						List.of("Ant", "Cat", "Ball", "Elephant"));

//		Collections.sort(animals,new LengthComparator());
//						|
//						V
		//1: 여기에 new Comparator를 입력하고 중괄호를 넣어 인터페이스 메서드 전체를 구현할 수 있다
		//new Comparator에서 문자열만 비교하면 되니 <String> ctrl+1해서 미구현 메소드 구현해주고 문자열 자리에 str1, str2를 입력해주자
		Comparator<String> lengthComparator = new Comparator<String>() {
		@Override
		public int compare(String str1, String str2) {
			//여기서 하는 일은 이들을 비교하는 일이었지? return에 Integer.compare를 입력하고,str1.length(),str2.length()도 입력해준다
					return Integer.compare(str1.length(), str2.length());
			}
		};
		Collections.sort(animals,
					lengthComparator
		);
		//새 클래스를 생성해 복잡한 과정을 거치는 대신, sort(animals,new Comparator<String>()여기에 곧장 비교자를 구현한 것이다
		//public int compare(String str1, String str2) { 여기에 비교자 코드를 직접 써서 인스턴스를 바로 만든 것이다
		//이런 식으로 클래스를 만드는 것을 익명 클래스라고 하는데 이 클래스에는 이름이 없기 떄문이다 //실행해보자!
		System.out.println(animals);
		/*출력결과 ==>
		[Ant, Cat, Ball, Elephant]
		new Comparator<String>() 이 클래스는 이름이 없다 
		new Comparator<String>() {...}에서 마우스 우클릭 >Refactor > Extract Local variable 선택 , lengthComparator를 입력해주자 인스턴스가 생성되는 걸 확인할 수 있다
		*/
		
	}
}

--------------------------------------------------------------------------------------------------------------







/* 익명클래스 정리)
결과적으로 길이 비교자라는 이름의 인스턴스를 만든 것이다 하지만 클래스는 아니고, 이 클래스에는 이름이 없다
클래스의 인스턴스에는 이름이 있지만 이 클래스에는 이름이 없다 이렇게 이름이 없는 클래스를 익명 클래스라고 부른다
함수형 프로그래밍을 다룰 때 접했던 이야기 중 하나는 람다 표현식을 만드는 것이었다
람다 표현식은 단순히 함수형 인터페이스기 때문에 마찬가지로 이름이 없다 일종의 익명 클래스라고 볼 수 있다
그래서 Comparator<String> lengthComparator = new Comparator<String>() { 여기에 만든 lengthComparator와 같은 익명 클래스를 만들 시
대개 다른 곳에는 사용하지 않을 것을 주의해줘라 이럴 때는 클래스 생성, 위치 잡기, 유지하기 모두 불필요하다, 그러는 대신 바로 필요한 자리에 생성해서 사용하는 게 낫다
익명 클래스는 코드에 숨겨져 있으므로 사용할 때 조심해야 한다 완전히 숨어 있어서 어딘가에 유사한 논리가 실행되고 있는 걸 모를 수 있기 때문이다
	
● 사용시점
그러므로 논리가 절대 재사용되지 않을 것 같다고 100% 확신하는 경우에만 사용해라
*/
