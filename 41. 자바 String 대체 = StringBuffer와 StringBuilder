

jshell> "123"+"123"+"1234"+"123456"
$21 ==> "1231231234123456" //전체를 결합하는 스트링이 되었다
"123"+"123"+"1234"+"123456"이값이 4번째인스턴스 그리고 "123"+"123 이렇게 두 결합이 5번째 인스턴스 "123"+"123"+"1234"6번째 "123"+"123"+"1234"+"123456"다결합하는게 7번째 인스턴스다
이 단순한 결합을 실행하면서 7개의 인스턴스를 생성하고 있는것이다. "123"+"123"+"1234"+"123456"이 네개는 꼭 필요한 기본값이고
하지만 그외에 추가로 생성된는 객체 인스턴스가 굉장히 비효율적인 방법이다.

지금 이렇게 4가지 값이 있지만 만약 추가하는 스트링의 수가 200개라고 하면 불필요한 객체가 얼마나 많이 생길까
이런 걸 방지하기 위해 자바는 StringBuffer라는 또 다른 클래스를 제공하고 있다.
이건 자바에서 스트링을 생성할 수 있는 또 다른 클래스이다
하지만 사용하기가 스트링보다 쉽지 않다.

jshell> StringBuffer sb = new StringBuffer("TEst");
sb ==> TEst  
//!중요한 점은 스트링버퍼는 수정이 가능하다!

예를 들면 sb값에 "123"을 추가한다고 했을 때 여기는 간격을 주겠다.
jshell> sb.append(" 123");
$23 ==> TEst 123
//어떻게 됬을까?
jshell> sb
sb ==> TEst 123 //출력값이 바뀌었다 sb는 새로운 값을 가지게 되었다.
//스트링버퍼에 있는 값은 바뀔수 있다.

두번째값을 소문자로 바꾸겠다
jshell> sb.setCharAt(1,'e');

jshell> sb
sb ==> Test 123 //값이 바뀌었다. 이처럼 스트링버퍼는 값을 변경할 수 있다.
//!!값을 바꿀수 있다 !! 제일 중요한점
결합을 많이 수행해야 하는 경우에는 꼭 스트링 버퍼를 사용하길 추천한다

또 다른 스트링 빌더라는 다른 클래스가 있다.
스트링 버퍼와 굉장히 유사하다 하지만 최신 버전의 자바에만 제공이 된다.
/*
스트링버퍼는 멀티스레딩이 가능한 클래스이다 But 멀티스레딩이 가능하다는 것은
그것으로 인한 패널티 또한 있다는 뜻이 된다.
싱글스레드 시나리오의 경우 멀티스레딩을 할 때 가지는 복잡한 사항들이 없는데 반해
스트링 버퍼의  경우 속도가 매우 느려질 수 있고 그럴때 사용하는게 바로
*/
스트링 빌더이다!
(멀티스레딩 및 관련 사항은 나중에 더 자세히..)
다시말해 스트링 버퍼 대신 스트링 빌더를 사용하면 된다.
jshell> StringBuilder sb = new StringBuilder("test"); //코드적고 괄호안에 스트링을 넣으면 된다.
sb ==> test

//나중에 스트링 버퍼와 스트링 빌더의 API를 보면 서로 다른 메소드를 볼수 있는데
사실 기억해야 하는 건 이것이다 !굉장히 많은 스트링을 결합하거나 스트링 인스턴스를 많이 생성해야 한다면 대체할 수 있는것을 찾아라!
라는것이다
스트링 빌더든, 스트링 버퍼든 
멀티스레딩에 대해 신경 쓰고 싶지 않다면 '스트링빌더' 클래스를
그럼에도 조금 안전하게 코드를 진행하고 싶은 경우 '스트링퍼버' 클래스를 사용해보아라
