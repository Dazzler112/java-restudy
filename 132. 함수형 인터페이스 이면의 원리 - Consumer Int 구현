

이번에는 forEach가 사용될 때는 정확히 어떤 과정들이 일어나고 있는지 알아보자




------------------------------------------------------------------------------------------





package funtionalProgramming;

import java.util.*;
import java.util.function.*;


class EvenNumberPredicate implements Predicate<Integer>{

	@Override
	public boolean test(Integer number) { 

		return number %2 == 0;
	}
	
}

class SystemOutConsumer implements Consumer<Integer> {//Consumer를 적어준다 그리고 실행되지 않은 메소드를 추가해준다

	@Override
	public void accept(Integer number) {//그리고 실행되는 메소드를 적는다
		System.out.println(number);
		//다시 아래로
	}
	
}



public class LambdaBehindTheScreensRunner {
	
	
	
	public static void main(String[] args) {

		List.of(23, 43, 34, 45, 36, 48).stream()
				.filter(n -> n % 2 == 0)
				.forEach(e -> System.out.println(e));

		/*출력 ==>
		  34
		  36
		  48
		*/
		
		List.of(23, 43, 34, 45, 36, 48).stream()
		.filter(new EvenNumberPredicate())
		.forEach(new SystemOutConsumer()); //이제 이부분을 new SystemOut으로 대체해 주어야한다
		/*출력==>
		 34
		 36
		 48
		 34
		 36
		 48
	    */		
		/*
		forEach에 ctrl+클릭 하면
		void forEach(Consumer<? super T> action);
		
		여기 Consumer라고 적혀있다 정리하자면,forEach는 Consumer를 기반으로 하고 있다
		forEach는 Consumer에 해당하고,filter()함수 안에는 Predicate를 넣었다,
		Consumer안에는 무엇이 저장되어 있을까? 
		
		ctrl+클릭해보면 간단한 accept 메소드가 있다
		
		@FunctionalInterface
		public interface Consumer<T> {

    	void accept(T t);
    	
    	그렇다면 Consumer는 허용 메소드를 정의하는데, 여기서 무엇을 반환하냐?
    	아무것도 반환하지 않는다 그래서 Consumer라 불리게 된 것이다
    	그렇다면 forEach가 무슨일을 할 거라고 예상하나?
    	요소를 가져온 후에 가져온 요소로 무언가를 하는데 여기선 콘솔에 출력을 하고 있다
    	그러므로 어떤 것도 반환해줄 필요가 없다, 너가 다 써버린 것이다
    	
    	정리하자면 forEach가 실행되는 것의 바탕에는 Consumer 인터페이스가 있었다
    	
    	그렇다면 Consumer 인터페이스를 실행하려고 하면 어떤 것을 생성해 주어야 할까?
    	지금 바로 해보도록 하겠다 
    	우린 Consumer를 숫자로 바탕으로 생성하려 한다 다시 메인메소드 위로..
		*/
		//결과는 바뀌지 않았다 그러므로 여기 같은 값을 두 번 출력한다
	}
}





/*
정리)
람다를 이용한 척 번째 코드와 투 번째는 NumberPredicate SystemOutConsumer를 사용해서
우리가 직접 실행할 것을 커스텀하였다
너가 이해해야 할 가장 중요한 것은 forEach가 실행될 때, 뒤에 Consumer라는 인터페이스가 있고
이것을 실행할 때 생성되는 것은 Consumer 인터페이스 안에 존재하는 허용 메소드에 대한 정의이다
정리하면 화면 뒤에서 Consumer 인터페이스에 대한 코드 실행 허용이 일어나고 있고, 
그게 여기 보는 이것이다 .forEach(new SystemOutConsumer());

다음 단계에선 매핑이 사용될 때 정확히 어떤 일들이 일어나는지에 대해 알아보겠다
*/
