
이번 학습에선 try catch block에서 중요하게 다뤄지는 finally에 대해 배워보도록 하겠다
왜 finally가 필요한 것인지, 그리고 finally로 어떤 작업을 할 수 있는지 살펴볼 것이다


------------------------------------------------------------------------------------------

package exceptionHandling;

import java.util.*;

public class FinallyRunner {

	public static void main(String[] args) {
		//스캐너를 이용해 값을 입력받을 때, 사용자에게 특정한 값을 입력받기 위해 Scanner라는 클래스를 사용했다
		//사용자에게 어떤 값을 입력받고자 하는 것이니 System.in을 쓸것이다 System.out은 결과이고, in은 입력을 의미한다
		//Scanner에 관한 내용을 하나 추가하자면, Scanner를 사용한 후엔 scanner.close()를 붙여줘야 한다
		//Scanner.close()를 붙이지 않는다면 리소스가 유출되는 일이 생긴다 다시말해 자료중 일부가 새어나가는 일이 벌어지는 것이다
		Scanner scanner = null;
		try{
			scanner = new Scanner(System.in);
		
			//논리적 코드가 진행되는 와중에 공간들 사이에 어떤 코드가 존재한다고 해보자
			//이 공간들 사이에 어떤 배열이 존재한다고 해보자
			//요소가 4개인 배열을 생성하고 
			int[] numbers = {12, 3, 4, 5};
			
			//이들 중 인덱스 값으로 5를 갖는 수를 부르기 위해 int number = numbers[5];라 적어보도록 하겠다
			//이 프로그램을 실행하면 어떤 일이 일어날까? 예외적인 상황의 발생으로 오류가 생길 것이다
//			int number = numbers[5];
//			int number = numbers[2];
			int number = numbers[21];
			
			/*출력결과==>
			Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 4
			at onlineJavaStudy/exceptionHandling.FinallyRunner.main(FinallyRunner.java:22)
			*/
			//ArrayIndexOutOfBoundsException라고 출력된 것을 알 수 있다
			//int number = numbers[5];이줄의 코드가 예외를 만들고 있다
			
			//이제 여기에서 예외가 발생한다면 어떤 일이 생길까? syso를 적어주고 이를 이용해 "Before Scanner Close"를 출력해 주도록 하겠다
	 		//이제 Before Scanner Close가 출력이 될까?
//			System.out.println("Before Scanner Close");
			/*출력결과 ==>
			Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 4
			at onlineJavaStudy/exceptionHandling.FinallyRunner.main(FinallyRunner.java:22)
			안된다 예외가 생겼기 때문에 여기서 코드 진행이 끊킨다, 이 줄의 코드가 실행되지 않는다 
			그러므로 이 scanner는 열려있지만, 이 scanner는 닫히지 못했다
			이 과정을 여러번 반복하다 보면 메모리에 악영향을 주게 된다
			메모리 및 자료에서 하나의 객체가 사라지는 것은 큰 문제는 아니다
			하지만 이 코드의 조각이 만 번이 넘도록 실행된 코드이고, 혹은 1000번이나 10000번의 실행이 이루어진 것이다
			그렇다면 너는 여기서 객체들의 유출을 유발한다 이유는 이 부분의 코드가 예외를 만들어 내는 것과 더블어 scanner또한 닫히지 않았기 때문이다
			Scanner.close()가 항상 소환되리라는 것은 어떻게 확신할 수 있을까?
			여기서 finally block의 개념을 사용하여야 한다
			*/
			//먼저 try catch문으로 시작하겠다 ㅇㅋ?
		} catch (Exception e){
			e.printStackTrace();
			/*
			java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 4
			at onlineJavaStudy/exceptionHandling.FinallyRunner.main(FinallyRunner.java:23)
			try catch문을 완성하니 e.printStackTrace()가 출력된 것을 확인할 수있다
			*/
		} finally {
			//scanner에 컴파일 에러가 생기는데 scanner가 현재 이용 불가능한 block에서 정의되었기 때문이다
			//그러므로 Scanner scanner를 밖으로 옮겨주고 null값을, try 안에 scanner=를 적어주도록 하자 이부분은 new Scanner가 될 것이다
			//syso도 이부분으로 가져오겠다 그리고 이제 어떤 결과가 나오는지 살펴보도록 하자
			System.out.println("Before Scanner Close");
			
			if(scanner != null) {
				scanner.close();
			}
			/*출력결과 ==>
			java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 4
			at onlineJavaStudy/exceptionHandling.FinallyRunner.main(FinallyRunner.java:23)
			Before Scanner Close
			Just before closing out main
			Before Scanner Close()가 출력되었고, 이전에 scanner.close();가 불렸다
			그러고 나서 Just before closing out main이라는 문장이 출력되었다, 맞지?
			*/
			
			/* 코드 정리==>
			여기서 일어난 일들을 정리해 보면,
			finally가 포함된 이 부분의 코드가 항상 실행된다 그러므로 예외가 생기든 생기지 않든, 이 부분의 코드는 실행이 되는 것이다
			예를 들어 number[2]에 접근하고 싶다고 해보자 이렇게 적으면 어떤 결과가 나올까?
			Before Scanner Close
			Just before closing out main
			코드가 마침내 실행되었다 그리하여 Befor Scanner Close가 출력되었다
			
			만약 예외적인 상황이 생긴다면 어떨까? 
			java.lang.ArrayIndexOutOfBoundsException: Index 21 out of bounds for length 4
			at onlineJavaStudy/exceptionHandling.FinallyRunner.main(FinallyRunner.java:25)
			Before Scanner Close
			Just before closing out main
			이경우에도 코드는 결국 끝까지 실행된다
			*/
			
			/*
• finally 정리	
			그러므로 여기서 기억해야 할 중요한 것 중 하나는 코드는 finally에서, 결국에는 실행이 된다는 사실이다
			그래서 finally를 사용해 생성된 모든 객체가 닫힌 상태가 되었는지를 확인해 주는 것이다
			가끔 이에 대해 정말 확실하게 확인하고 싶은 경우에 주로 사용하는데, 예를 들어 scanner의 생성으로 
			예외적인 상황이 생길 수도 있다 이를 확인하기 위해 if(scanner != null)라고 적어주면 끝이다
			이는 sacnner.close()는 scanner에 가치가 존재하지 않는 경우만 소환되니 이에 대한 확인을 할 수 있다
			이게 사람들이 예외를 교정하는 과정에서 다양한 공간들에서 null check를 진행하는 이유이다
			if(scanner != null) {
				scanner.close();
			}
			만약 코드를 작성한 줄들이 예외를 발생시키면 Scanner가 무가치 상태가 됨으로써 확신을 심어준다
			그리하여 이 부분이 출력되고 나서 코드에서 나오게 된다
			*/
			
		}
		
		//그러고 나서 이 부분에 코드를 작성해 주면, 코드가 실행 이후에 Just Before closing out main 이라는 문구가 출력된 것을 확인할 수 있을 것이다
		System.out.println("Just before closing out main");
		/*출력결과==>
		java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 4
		at onlineJavaStudy/exceptionHandling.FinallyRunner.main(FinallyRunner.java:23)
		Just before closing out main
		결론적으로 예외처리가 되었으나, stacktrace를 출력하고, 이후 줄에 적힌 식들이 잘 실행이 된다
		*/
		
		//하지만 이게 끝이 아니라, 여기서 어떤 것을 보장하도록 하려한다 scanner.close()가 불리는지의 여부를 확실하게 하고싶은 것! 
		//예외가 존재하는 상태에서 scanner.close()가 불렸는지 아닌지에 대해 어떻게 확신할 수 있을까?
		
		//이는 scanner.close()를 finally block이라고 하는 것으로 옮겨주면 된다 //finally block으로...
	}
}

------------------------------------------------------------------------------------------






/*
정리)
이번 학습에선 finally에 대해 배웠다 작성한 코드에서 나오기 전에 생성된 모든 것들이 닫혔는지도 확인해 보았다 
이 작업을 할 수 있도록 finally가 도와준다 예외가 발생하였는지 발생하지 않았는지와 관계없이
어떤 코드를 실행할 수 있도록 도와준다
*/
