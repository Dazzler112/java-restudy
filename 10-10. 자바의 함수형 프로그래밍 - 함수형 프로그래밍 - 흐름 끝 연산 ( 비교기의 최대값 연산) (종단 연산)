
이번 학습은 스트림의 종단 연산을 다뤄보곘다
종단 연산의 결과는 보통 한 개의 값이다
숫자들의 총합, 평균, 최소나 최대가 될 수도 있고
아니면 리스트일 수도 있다
즉, 스트림에 종단 연산의 결과는 하나의 값이다
이미 총합을 얻기 위해 기본적인 종단 연산을 다뤄봤었다 reduce를 사용했었다

• reduce 재학습
이전 강의에 배웠던 IntStream을 사용해 보겠다
IntStream.range인대 첫 10개의 숫자를 더하는 것으로 해 보겠다 reduce초기값은 0으로 하고, 다음 넘버는 더해준다 아주 간단하다
jshell> IntStream.range(1,11).reduce(0, (n1 , n2) -> n1 + n2 );
$1 ==> 55

전에는, 10개 숫자의 총합을 얻기 위해 일시적 변수 등으로 많은 코드를 써야 했다
함수형 프로그래밍에 그런건 필요 없다 왜냐면
함수를 reduce메서드에 매개변수로 보낼 수 있기 때문이다
reduce의 역할을 생각해보자 숫자 스트림을 하나의 결과값으로 변환한다
이게 종단 연산이라 불리는 것이다

종단 함수는 여러 가지가 있다
간단한 리스트를 만들자
숫자 몇 개의 리스트가 있다고 하자 34와 53이 있고, 최대값을 구할 것이다 어떻게 하면 될까?
첫번째는 stream()을 한다음 스트림에 max()라는 메서드가 있다 호출할 수 있을까? No!
안된다.
jshell> List.of(23,12,34,53).stream().max();
|  Error:
|  method max in interface java.util.stream.Stream<T> cannot be applied to given types;
|    required: java.util.Comparator<? super java.lang.Integer>
|    found:    no arguments
|    reason: actual and formal argument lists differ in length
|  List.of(23,12,34,53).stream().max();
|  ^-------------------------------^
뭐라고 나오냐? 주어진 타입에 인터페이스 스트림 안의 max 메서드가 적용될 수 없다고 나온다

• 비교자 사용해서 최댓값 알아보기(Collection 수업때 배운것)
즉, 비교자 인터페이스 구현을 전달해야 한다는 것이다
여기서는 무엇을 비교할까? 단순한 숫자들을 비교하는 것이다
이 비교를 해줄 함수를 어떻게 만들까? (n1, n2)라고 하고 두 숫자를 비교하는 것이다
정수를 사용하고, 두 숫자를 비교할 것이다. 무엇을 입력해야 할까? Integer.compare을 사용한다
Integer.compare()를 입력하고 (n1,n2)까지
이제 결과값이 나올까?
jshell> List.of(23,12,34,53).stream().max((n1,n2) -> Integer.compare(n1,n2));
$2 ==> Optional[53]
아니고, optional를 받았다

• optional?
Optional은 자바 8부터 도입된 타입이다 생각해 보자
이 리스트가 아무 값도 없다면, 어떤 값이 되돌아 와야 할까? 무엇이 최대값이지?
일반적으로 프로그래밍에서는 null이 나온다 이것이 기대하는 결과값이다
하지만 null 사용은 안 좋기에 자바가 optional을 도입한 것이다
최대값을 구하면, 결과값이 있을 수도 없을 수도 있는것이다
optional은 이런 상황에서 도와준다
optional 객체에 물어보고 결과가 있는지 확인할 수 있다
예를 들어, $2라 하고 여기에 존재하는 메서드를 볼 수 있다
jshell> $2.
equals(            filter(            flatMap(           get()              getClass()         hashCode()
ifPresent(         ifPresentOrElse(   isEmpty()          isPresent()        map(               notify()
notifyAll()        or(                orElse(            orElseGet(         orElseThrow(       stream()
toString()         wait(
jshell> $2.
값이 존재하는 지 물어볼 수 있다 'isPresent' 같은데
jshell> $2.isPresent();
$3 ==> true
여기에는 값이 존재한다 왜냐면 이 특정한 것에는 최대값이 있기때문이다

그럼, 이것을 실행해 보자 
어떻게 최대값을 구하지?코드를 다시 돌아가서 최대값을 어떻게 구해야 할까? get을 사용하여 53을 돌려받는다
jshell> List.of(23,12,34,53).stream().max((n1,n2) -> Integer.compare(n1,n2)).get();
$4 ==> 53




/*
정리)
지금까지 한 것을 복습해 보자
우리는 reduce라는 제일 기초적인 종단 연산을 다뤄봤다
reduce는 스트림 리스트를 하나의 결과로 줄이고 줄이기 위해 사용한 함수는 총합이었다

또한 다뤄본 두 번째 종단 연산은 스트림에서 최대값을 구해 비교자(compare) 구현으로 보내는 것이였다
괄호 안의 n1과 n2, 그리고 람다 표현 연산자를 이용해
Integer.compare(n1,n2)를 입력했다
(n1,n2) -> Integer.compare(n1,n2) 이렇게 숫자를 비교할 수 있었다
숫자를 늘어나는 순서로 배열한 것이다 최대값을 구하려면, 마지막 요소를 되돌려줄 것이고
그래서 53 값을 되돌려준 것이다

(n1,n2) -> Integer.compare(n1,n2)).get()
어떻게 이 코드가 

/*class AcendingStudentComparator implements Comparator<Student> {
	@Override
	public int compare(Student student1, Student student2) {
		return Integer.compare(student1.getId(), student2.getId());
	}
}
*/
이코드와 같은건지 궁금할 것이다
정확히는 똑같지는 않다 여기서는 숫자를 저기선 학생을 쓴 것이다 ok?
즉 하나는 학생을 비교하고 하나는 정수를 비교하는 것이었다

하지만 학생에선 비교를 위해 많은 코드를 사용했다
하지만 여기List.of(23,12,34,53).stream().max((n1,n2) -> Integer.compare(n1,n2)).get();는 단지 여섯줄의 코드뿐이다
저 많은 게 어떻게 간단한 구문으로 대체될 수 있을까?
함수형 인터페이스라는 개념이 있다 종단 연산을 마지막으로 다루는 시간에 
함수형 인터페이스에 대해 자세히 알아보겠다

또 optional이 가능한 다른 연산이 있는가 궁금할 것이다 이것 또한 나중에 다뤄보겠다
*/
