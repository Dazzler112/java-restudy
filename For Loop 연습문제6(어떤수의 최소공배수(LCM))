
코딩 예제: 어떤 수의 최소공배수(LCM)

BiNumber 클래스와 2개의 정수 속성 number1및 number2가 있습니다. 
여러분의 과제는 BiNumber클래스 안에서 calculateLCM() 메서드를 완성하는 것입니다.

calculateLCM() 메서드는 number1과 number2의 최소공배수(LCM)를 계산하여 리턴해야 합니다.

음수의 최소공배수는 정의되지 않으므로 number1또는 number2가 음수라면 메서드는 -1을 리턴해야 합니다.

0과 다른 숫자의 최소공배수는 0이므로 number1또는 number2가 0이라면 메서드는 0을 리턴해야 합니다.

-수학식
두 정수 a와 b의 최소공배수(LCM)는 a와 b 모두에 의해 나누어 떨어지는 가장 작은 양의 정수입니다. 
다른 말로 하자면 a와 b의 LCM은 a와 b의 가장 작은 배수입니다.

예시: a가 6이고 b가 8이라면 6과 8의 LCM은 24입니다. 왜냐면 24는 6과 8의 배수인 가장 작은 숫자이기 때문입니다.

-다른 예
number1이 5이고 number2가 10일 때 calculateLCM()를 호출하면 10이 리턴되어야 합니다.
number1이 0이고 number2가 5일 때 calculateLCM()를 호출하면 0이 리턴되어야 합니다.
number1이 -2이고 number2가 5일 때 calculateLCM()를 호출하면 -1이 리턴되어야 합니다.

-논리

a와 b의 LCM은 언제나 a와 b의 배수입니다.

먼저 a와 b의 최댓값을 구하는 방법이 있습니다. 그걸 max라고 합니다.

만일 max가 a와 b로 나누어 떨어지면 max는 LCM입니다.

그렇지 않을 경우, 우리는 while 반복문을 사용하여 max의 배수가 a와 b에 의해 모두 나누어 떨어지는지 검사할 수 있습니다.

-단계별 예시
다음은 단계별 예시입니다.
number1= 5, number2= 10일 경우:
• number1과 number2의 최댓값은 10입니다. 그러므로 lcm = 10부터 시작합니다.
• 10은 5와 10으로 모두 나누어 떨어지므로 lcm = 10은 5와 10의 LCM입니다.

number1= 6, number2= 8인 경우:
• number1과 number2의 최댓값은 8입니다. 그러므로 lcm = 8부터 시작합니다.
• 8은 6으로 나누어 떨어지지 않습니다.
• lcm을 8(max)만큼 증가시켜 lcm = 16을 얻습니다.
• 16은 6과 8로 나누어 떨어지지 않습니다. 그러므로 lcm을 8만큼 증가시켜 lcm = 24를 얻습니다.
• 24는 6과 8로 모두 나누어 떨어지므로 lcm = 24가 6과 8의 LCM입니다.

다음은 기본 로직이다

public class BiNumber {

    private int number1;
    private int number2;

    /**
     * Constructor that initializes the two numbers.
     * @param number1: The first number.
     * @param number2: The second number.
     */
    public BiNumber(int number1, int number2) {
        this.number1 = number1;
        this.number2 = number2;
    }

    /**
     * Getter for the first number.
     * @return the first number.
     */
    public int getNumber1() {
        return number1;
    }

    /**
     * Getter for the second number.
     * @return the second number.
     */
    public int getNumber2() {
        return number2;
    }

    /**
     * Calculates and returns the least common multiple (LCM) of the two numbers.
     * If either number is negative, returns -1 as the LCM for negative numbers is undefined.
     * If either number is zero, returns 0 as the LCM of 0 and any other number is 0.
     * @return LCM of the two numbers, or -1 if either number is negative, or 0 if either number is zero.
     */
    public int calculateLCM() {
        // TODO: Write your code here
        
    }
}

//위의 코드로 최소공배수를 구하여라









----------------------------------------------------------------------------------------









힌트








1. 최댓값 구하기: Math.max(number1, number2)를 사용하여 number1과 number2의 최댓값을 구합니다. 
그 최댓값을 max와lcm에 저장합니다. 이것이 LCM을 계산하기 위한 시작점이 될 것입니다.

2. while 반복문: 중단될 때까지 무한히 실행되는 while 반복문을 시작합니다. 
이 반복문 안에서 lcm이 number1과 number2로 모두 나누어 떨어지는지 검사합니다. 
만일 그렇다면 반복문을 중단합니다. 그렇지 않다면 lcm을 max만큼 증가시킵니다.

3. 결과 리턴: 마지막으로, 반복문이 중단된 후에 계산된 lcm을 리턴합니다.

----------------------------------------------------------------------------------------









----------------------------------------------------------------------------------------














해답













public class BiNumber {

    private int number1;
    private int number2;

    public BiNumber(int number1, int number2) {
        this.number1 = number1;
        this.number2 = number2;
    }

    public int getNumber1() {
        return number1;
    }

    public int getNumber2() {
        return number2;
    }

    public int calculateLCM() 
        //1.에지케이스 먼저 작성
      if(number1 < 0 || number2 < 0) {
          return -1;
      }
      if(number == 0 || number2 == 0) {
          return 0;
      }

      //1번 2번 숫자가 있다 가장 먼저 알아내야 할 것은 최대값이다.
      //Math.max란 함수가 있다 숫자를 전달하면 몇개의 숫자 사이의 최대값을 얻을수 있다.
      int max = Math.max(number1, number2);
      //우리가 확인하고자 하는 초기 LCM은 Max이다
      int lcm = max; //따라서 첫번째 값은 max이다 그다음 while루프를 작성해야한다.
      while(true) {//while true를 작성해야한다 하지만 true로 하면 이것은 무한루프가 될것이다. 이를 벗어나기 위해 휴식을 사용할 것이다.
          boolean isFianlLcm = lcm % number1 ==0 && lcm % number2 ==0//여기서 할일은 불린 변수를 만드는 것이다 그래서 boolean이 최종값이다. //하지만 lcm의 최종값일까 어떻게 찾을수 있을까?
                                ㄴ//Lcm을 이 두숫자로 나누고 나머지가 두숫자 모두 0인지 확인하면 찾을수 있다.
                                //⁂ LCM모드 번호1은 0과 같고 LCM모드 번호2는 0과 같다고 하겠다.
          if(isFinalLcm) {
              return lcm;
          }
          //다음 해야할 일은 배수를 찾는일이다. //따라서 예를들면 8이면 16을 찾아야 한다. 16이면 8을 더하면 된다. 24
          //⁂ LCM 더하기는 Max와 같다.
          lcm += max; //그래서 LCM에 Max를 더할것이다. // 8 + 8 + 8 //if문 조건을 통과하지 못하면 최대 수만큼 계속 더해주고 다시 if문으로 들어가는 loop문 완성
      }
    }
}

----------------------------------------------------------------------------------------
