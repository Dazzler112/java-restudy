
코딩 예제: 어떤 수의 최대공약수(GCD)
이번 과제에서 여러분에게는 두 정수의 최대공약수(GCD)를 계산하는 미완성인 Java 프로그램 BiNumber가 주어져 있습니다. 
두 수의 최대공약수는 그 두 수를 나머지 없이 나누는 가장 큰 수입니다.

BiNumber클래스는 2개의 정수를 나타내는 2개의 프라이빗 필드 number1과 number2와 함께 이미 정의되어 있습니다. 
새로운 BiNumber를 생성하는 생성자와 number1과 number2의 게터 메서드들도 제공되어 있습니다.

여러분의 과제는 number1과 number2의 GCD를 리턴하는 calculateGCD() 메서드를 완성하는 것입니다.

-최대공약수(GCD)란 무엇일까요?
두 수의 GCD는 다음과 같이 해서 구할 수 있습니다.
1. 각각의 수의 모든 약수들로 이루어진 리스트를 만듭니다.
2. 두 리스트에 모두 나온 가장 큰 수를 구합니다.

예를 들어 48과 18의 GCD를 구하려고 한다면
1. 48의 약수는 1, 2, 3, 4, 6, 8, 12, 16, 24, 48입니다.
2. 18의 약수는 1, 2, 3, 6, 9, 18입니다.
3. 공통 약수(공약수)는 1, 2, 3, 6입니다.
4. 그러므로 최대공약수(GCD)는 6입니다.

위와 비슷하게, 20과 15의 GCD는 다음과 같이 구할 수 있습니다.
1. 20의 약수는 1, 2, 4, 5, 10, 20입니다.
2. 15의 약수는 1, 3, 5, 15입니다.
3. 공통 약수(공약수)는 1, 5입니다.
4. 그러므로 최대공약수(GCD)는 5입니다.

-예시

다음은 여러분의 calculateGCD메서드가 어떻게 작동해야 하는지 보여주는 몇 가지 예입니다.

BiNumber binum = new BiNumber(48, 18);
System.out.println(binum.calculateGCD()); // Output: 6
 
binum = new BiNumber(0, 5);
System.out.println(binum.calculateGCD()); // Output: 0
 
binum = new BiNumber(-4, 2);
System.out.println(binum.calculateGCD()); // Output: 1

-구현 가이드
1. calculateGCD() 메서드는 먼저 엣지 케이스를 처리해야 합니다.
• 만일 number1또는 number2가 0이라면 메서드는 즉시 0을 리턴해야 합니다. 0과 다른 수의 GCD는 0이기 때문입니다.
• 만일 number1또는 number2가 음수라면 메서드는 즉시 1을 리턴해야 합니다. 음수의 GCD는 1이기 때문입니다.
• 만일 number1과 number2가 같다면 메서드는 즉시 number1(또는 number2)를 리턴해야 합니다. 두 같은 수의 GCD는 그 숫자 자체이기 때문입니다.

2. 다음으로, GCD를 구하기 위한 논리를 구현합니다. 가장 쉬운 방법은 두 수 중 작은 수를 찾는 것입니다. 
작은 수로부터 1까지 반복하면서 각각의 수가 number1과 number2모두의 약수인지 검사합니다. 
이 기준을 충족하는 첫 번째 수가 GCD입니다.

3. 마지막으로 메서드는 GCD를 리턴해야 합니다.
행운을 빕니다 :)

public class BiNumber {
    private int number1;
    private int number2;
    /**
     * Constructor that initializes the two numbers.
     * @param number1: The first number.
     * @param number2: The second number.
     */
    public BiNumber(int number1, int number2) {
        this.number1 = number1;
        this.number2 = number2;
    }
    /**
     * Getter for the first number.
     * @return the first number.
     */
    public int getNumber1() {
        return number1;
    }
    /**
     * Getter for the second number.
     * @return the second number.
     */
    public int getNumber2() {
        return number2;
    }
    /**
     * Calculates and returns the greatest common divisor (GCD) of the two numbers.
     * Edge case: If either number is negative, returns 1 as the GCD for negative numbers is 1.
     * Edge case: If either number is zero, returns 0 as the GCD of 0 and any other number is 0.
     * Edge case: If two numbers are equal, returns the number as the GCD of two equal numbers is the number itself.
     * @return GCD of the two numbers, or 1 if either number is negative, or 0 if either number is zero.
     */
    public int calculateGCD() {
 
    }
}


//다음 코드를 이용하여 최대공약수 코드를 작성하시오.










--------------------------------------------------------------------------------------------









힌트 









힌트 1: GCD의 기본 개념을 상기하십시오. GCD는 나머지를 남기지 않고 두 수를 나눌 수 있는 가장 큰 수입니다.
힌트 2: 일반적인 경우에는 먼저 두 수 중 작은 수를 구합니다. 다음으로 그 작은 수부터 1까지 반복합니다.
힌트 3: 반복문을 매번 반복할 때마다 현재의 수가 number1과 number2모두의 약수인지 검사합니다. 
이 조건을 충족하는 첫 번째 수가 여러분의 GCD입니다.
힌트 4: % 연산자를 사용하여 어떤 수가 다른 수의 약수인지 검사합니다. 만일 a % b가 0이라면 b는 a의 약수입니다.
힌트 5: 잊지 말고 엣지 케이스를 처리하십시오. 만일 number1또는 number2가 0이라면 0을 리턴합니다. 
어느 한 수가 음수라면 1을 리턴합니다. 두 수가 같으면 그 수 자체를 리턴합니다.

--------------------------------------------------------------------------------------------














--------------------------------------------------------------------------------------------













해답)























public class BiNumber {
    private int number1;
    private int number2;

    /**
     * Constructor that initializes the two numbers.
     * @param number1: The first number.
     * @param number2: The second number.
     */
    public BiNumber(int number1, int number2) {
        this.number1 = number1;
        this.number2 = number2;
    }

    /**
     * Getter for the first number.
     * @return the first number.
     */
    public int getNumber1() {
        return number1;
    }

    /**
     * Getter for the second number.
     * @return the second number.
     */
    public int getNumber2() {
        return number2;
    }

    /**
     * Calculates and returns the greatest common divisor (GCD) of the two numbers.
     * Edge case: If either number is negative, returns 1 as the GCD for negative numbers is 1.
     * Edge case: If either number is zero, returns 0 as the GCD of 0 and any other number is 0.
     * Edge case: If two numbers are equal, returns the number as the GCD of two equal numbers is the number itself.
     * @return GCD of the two numbers, or 1 if either number is negative, or 0 if either number is zero.
     */
    public int calculateGCD() {
        //1.처음 시작은 에지케이스 작성으로 시작한다
        if(number1 < 0 || number2 < 0) {
            return 1;
        }   
        if(number1 == 0 || number2 == 0) {
            return 0;
        } 
        if(number1 == number2){
            return number1; //2번도 같은값이기 때문에 number2라고 써도 사용 가능하다
        }
        //이제 본격적으로 gdc계산
        //2.설명되어 있는 가장 쉬운방법은 두숫자중 더 작은 숫자를 찾아서 루프를 만드는것
        //그리고 각 숫자에 대해 1,2번을 모두 나누는지 확인해야 한다. ex)주어진숫자 48과 18 두숫자중 가장 작은수는 18 //18부터 시작하는것이다 18이 이 둘을 나눌수 있을까? 대답은 no //다음으로 17로 확인 할 수있다. 17은 두숫자로 나눌수 있나? no 계속 그렇게 한다 따라서 10으로 계속 내려가면서 8,7,6으로 내려감 따라서 6이 정답 이게 48과 16의 최대공약수이다.
        int min = Math.min(number1,number2);
        for(int i = min; i > 0; i--) { //그래서 우린 최소수인 18을 취하고 1까지 숫자를 계속 확인하면서 두숫자를 나눌수 있는지 계속 확인함
            if(number1 % i == 0 && number2 % i ==0) {
                return i;
            }
        }
        return -1;
    }
}


--------------------------------------------------------------------------------------------
