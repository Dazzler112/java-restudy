

이번 학습에선 정말 중요한 non-access momdifier인 static에 대해 알아보겠다
final non-access modifier를 생성하면서 이를 pakage 안에 생성했었다 이름은 tipAndTricks.access.p1;을 포함한다 패키지를 tipAndTricks.access.nonaccess.p1; 로 바꿔주겠다
같은 패키지를 static modifier의 예시에도 사용해 주도록 하겠다 새로운 클래스를 만들어 보겠다

첫 번째로 왜 static variables와 static modifiers가 필요한지 알아보도록 하겠다 

-----------------------------------------------------------------------------------------------------------------


🟢 StaticModifier 클래스파일



package tipAndTricks.access.nonaccess.p1;

//1: 간단한 클래스를 만들겠다 class Player라고 불러주고, private String name을 갖고 있다고 해보겠다
//생성자 이름을 이용해 생성해 보겠다 Object에 대해선 이미 몇번 언급 했었다 //2: 메인메소드에 작성.. 
class Player {
	private String name;

	
//3: 이걸 실해앟려면 어떻게 해야할까? 만약 여기에 private int count라고 적어주면 어떤 일이 생길까?
//그리고 플레이어가 생성될 때마다 생성자에 count++을 해주도록 하겠다 그리고 간단한 'Getters and Setters'를 생성해 보도록 하겠다
//	private int count;

//5: 여기서 static을 이용해 줄 수 있다	그래서 static int count = 0이라고 놓는 순간, 이후 프로그램을 실행해 주면 //6: 메인메소드 가서 실행...

	private static int count = 0;
	
	public Player(String name) {
		super();
		this.name = name;
		count++;
	}

	public int getCount() {
		return count;
	}
//3계속 : 이렇게 한 후에 플레이어의 수를 출력하고자 한다면어떻게 될까?	 //4: 다시 메인메소드로...
	
}

public class StaticModifier {

	public static void main(String[] args) {
	
		//2: 그러므로 Player player1 = new Player()라고 적어주고 이름을 부여할수 있다 1은Ronaldo ,"Federer"를 적어주고 플레이어의 숫자를 2로 바꾸어 주곘다
		//그러므로 각 플레이어는 각기 다른 이름을 갖게된다 각 플레이어의 object가 다른 이름을 갖는 것이다 player1의 이름을 바꾸어 준다고 해서 player2의 값에 영향을 주지는 않는다, 
		//하지만 가끔, 값들을 일반적으로 저장하고 싶은 경우도 있다 그러므로 여기서, 지금까지 생성된 플레이어들의 숫자를 저장하고 싶다고 해보겠다 //3:Player 클래스로...
//		Player player1 = new Player("Ronaldo");
//		Player player2 = new Player("Federer");
		
		//4: syso()를 적어준다, 2가 저장될까? player1.getCount()와 player2.getCount()를 적어주겠다 무엇이 출력됐냐?
//		System.out.println(player1.getCount());
//		System.out.println(player2.getCount());
		/*출력결과 ==>
		1
		1
		둘 다 1을 출력했다 각자 자신의 값을 모두 포함하고 있기 떄문이다 
		기본적으로 private int count; 여기 부여되는 초기값이 0이라는 사실은 모두 알고 있을 것이다
		그러므로 여기 0이라는 값이 부여되는 순간, 0이 player1에 의해 인상되고, count의 separate instance variable, 즉 분리된 변수는 player2에게 값으로 부여될 것이다
		하지만 여길 보면 지금 저장하는 값은 선수들이 숫자이고 이 변수가 각 instance에 대해 별도의 instance를 갖는 상황은 원하지 않는 상태이다,
		여기서 원하는 상황은 하나의 instance만을 갖는 것이다
		*/
		
		//하나의 instance만을 갖도록 하려면 어떻게 해야할까? 여기서 static을 이용해 줄 수 있다 //5: 다시 위의 Player클래스로...
	
		/*6: 위에 static을 추가한 후 출력결과 ==>
		2
		2
		두 선수의 instance가 2를 출력한다는 것을 알 수 있다 player1.getCount()의 출력은 player2가 생성된 이후에 출력되었다
		*/
		
		Player player1 = new Player("Ronaldo");
		System.out.println(player1.getCount());
		Player player2 = new Player("Federer");
		System.out.println(player2.getCount());
		/* syso 순서 바꾼후 출력==>
		1
		2
		이전에 출력이 되었다면, 1과 2를 출력했을 것이다 그러므로 첫번째 선수가 생성되었고 그 값은 1이다
		그러므로 첫 번째 선수가 생성되었고 그 값은 1이다 두 번째 선수가 생성되었고, 그 값은 2이다
		그러므로 count variable이 선수들의 object를 다수의 instance 사이에서 공유한 것이 된다 
		*/
		//하나의 instance당 하나의 object로 연결되는 일은 없을 것이다 주로 하나로 공유되는 것이 player class의 모든 instance와 연결되는 형태가 될것이다
		//이런 상황 속에선, static variable을 사용해 줄것이다
	}
}

-----------------------------------------------------------------------------------------------------------------






이번 tip에선 static variable을 사용하는 방법에 대해 알아보았다
스스로 프로그램을 만들고 디버깅하며 static variable이 있거나 없는 상태에서 어떻게 되는지 상황을 코드로 작성해 보면서 
더 잘 이해할 수 있도록 하는 방법을 추천한다 

다음 시간에는 static variables와 static method에 대해 조금더 학습해 보도록 하겠다
