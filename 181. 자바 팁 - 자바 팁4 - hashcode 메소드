

지난 단계에서 equals() 메소드를 실행하여 hashCode() 메소드도 함께 실행시켰다는 것을 기억할 것이다
여기서 Eclipese는 이를 실행하기 위해 마우스 오른쪽을 눌러 'Generate hashCode() and equals()'를 차례로 눌러 주겠다
독립적으로 Generate equals()나 Generate hashCode()라 불리는 것은 존재하지 않는다 무조건 이어져있다
왜 그럴까? 그리고 hashCode는 왜 중요한 걸까? 이전 tip에 이어서 이에 관해 이야기를 해보려 한다


                                  • Hashing


                                    |  /  |
                                    |  45 |
                                    -------                                                                    
                                       ↑                                                                      
                                    |  /  |                 |  /  |                               
                                    |  58 |                 |  10 |                                                          
                                    -------                 -------                                                 
                                       ↑                       ↑
|  /  |     |  /  |                 |  /  |     |  /  |     |  /  |     |  /  |                                                         
|  13 |     |  15 |                 |  6  |     |  34 |     |  23 |     |  12 |                                                                                                                                      
-------     -------                 -------     -------     -------     -------                                                                                            
   ↑           ↑                       ↑           ↑           ↑           ↑                                       
|     |  \  |     |  \  |  \  |  \  |     |  \  |     |  \  |     |  \  |     |       
   0     1     2     3     4     5     6     7     8     9    10    11     12

HashMap이 어떤 방식으로 일을 하는지 한 발자국 떨어져서 한번 지켜보도록 하자
HashMap을 생성하면, 내부적으로 'buckets'라는 것을 사용한다 
각 객체는 어떻게 bucket에 할당될까?
우리는 이것이 Hashing function에 기본을 두고 있다고 말한다 
Hashing function은 HashCode를 의미한다 그러므로 HashCode를 기준으로 해서 객체들은 다양한 bucket에 배정될 것이다
HashMap의 효율성은 hashCode implementation에 달려 있다 
그러므로 HashMap을 생성하며 구체적으로 클래스를 추가해 주려면, hashCode implementation이 올바르게 잘 적혔는지 확실하게 확인을 해 주어야 한다
hashCode implementation이 올바르게 값들을 다양한 bucket에 분배하는지, 그래서 특정 bucket에 1,000개, 혹은 0개가 쏠리지 않도록 확인이 필수적이다
bucket들에 비슷한 개수가 나뉘어 들어가도록 해야 한다
이게 hahsCode의 default implementation이 여기서 제공하는 기능이다

● HashCode함수 만족 조건
HashCode 함수가 만족해야 할 몇가지 조건이 있는데 
- 첫 번째로 만약 두 객체가 같다면, 즉, ID가 동일하다면, 이 둘의 HashCode 또한 정확히 일치해야 한다
- 두 번째로 hashCode의 값은 id가 바뀌지 않는 이상 변함이 없어야 한다,
  즉 hashCode의 값이 x였다가 어떨 때는 y인 것은 불가능한 경우이다 또한 이 두 가지 조건들과 더불어,
  equals()메소드를 사용해 줄 떄는 hashCode()메소드도 함께 사용하여 이 두 가지가 함께 사용되도록 한다 (public int hashCode() {, public boolean equals(Object that) {)



/*정리)
hashCode()의 정확한 implementation은 초보자가 이해하기에는 너무 어렵다 다만 이 영상에서 너가 꼭 가져가야 하는 것은 첫 번째로 equals()를 작동시켜 줄 때,
hashCode() 메소드도 함께 실행해 주어야 한다는 점이다 hashCode()메소드는 객체들을 똑같이 나누어 다른 bucket들에 넣어줄 것이다 이게 hashCode()메소드에서 가장 중요한 것이다
그리고 hashCode()메소드가 항상 만족해야 하는 두 가지 조건은 다음과 같다
두 객체가 정확히 일치한다면, 그 둘의 hashCode 또한 정확하게 같아야 한다는 점과, hashCode는 객체의 값이 변하지 않는 이상 그 값이 절대 변화하면 안된다 

여기까지 equals와 hashCode에 대해 너가 꼭 가져가야할 중요한 내용이었다
초보자로서 이러한 몇 가지 코드가 헷갈릴 것이라는걸 알지만, 경험이 쌓일수록 이해하기 더 쉬워진다는 것을 곧 느낄 수 있을 것이다
*/
