
지난 학습에는 숫자들로 구성된 리스트에서 최대값을 구해보는 코드를 작성해 보았다

그러면 최솟값은 어떻게 구할까?
그리고 단말 연산을 통해 또 어떤 작업을 할 수 있을까?
이 내용에 대해 다뤄보는 것이 이번 학습의 주제이다

• 최솟값 min
이전에 사용했던 코드로 시작해 보도록 하겠다 
최솟값을 구하기 위해선 max라 했던 부분을 min으로 바꿔주기만 하면 이 리스트에서 최솟값을 구할 수 있다
jshell> List.of(23,12,34,53).stream().min((n1,n2) -> Integer.compare(n1,n2)).get();
$1 ==> 12
최솟값을 구하는 min은 스트림으로 구현할 수 있는 단말 연산의 종류 중 하나이다


List.of(23,12,34,53).stream().min((n1,n2) -> Integer.compare(n1,n2)).get();
이 리스트에서 홀수들만 뽑아서 리스트를 만들어 보고 싶다고 해보겠다 홀수들만 걸러 내서 마지막에는 
홀수들로만 이루어진 리스트를 얻도록 해 보겠다 어떻게 해야 이게 가능할까?
첫 단계가 필터링이라는 것은 쉽게 예상할 수 있지? 필터링을 통해 홀수인 숫자만 골라내고 싶은 것이다 맞지?
 List.of(23,12,34,53).stream().filter(e -> e % 2 == 1) 이식은 홀수인 값만 골라 활원해 줄 것이다 
그러고 나서 forEach를 적어줄 건대 이게 또 다른 단말 연산에 해당한다 맞지? 지난 강의들에 forEach에 대해 배웠었다
forEach( e -> System.out.println(e)); 주의할 점은 알파벳을 적어주고 나선 계속 같은 알파벳을 적어 주어야 한다는 점이다 
엔터를 누르면 어떤 일이 생길까?
jshell> List.of(23,12,34,53).stream().filter(e -> e % 2 == 1).forEach( e -> System.out.println(e));
23
53
홀수들이 출력되었다
• collect
하지만 홀수들을 출력하려고 했던 것이 아니다 홀수들을 걸러낸 후에 리스트의 형태로 변환하려 한 것이다
그러므로 필터링으로 얻어진 이 값들을 다른 리스트로 변환해 주도록 하겠다
여기서 필터링으로 얻는 값들을 리스트 결과로 갖도록 하는 단말 연산을 하겠다
이 작업은 어떻게 할까?
여기서 또 다른 메소드인 'collect()'를 사용해 줄 것이다 이걸로 무슨 작업을 할 것이냐고?
괄호 안에 Collectors.toList를 적어주겠다 여기서 사용한 정적 메소드를 toList라고 부른다
즉, 여기서 하고 있는 작업을 설명 하자면, 지금 리스트를 모아주고 있다

jshell> List.of(23,12,34,53).stream().filter(e -> e % 2 == 1).collect(Collectors.toList());
$4 ==> [23, 53]
그리고 여기 결과로 리스트가 출력된 것을 확인할 수 있다 숫자가 두 개가 포함되어 있음


단말 연산과 관련된 연습문제 두문제를 내보겠다
첫 번째 문제는 짝수를 뽑아서 리스트 형식으로 저장해야 한다.

첫번째 나의 답)
jshell> List.of(23,12,34,53).stream().filter(e -> e % 2 == 0).collect(Collectors.toList());
$5 ==> [12, 34]


두 번째 문제에선 앞에서 10개의 정수를 제곱한 값을 원소로 갖는 리스트를 만드는 것이다.
앞에서부터 10개의 정수를 제곱한 값으로 리스트를 만들 것이다

두번째 나의 답)
IntStream.range(1,11).map(s -> s * s).collect(Collectors.toList()); ( ❌ 오답 )

이제 하나씩 풀어보도록 하자
-첫 번째 문제는 짝수를 판별해 리스트 형태로 출력하는 것이다
filter부분의 ==1을 ==0으로 바꿔주면 끝이다
jshell> List.of(23,12,34,53).stream().filter(e -> e % 2 == 0).collect(Collectors.toList());
$5 ==> [12, 34]


-두 번째 문제는 살짝 더 복잡하다
앞에서부터 10개의 정수에 대한 제곱 값을 구해주어야 하기 때문이다
또 이 제곱한 값들을 모아 리스트로 출력을 해주어야 한다

먼저 처음 10개의 정수를 리스트 형태에 저장하려면 어떻게 해야 하는지 알고 있지?
IntStream을 사용해야 한다 뒤에 range를 적어준 다음, 범위를(1,11)로 적어준다
전에 설명했지만 최댓값은 사실상 범위에 포함하지 않는다 
그러니 여기에 적어준 값은 1부터 10까지의 숫자를 의미한다 이 범위의 숫자들을 이용해 무엇을 해야 하지?
제곱해 주어야 한다, 어떤 함수를 사용해 주어야 할까? map()을 사용해 주어야 한다 map(e -> e*e)라 적어준다

가장 중요한 요소중 하나는 반환되는 값의 자료 형태이다 IntPipeline이라는 것을 반환한다
jshell> IntStream.range(1,11).map(e -> e * e)
$1 ==> java.util.stream.IntPipeline$4@45283ce2
중요한 것은, 이게 스트림의 형태가 아니라는 점이다, 스트림의 객체가 아니다

/*
abstract class IntPipeline<E_IN> 
            extends AbstractPipeline<E_IN, Integer, IntStream> 
            implements IntStream {
          /**
            *
            *
}
IntPipeline을 살표보면 스트림 고유의 뜻을 고유할 때 이에 해당하지 않는다는 것을 알 수 있다 
스트림 인터페이스를 실행한 것이 아니라는 것을 알 수 있다
*/

그래서 여기서 이 IntStream을 스트림 형태로 변형하는 작업을 하려 한다
그리고 이 작업을 가능하게 하는 함수를 boxed()라 부른다 그러므로 여기 이 부분을 가져와서 .boxed()를 주자
그럼 스트림의 정수형 배열로 변환될 것이다 스트림의 정수형 배열 형태의 자료를 갖는 이상,
collect()함수를 사용할 수 있게 된다 그래서 collect()를 이용해 어떤 작업을 할꺼지?
안에 Collectors.toList를 넣어주면 된다 그리고나서 엔터후 확인
jshell> IntStream.range(1,11).map(e -> e * e).boxed().collect(Collectors.toList());
$2 ==> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
결과로 앞에서 부터 10개 자연수의 제곱이 출력되었다




/*
정리)
지난 몇개의 학습들에서 함수 프로그래밍에 대해 알아보았다  
다음 단계에서, 코드가 실행될 때 정확히 어떤 일이 일어나고 있는 건지에 대해 알아보자
*/
