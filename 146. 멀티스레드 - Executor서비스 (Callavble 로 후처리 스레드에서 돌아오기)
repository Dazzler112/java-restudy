
지난 학습에선 ExecutorService의 기본에 대해 알아보았다
이번 학습에선 Thread로부터 값을 반환받는 방법에 대해 알아보도록 하겠다


-------------------------------------------------------------------------------------------------


package multiThreading;

import java.util.concurrent.*;

class CallableTask implements Callable<String>{//지금껏 Thread생성할 때 Runnable 인터페이스를 실행해 주었다 하지만 특정 값을 반환하는 task의 경우 Callable 인터페이스를 실행해 주어야 한다
	//이 부분의 문장이 call()이라는 메소드를 생성해 줄 것이다
	//그리고 나서 이 코드에 대해 문자열을 반환받고자 하므로 여기 Callable에 제네릭<> String이라 적어줄 것이다
	
	
	//이제 간단하게 매개변수화 작업을 해보도록 하겠다 우선 constructor, 즉 생성자를 만들어 줄 것이다 
	//여기에 public CallableTask()라 적은후, 인자에 String name을 적어줄 것이다 그리고 필드에 name을 생성해주도록 하고 call()의 실행이 끝나고 나면, "Hello" + name을 반환받도록 하겠다 //아래 call()메소드에 적어줌...
	private String name;

	public CallableTask(String name) {
		this.name = name;
	}
	
	
	//어떤 대상을 반환하는 대신 String을 반환받도록 해보겠습니다 Object -> String
	/* 상황 정리==>
	여기서 하는 작업을 정리해 보자면, call메소드를 생성하여 어떤 값을 반환하도록 하는 작업을 하고 있다
	*/
	//다음 위에서 생성자 생성...
	//그리고 나서 또 다른 작업을 하나 해 줄 것이다 이 지점에서 잠시 코드가 대기하도록 해주는 것이다
	//Thread.sleep()을 적고 괄호안에 1000을 적어주도록 하겠다 
	@Override
	public String call() throws Exception {
		Thread.sleep(1000);
		return "Hello" + name;
	}
	//여기서 잠시 대기하는 코드를 넣어준 이유는 주로 Thread를 실행하는 경우, 다양한 과정을 포함할 것이기 때문이다
	//그러므로 여기서 다양한 단계들을 거친 후에, 반환하는 값을 출력해 주도록 하겠다
	//이 Thread는어떻게 실행해야 할까? 다시 아래로...
}

public class CallableRunner {

	public static void main(String[] args) throws InterruptedException, ExecutionException {
		//여기서 어떤 값을 결과로 반환하는 task를 생성해 보려고 한다 그러려면 어떻게 해야 할까? 구체적인 단계로 나누어 생각해 보도록 하겠다
		//먼저 위에 클래스를 생성하는 것 부터 시작해 보도록 하겠다
		
		//ExecutorService를 사용해 줄 수 있다 = Executors.newFixedThreadPool()라 적어주겠다 그리고 크기는 1로 설정해 주었다
		ExecutorService executorService = Executors.newFixedThreadPool(1);
		Future<String> welcomeFuture = 
				executorService.submit(new CallableTask("in1Minutes"));
		//이제 callable을 executorService.submit()을 통해 실행할 수가 있다
		//지금까지는 항상 execute 메소드를 사용했었다 submit() 메소드를 통해 callable을 실행할 수가 있다
		//그러므로 어떤 값을 반환받기 위해선 submit()을 사용해 주어야 한다 이 task의 이름은 new CallableTask였지?
		//그러고 나서 "in1Minutes"를 전달해 주도록 하겠다 결과적으로 괄호 안에는 new CallableTask("in1Minutes")가 있다
		//이 부분을 가져와 새로운 변수로 정의해 주도록 하겠다 (ctrl+1 -> 변수생성) 이를 welcomeFuture라는 새로운 변수로 정의해 주도록 하겠다
		
		/*지금까지 정리==>
		지금까지 진행한 내용을 정리해 보도록 하자 submit()을 사용하고, 값을 가져와서 Future안에 넣어주고 있다
		그러므로 여기서 너가 기억해 두어야 하는 중요한 것 중 하나는 여기 적혀있는 Future이다
		이게 이제 코딩이 완료된 Thread이다
		이게 뭐라고? Thread이다 
		Thread는 조금 시간이 지난후 실행을 완료할 것이다
		즉, main 메소드에 대해 병렬의 형태로 실행될 것이다
		*/
		
		//예를 들어 여기 다음과 같은 코드들이 적혀있다고 가정해보자 syso를 적어 System.out.print()를 적어주고
		System.out.print("\n new CallableTask(\"in1Minutes\") completed");
		//괄호 안에 "\n Main completed"를 적어준다
		//이게 main에 포함된 마지막 줄이다 그러므로 main thread가 이 부분을 포함해서 실행할 것이다
		//그러므로 'Main completed'가 실행되기 전, 다음과 같은 문장 및 코드를 추가로 적어주도록 하겠다
		//이 부분의 코드를 그대로 가져와 넣어주면 된다 여기 syso에 (new CallableTask("in1Minutes"))러고 적어주었다
		//이 화면 뒤에서 정확히 어떤 일이 일어나는지에 대해 알아보는 것이다
		//그러므로 이제 여기서 우린 시도를 해본 후에 결과 혹은 반환값을 얻을 수 있다 반환값은 어떻게 얻어질 수 있을까?
		
		//모든 것의 실행이 완료되고 나면, welcomeFuture.get()을 적어 주면 예외가 생기게 된다
		//그러므로 여기서 Add thorws declaration, 즉 예외 넘기기를 ctrl + 1 키를 눌러 사용해 준다 이를 통해 main 또한 떠넘겨지게 된다
		String welcomeMessage = welcomeFuture.get();
		//그리고 나서 이부분을 지역 변수로 사용하도록 하겠다 이부분이 welcomeMessage가 되고, welcomeMessage를 출력해 주도록 할 것이다
		System.out.print(welcomeMessage);
		//어떤 결과가 나오는지 확인해 보도록 하자
		
		/* 실행결과 ==>
		new CallableTask("in1Minutes") completedHelloin1Minutes
 		Main completed
 		
		코드가 실행되었고 welcomMessage에 해당하는 "Hello in1Minutes"가 출력되었으며,
		main의 실행이 완료되었다는 것을 확인할 수 있다
		*/
		
		System.out.print("\n Main completed");
	}

}

-------------------------------------------------------------------------------------------------





/*
정리)
이번 학습에선, CallableTask를 생성하는 기본적인 방법과
ExecutorService에서 submit() 메소드를 이용하여 실행하는 방법에 대해 알아보았다
get() 메소드가 하는 중요한 일 중 하나가 Future에서 get() 메소드를 불러낼 수 있다는 점이다
Future는 사실 결과가 아니므로,
결과가 나올 것이라는 약속 정도로 이해할 수 있다 
Future에 대해 get() 메소드를 불러내면, task가 실행을 완료할 때 까지 기다리게 될 것이다
그러므로 task의 실행이 완료된 후에만 그다음 줄의 코드가 실행되는 것이다

다음 시간엔 CallableTasks에 대해 조금더 복잡한 내용에 대해 다루어 보도록 하겠다
*/
