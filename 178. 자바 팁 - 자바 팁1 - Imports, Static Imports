

이 교육의 내용을 쭉 배우며 import라는 것을 사용했는데 
이번 학습에선 이에 대해 간단하게 복습을 해보도록 하겠다

-------------------------------------------------------------------------------------------------------------


🟢 ImportsRunner 클래스파일



package tipAndTricks;

import static java.lang.System.*;

//import java.lang.*;
import java.math.*;
//2: import static java.lang.System.out; .*설정으로 인해 이부분은 주석처리
import java.util.*;
//3: import java.util.Collections.*; 

public class ImportsRunner {
	
	//여기서 우린 'import'라는 것에 집중하기로 했다
	public static void main(String[] args) {
		//1: String str = "";라고 줄건데 여기서 String 클래스를 import해 주어야 할까?
		//지금 여기서 String 클래스를 사용하고 있다 하지만 지금 import하고 있냐? import가 보이냐? 아니다 왜 그런 것일까?
		//String이 java.lang;이라는 패키지 안에 들어있기 때문이다, java.lang은 기본적인 improt의 한 부분이다 그러므로 import를 진행하지 않아도 java.lang.* import를 하는 것과 비슷한 효과를 낸다
		//이러한 상황이 화면 뒤에서 벌어지고 있다 여기서 '이러한'상황이라는 것은, java.lang이 사용되지 않았거나 import java.lnag.String 이라고 직접 적어주는 경우를 뜻한다
		//그러므로 여기선 구체적인 클래스를 위해 improt를 구체화하고 있다, 이런 식으로 패키지 않의 모든 import를 구체화해 주는 것이다 그러나,
		//여기서 중요한 사실은 java.lang이 기본적으로 import되어 있다는 사실이다 그러므로 java.lang 안에 있는 무엇이든 사용하게 되면, 예를 들어 이것을 Ctrl 키를 눌러 열어보자
		//java.lang에는 다양한 것들이 존재한다는 것을 알 수 있다 java.lang안에 어떤 것들이 있는지 확인해 보는것을 추천한다 여기에 들어있기 때문에 import를 따로 하지 않아도, 여기있는 모든 클래스를 사용할 수 있다, 
//		String str = "";
	
		//String을 대신해서 BigDecimal을 사용하고 있다고 해보겠다 이는 java.math.*;라는 패키지 안에 존재하기 때문에 이렇게 컴파일 오류가 생긴다,
		//BigDecimal을 import 해준다는 것은, 정확히 말하면 이런 식으로 import 해준다는 의미이다 자바에 존재하는 가장 좋은 관행 중 하나는 import를 사용하려면 특정 클래스를 import해주면 된다
		//'*'과 같은 것들은 사용하지 말아라, 이는 좋은 관행이 아니다, 일반적으로 좋은 관행이란 specific class를 전부 import하는 것을 뜻한다 
		
    ●이번 import에서 기억해야할 점
		/*
		import에 대해 기억해두어야 할 중요한 것은 java.lang이라는 패키지는 이미 도입이 되어있다는 점이다
		java.lang은 구체화할 필요가 없다 만약 다른 클래스를 이용하고 싶다면, 이것들은 새롭게 import 하여 불러와 주어야 한다
		*/
		BigDecimal db = null;
		
		●static import
		//static import라는 것은 매우 흥미로운데 syso가 있다고 해보겠다
		//즉,우리가 하던 것이였다 System.out.println("IMports");과 같이 적어주었었다 이게 일반적으로 코드를 작성하는 방법이다 그리고 나서 실행해 주면, "IMports"를 출력할 것이다
		//Systme.out을 매번 구체화하는 것보다는 import static을 적고 패키지 이름을 적어주면 된다 System에 Ctrl키를 누르고 클릭해서 패키지 이름을 찾아보겠다 java.lang이다 //2: 맨 위에 import static java.lang.System.out;이라 적어주자
		//System.out.method에 static import를 진행하고 있다 이제 더는 System.을 구체화할 필요가 없다 syso()를 이용하고 싶다면 out.println("Static Imports")라 적어주고 실행해 보도록 하겠다
		
    out.println("IMports");
		out.println("Static Imports");
		
    /* 출력결과 ==>
		IMports
		Static Imports
		잘 출력이 되었다
		*/
		//즉, Syso를 매번 불러내는 대신, static import를 사용해 주면 이러한 일들을 바로 처리할 수가 있다
		//지금까지 변수에 대해 static import를 진행하였음을 알 수 있다 그러므로 시스템 안을 들여다보면, 
		/*
		public static final PrintStream out = null;
		static variable이 불려 나와 있다 여기 보다시피 static variable이 나와 있고, static import로 import를 진행해 주었다 
		그리고 이제부터는 out.println()등 이러한 것들을 적는 것도 가능하다 static import는 메소드에서도 가능하다
		*/


		//예를들어 ,Collections.sort()를 사용한다고 해보자 ()안에 어떤 것이 들어가는지는 큰상관 없으니 new ArrayList라 적어주겠다
		//하지만 여기 들어가는 게 실제로 존재하는 리스트여야 하지만, 그러므로 여기에 바로 new ArrayList를 생성해 보겠다
		//가장 먼저 ArrayList를 여기에 import해주어야 한다 그러므로 ArrayList를 한 번 import 해보도록 하자
		//여기 새로운 import java.util.ArrayList;가 들어오고 있고, 이제 Collection를 import해주도록 하겠다
		//즉, 여기서 우리는 ArrayList와 Collections를 이 줄의 코드를 실행할 수 있도록 import해주고 있다 Srot는 Collection의 static메소드, 즉 정적 메소드에 해당한다
		//그러므로 sort와 Collection.sort()를 불러내는 것 보다, 3: import static이라고 적고, 패키지를 바로 여기에 적어서 '모든 Collections 안에 정적 메소드를 import해라'하고 명령할 수 있다
		//그러면 이제 더 자료 형태를 구체화할 필요가 없다 정리하자면, Collection이나 import 모두 구체적으로 지정해 줄 필요가 더 없게 되었다 Collection안에 들어 있는 모든 메소드에 대한 static import가 이루어지고 있다
		//지금부터는 그냥 sort()라고 불러주면 된다 Collections.sort()라고 적으면서 import할 필요가 없다 이는 sort()를 구체적인 클래스에, 만약 천 번 정도 사용해야 하는 것의 경우에 매우 유용하다
		//이 클래스를 유지하고 싶지는 않지만 만약 여기 구체적으로 정적 메소드가 존재해서 특정 클래스에 대해 매우 자주 사용된다고 가정하자 이때 클래스의 이름을 사용할 필요가 없으니, class name을 적고 마침표와 메소드의 이름을 적어주는 작업을 매번 할 필요가 없다
		//그저 메소드의 이름을 불러주고 static import를 구체적인 방법으로 진행해주면 된다
		
    Collections.sort(new ArrayList<String>());
	}
}

-------------------------------------------------------------------------------------------------------------






지금까지 본 것이 import의 기본 설정값인 java.lang이다 
그리고 나서 정적 변수들을 import하는 java.lang.System.out의 과정에 대해 살펴보았다
다음으로 정적 메소드인 java.util.Collections.*를 import 해보았다 
정적 메소드에 대한 다른 예시도 직접 import하며 정적으로 import 할 수 있도록 익히는 것을 추천한다
