
지난 학습에선 두 개 이상의 task를 실행하고 이 task 들이 모두 실행을 완료할 때까지 대기하는 것에 대해 알아보았다
그러나 가끔은 이 task중 하나가 끝날 때까지만 기다려서 실행이 첫 번째로 끝난 것의 값을 결과로 얻고 싶은 경우도 있을수 있다,
ExecutorService와 같은 특수한 경우도 만족할 수 있도록 해준다
구체적으로 어떻게 하는지 알아보자 


--------------------------------------------------------------------------------



package multiThreading;

import java.util.*;
import java.util.concurrent.*;

public class MultipleAnyCallableRunner {
	
	public static void main(String[] args) throws InterruptedException, ExecutionException {

		ExecutorService executorService = Executors.newFixedThreadPool(3);
		
		List<CallableTask> tasks = List.of(new CallableTask("in1Minutes"), new CallableTask("Layer"), new CallableTask("Adam"));
		
//• invokeAny()

		//여기 생성된 task로 이루어진 리스트에서 이부분을 invokeAny()로 교체해 주면 된다
		//invokeAny()는 이 task 실행이 완료되기를 기다린다, 이들 중 하나라도 task의 실행이 완료되면 결과가 도출된다
		//그래서 결과는 딱 한 가지로만 결정이 된다
		//어떤 일이 일어나는 것인지 자세히 살펴 보겠다
		String result = executorService.invokeAny(tasks);
		//이 부분을 보면 딱 한가지의 결론만 반환이 된다 그러므로 result가 직접적으로 바로 String으로 나오고,
		//그러면 여기에 곧바로 결과를 출력해 보도록 하자
		
		System.out.println(result);
	
		executorService.shutdown();
		/* 실행원리 ==>
		여기 우리가 하는 작업은 매우 간단한 작업이다 
		세 가자의 task를 실행할 것이다 세가지 중 하나라도 실행이 완료되면,
		실행이 완료된 task를 결과로 하여 출력해 주면 되는 것이다
		즉, 만약 세 가지 종류의 서비스를 사용하고 있는데 소비자에게 가장 빠른 결과를 제공하고 싶다면,
		가장 먼저 나오는 결과를 반환해 주면 된다
		이런 상황에서는 invokeAny()가 매우 유용하다
		*/
		
		//이것들을 실행해 보도록 하겠다
		//"Hello Adam"이 출력된 것을확인할 수 있다 또다시 실행해 보면,
		//"Hello in1Minutes"이 출력되었다 그다음은 "Hello Layer".. 또"Hello Adam"
		//결과가 계속 바뀐다는 것도 알 수 있다 사용되는 thread가 세 개이기 때문에 실행할 때마다 다른 결과가 나오는 것이 가능하다
		//세 가지 다른 결과들이 나오는 것을 확인할 수 있다 
		//이게 바로 invokeAny()메소드의 기능이다
	}

}

--------------------------------------------------------------------------------





/*
정리)
이번 학습은 비교적 간단했는데
invokeAny() 메소드의 사용 방법에 대해 알아보았다
다수의 task로 이루어진 리스트를 전달하여
task중 하나의 실행이 완료되면, 결과를 반환하여 
결과값을 사용할 수 있게 된다 이게 invokeAny()의 사용법이다
*/
